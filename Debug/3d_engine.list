
3d_engine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e00  08012888  08012888  00022888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014688  08014688  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014688  08014688  00024688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014690  08014690  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014690  08014690  00024690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014694  08014694  00024694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08014698  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08014730  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  080147d0  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000090c0  200001d8  08014870  000301d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20009298  08014870  00039298  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003852e  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000073a5  00000000  00000000  00068779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003058  00000000  00000000  0006fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000259e  00000000  00000000  00072b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003381f  00000000  00000000  00075116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003c251  00000000  00000000  000a8935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001292da  00000000  00000000  000e4b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000d69c  00000000  00000000  0020de60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  0021b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012870 	.word	0x08012870

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08012870 	.word	0x08012870

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <vApplicationGetIdleTaskMemory+0x30>)
 8000f1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200001f4 	.word	0x200001f4
 8000f38:	2000024c 	.word	0x2000024c

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f004 fdeb 	bl	8005b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f85f 	bl	8001008 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f4a:	f000 f8cf 	bl	80010ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f001 f8d9 	bl	8002104 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000f52:	f000 f8fd 	bl	8001150 <MX_ADC3_Init>
  MX_CRC_Init();
 8000f56:	f000 f94d 	bl	80011f4 <MX_CRC_Init>
  MX_ETH_Init();
 8000f5a:	f000 f99f 	bl	800129c <MX_ETH_Init>
  MX_FMC_Init();
 8000f5e:	f001 f881 	bl	8002064 <MX_FMC_Init>
  MX_I2C1_Init();
 8000f62:	f000 f9e9 	bl	8001338 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000f66:	f000 fa27 	bl	80013b8 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8000f6a:	f000 fb17 	bl	800159c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000f6e:	f000 fb41 	bl	80015f4 <MX_RTC_Init>
  MX_SAI2_Init();
 8000f72:	f000 fbe3 	bl	800173c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000f76:	f000 fc89 	bl	800188c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000f7a:	f000 fca9 	bl	80018d0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000f7e:	f000 fcd7 	bl	8001930 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000f82:	f000 fd13 	bl	80019ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f86:	f000 fdbd 	bl	8001b04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f8a:	f000 fe31 	bl	8001bf0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000f8e:	f000 fef7 	bl	8001d80 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000f92:	f000 ff6d 	bl	8001e70 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000f96:	f000 ffbf 	bl	8001f18 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000f9a:	f001 f803 	bl	8001fa4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000f9e:	f001 f831 	bl	8002004 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000fa2:	f00d f9d5 	bl	800e350 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8000fa6:	f00d fc4d 	bl	800e844 <MX_LIBJPEG_Init>
  MX_LTDC_Init();
 8000faa:	f000 fa45 	bl	8001438 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8000fae:	f000 f943 	bl	8001238 <MX_DMA2D_Init>
  MX_TIM4_Init();
 8000fb2:	f000 fe95 	bl	8001ce0 <MX_TIM4_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  StlEventGroup = xEventGroupCreate();
 8000fb6:	f00d fe31 	bl	800ec1c <xEventGroupCreate>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <main+0xbc>)
 8000fbe:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  queue=xQueueCreate(3,sizeof(double[3]));
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2118      	movs	r1, #24
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f00d ffe3 	bl	800ef90 <xQueueGenericCreate>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <main+0xc0>)
 8000fce:	6013      	str	r3, [r2, #0]
  /* definition and creation of Renderer */
//  osThreadDef(Renderer, StartTask02, osPriorityLow, 0, 1024);
//  RendererHandle = osThreadCreate(osThread(Renderer), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Renderer, renderer, osPriorityLow, 0, 4096);
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <main+0xc4>)
 8000fd2:	1d3c      	adds	r4, r7, #4
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RendererHandle = osThreadCreate(osThread(Renderer), NULL);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00d fcdc 	bl	800e9a4 <osThreadCreate>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <main+0xc8>)
 8000ff0:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ff2:	f00d fcb4 	bl	800e95e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <main+0xba>
 8000ff8:	20000d38 	.word	0x20000d38
 8000ffc:	20000d34 	.word	0x20000d34
 8001000:	08012894 	.word	0x08012894
 8001004:	20000d30 	.word	0x20000d30

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f010 f9ea 	bl	80113f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800102c:	f007 f834 	bl	8008098 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <SystemClock_Config+0xdc>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a2b      	ldr	r2, [pc, #172]	; (80010e4 <SystemClock_Config+0xdc>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <SystemClock_Config+0xdc>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <SystemClock_Config+0xe0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <SystemClock_Config+0xe0>)
 800104e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <SystemClock_Config+0xe0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001060:	2309      	movs	r3, #9
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800106a:	2301      	movs	r3, #1
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001072:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001078:	2319      	movs	r3, #25
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800107c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001080:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001086:	2309      	movs	r3, #9
 8001088:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	4618      	mov	r0, r3
 8001090:	f007 f924 	bl	80082dc <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800109a:	f001 fcc3 	bl	8002a24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800109e:	f007 f80b 	bl	80080b8 <HAL_PWREx_EnableOverDrive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010a8:	f001 fcbc 	bl	8002a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2302      	movs	r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2106      	movs	r1, #6
 80010ca:	4618      	mov	r0, r3
 80010cc:	f007 fbaa 	bl	8008824 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010d6:	f001 fca5 	bl	8002a24 <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3750      	adds	r7, #80	; 0x50
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0a2      	sub	sp, #136	; 0x88
 80010f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2284      	movs	r2, #132	; 0x84
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f010 f979 	bl	80113f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <PeriphCommonClock_Config+0x60>)
 8001100:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001102:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001106:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001108:	2305      	movs	r3, #5
 800110a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001110:	2303      	movs	r3, #3
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800111e:	2300      	movs	r3, #0
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001122:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f007 fd8e 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800113e:	f001 fc71 	bl	8002a24 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3788      	adds	r7, #136	; 0x88
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	00b00008 	.word	0x00b00008

08001150 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_ADC3_Init+0x98>)
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <MX_ADC3_Init+0x9c>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC3_Init+0x98>)
 800116a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800116e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC3_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_ADC3_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC3_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_ADC3_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_ADC3_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_ADC3_Init+0x98>)
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <MX_ADC3_Init+0xa0>)
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_ADC3_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_ADC3_Init+0x98>)
 800119e:	2201      	movs	r2, #1
 80011a0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_ADC3_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_ADC3_Init+0x98>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_ADC3_Init+0x98>)
 80011b2:	f004 fd05 	bl	8005bc0 <HAL_ADC_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80011bc:	f001 fc32 	bl	8002a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011c0:	2304      	movs	r3, #4
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_ADC3_Init+0x98>)
 80011d2:	f004 fd39 	bl	8005c48 <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80011dc:	f001 fc22 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000484 	.word	0x20000484
 80011ec:	40012200 	.word	0x40012200
 80011f0:	0f000001 	.word	0x0f000001

080011f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_CRC_Init+0x3c>)
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <MX_CRC_Init+0x40>)
 80011fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_CRC_Init+0x3c>)
 8001200:	2200      	movs	r2, #0
 8001202:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_CRC_Init+0x3c>)
 8001206:	2200      	movs	r2, #0
 8001208:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_CRC_Init+0x3c>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_CRC_Init+0x3c>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_CRC_Init+0x3c>)
 8001218:	2201      	movs	r2, #1
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_CRC_Init+0x3c>)
 800121e:	f005 f845 	bl	80062ac <HAL_CRC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001228:	f001 fbfc 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200004cc 	.word	0x200004cc
 8001234:	40023000 	.word	0x40023000

08001238 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_DMA2D_Init+0x5c>)
 800123e:	4a16      	ldr	r2, [pc, #88]	; (8001298 <MX_DMA2D_Init+0x60>)
 8001240:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_DMA2D_Init+0x5c>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_DMA2D_Init+0x5c>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_DMA2D_Init+0x5c>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_DMA2D_Init+0x5c>)
 8001256:	2200      	movs	r2, #0
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_DMA2D_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_DMA2D_Init+0x5c>)
 8001262:	2200      	movs	r2, #0
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_DMA2D_Init+0x5c>)
 8001268:	2200      	movs	r2, #0
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800126c:	4809      	ldr	r0, [pc, #36]	; (8001294 <MX_DMA2D_Init+0x5c>)
 800126e:	f005 fb81 	bl	8006974 <HAL_DMA2D_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001278:	f001 fbd4 	bl	8002a24 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800127c:	2101      	movs	r1, #1
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_DMA2D_Init+0x5c>)
 8001280:	f005 fcd6 	bl	8006c30 <HAL_DMA2D_ConfigLayer>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800128a:	f001 fbcb 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200004f0 	.word	0x200004f0
 8001298:	4002b000 	.word	0x4002b000

0800129c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_ETH_Init+0x84>)
 80012a2:	4a20      	ldr	r2, [pc, #128]	; (8001324 <MX_ETH_Init+0x88>)
 80012a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_ETH_Init+0x8c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_ETH_Init+0x8c>)
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_ETH_Init+0x8c>)
 80012b4:	22e1      	movs	r2, #225	; 0xe1
 80012b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_ETH_Init+0x8c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_ETH_Init+0x8c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_ETH_Init+0x8c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_ETH_Init+0x84>)
 80012cc:	4a16      	ldr	r2, [pc, #88]	; (8001328 <MX_ETH_Init+0x8c>)
 80012ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_ETH_Init+0x84>)
 80012d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_ETH_Init+0x84>)
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <MX_ETH_Init+0x90>)
 80012dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_ETH_Init+0x84>)
 80012e0:	4a13      	ldr	r2, [pc, #76]	; (8001330 <MX_ETH_Init+0x94>)
 80012e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_ETH_Init+0x84>)
 80012e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_ETH_Init+0x84>)
 80012ee:	f005 fdcd 	bl	8006e8c <HAL_ETH_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80012f8:	f001 fb94 	bl	8002a24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012fc:	2238      	movs	r2, #56	; 0x38
 80012fe:	2100      	movs	r1, #0
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <MX_ETH_Init+0x98>)
 8001302:	f010 f875 	bl	80113f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_ETH_Init+0x98>)
 8001308:	2221      	movs	r2, #33	; 0x21
 800130a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_ETH_Init+0x98>)
 800130e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001312:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_ETH_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000530 	.word	0x20000530
 8001324:	40028000 	.word	0x40028000
 8001328:	20000d40 	.word	0x20000d40
 800132c:	20000138 	.word	0x20000138
 8001330:	20000098 	.word	0x20000098
 8001334:	2000044c 	.word	0x2000044c

08001338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_I2C1_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C1_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_I2C1_Init+0x74>)
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_I2C1_Init+0x7c>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_I2C1_Init+0x74>)
 8001350:	2201      	movs	r2, #1
 8001352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_I2C1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_I2C1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <MX_I2C1_Init+0x74>)
 8001374:	f006 fab2 	bl	80078dc <HAL_I2C_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800137e:	f001 fb51 	bl	8002a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001382:	2100      	movs	r1, #0
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <MX_I2C1_Init+0x74>)
 8001386:	f006 fb39 	bl	80079fc <HAL_I2CEx_ConfigAnalogFilter>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001390:	f001 fb48 	bl	8002a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_I2C1_Init+0x74>)
 8001398:	f006 fb7b 	bl	8007a92 <HAL_I2CEx_ConfigDigitalFilter>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f001 fb3f 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200005e0 	.word	0x200005e0
 80013b0:	40005400 	.word	0x40005400
 80013b4:	00c0eaff 	.word	0x00c0eaff

080013b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_I2C3_Init+0x74>)
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <MX_I2C3_Init+0x78>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_I2C3_Init+0x74>)
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <MX_I2C3_Init+0x7c>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_I2C3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_I2C3_Init+0x74>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_I2C3_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_I2C3_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_I2C3_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_I2C3_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_I2C3_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013f2:	480e      	ldr	r0, [pc, #56]	; (800142c <MX_I2C3_Init+0x74>)
 80013f4:	f006 fa72 	bl	80078dc <HAL_I2C_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80013fe:	f001 fb11 	bl	8002a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <MX_I2C3_Init+0x74>)
 8001406:	f006 faf9 	bl	80079fc <HAL_I2CEx_ConfigAnalogFilter>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001410:	f001 fb08 	bl	8002a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001414:	2100      	movs	r1, #0
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_I2C3_Init+0x74>)
 8001418:	f006 fb3b 	bl	8007a92 <HAL_I2CEx_ConfigDigitalFilter>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001422:	f001 faff 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000634 	.word	0x20000634
 8001430:	40005c00 	.word	0x40005c00
 8001434:	00c0eaff 	.word	0x00c0eaff

08001438 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b09a      	sub	sp, #104	; 0x68
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800143e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001442:	2234      	movs	r2, #52	; 0x34
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f00f ffd2 	bl	80113f0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2234      	movs	r2, #52	; 0x34
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f00f ffcc 	bl	80113f0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001458:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <MX_LTDC_Init+0x15c>)
 800145a:	4a4f      	ldr	r2, [pc, #316]	; (8001598 <MX_LTDC_Init+0x160>)
 800145c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800145e:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <MX_LTDC_Init+0x15c>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001464:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <MX_LTDC_Init+0x15c>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800146a:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <MX_LTDC_Init+0x15c>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001470:	4b48      	ldr	r3, [pc, #288]	; (8001594 <MX_LTDC_Init+0x15c>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <MX_LTDC_Init+0x15c>)
 8001478:	2228      	movs	r2, #40	; 0x28
 800147a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800147c:	4b45      	ldr	r3, [pc, #276]	; (8001594 <MX_LTDC_Init+0x15c>)
 800147e:	2209      	movs	r2, #9
 8001480:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <MX_LTDC_Init+0x15c>)
 8001484:	2235      	movs	r2, #53	; 0x35
 8001486:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001488:	4b42      	ldr	r3, [pc, #264]	; (8001594 <MX_LTDC_Init+0x15c>)
 800148a:	220b      	movs	r2, #11
 800148c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800148e:	4b41      	ldr	r3, [pc, #260]	; (8001594 <MX_LTDC_Init+0x15c>)
 8001490:	f240 2215 	movw	r2, #533	; 0x215
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <MX_LTDC_Init+0x15c>)
 8001498:	f240 121b 	movw	r2, #283	; 0x11b
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <MX_LTDC_Init+0x15c>)
 80014a0:	f240 2235 	movw	r2, #565	; 0x235
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <MX_LTDC_Init+0x15c>)
 80014a8:	f240 121d 	movw	r2, #285	; 0x11d
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <MX_LTDC_Init+0x15c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <MX_LTDC_Init+0x15c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014be:	4b35      	ldr	r3, [pc, #212]	; (8001594 <MX_LTDC_Init+0x15c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014c6:	4833      	ldr	r0, [pc, #204]	; (8001594 <MX_LTDC_Init+0x15c>)
 80014c8:	f006 fb30 	bl	8007b2c <HAL_LTDC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80014d2:	f001 faa7 	bl	8002a24 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80014e6:	2300      	movs	r3, #0
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80014f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80014f8:	2305      	movs	r3, #5
 80014fa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800151a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <MX_LTDC_Init+0x15c>)
 8001524:	f006 fbd2 	bl	8007ccc <HAL_LTDC_ConfigLayer>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800152e:	f001 fa79 	bl	8002a24 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800154e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001552:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001554:	2305      	movs	r3, #5
 8001556:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_LTDC_Init+0x15c>)
 800157e:	f006 fba5 	bl	8007ccc <HAL_LTDC_ConfigLayer>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001588:	f001 fa4c 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3768      	adds	r7, #104	; 0x68
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000688 	.word	0x20000688
 8001598:	40016800 	.word	0x40016800

0800159c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <MX_QUADSPI_Init+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015ae:	2204      	movs	r2, #4
 80015b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015ba:	2218      	movs	r2, #24
 80015bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015c0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80015c4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_QUADSPI_Init+0x50>)
 80015da:	f006 fdbd 	bl	8008158 <HAL_QSPI_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80015e4:	f001 fa1e 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000730 	.word	0x20000730
 80015f0:	a0001000 	.word	0xa0001000

080015f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	; 0x40
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	2228      	movs	r2, #40	; 0x28
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00f feeb 	bl	80113f0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <MX_RTC_Init+0x140>)
 800161c:	4a46      	ldr	r2, [pc, #280]	; (8001738 <MX_RTC_Init+0x144>)
 800161e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001620:	4b44      	ldr	r3, [pc, #272]	; (8001734 <MX_RTC_Init+0x140>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <MX_RTC_Init+0x140>)
 8001628:	227f      	movs	r2, #127	; 0x7f
 800162a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800162c:	4b41      	ldr	r3, [pc, #260]	; (8001734 <MX_RTC_Init+0x140>)
 800162e:	22ff      	movs	r2, #255	; 0xff
 8001630:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <MX_RTC_Init+0x140>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001638:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <MX_RTC_Init+0x140>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <MX_RTC_Init+0x140>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001644:	483b      	ldr	r0, [pc, #236]	; (8001734 <MX_RTC_Init+0x140>)
 8001646:	f008 f835 	bl	80096b4 <HAL_RTC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001650:	f001 f9e8 	bl	8002a24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800166e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001672:	2201      	movs	r2, #1
 8001674:	4619      	mov	r1, r3
 8001676:	482f      	ldr	r0, [pc, #188]	; (8001734 <MX_RTC_Init+0x140>)
 8001678:	f008 f8a0 	bl	80097bc <HAL_RTC_SetTime>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001682:	f001 f9cf 	bl	8002a24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800168c:	2301      	movs	r3, #1
 800168e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	2201      	movs	r2, #1
 80016a4:	4619      	mov	r1, r3
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <MX_RTC_Init+0x140>)
 80016a8:	f008 f922 	bl	80098f0 <HAL_RTC_SetDate>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80016b2:	f001 f9b7 	bl	8002a24 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80016be:	2300      	movs	r3, #0
 80016c0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80016e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016e6:	463b      	mov	r3, r7
 80016e8:	2201      	movs	r2, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	4811      	ldr	r0, [pc, #68]	; (8001734 <MX_RTC_Init+0x140>)
 80016ee:	f008 f983 	bl	80099f8 <HAL_RTC_SetAlarm>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80016f8:	f001 f994 	bl	8002a24 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80016fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	2201      	movs	r2, #1
 8001706:	4619      	mov	r1, r3
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <MX_RTC_Init+0x140>)
 800170a:	f008 f975 	bl	80099f8 <HAL_RTC_SetAlarm>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001714:	f001 f986 	bl	8002a24 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001718:	2202      	movs	r2, #2
 800171a:	2100      	movs	r1, #0
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_RTC_Init+0x140>)
 800171e:	f008 fb37 	bl	8009d90 <HAL_RTCEx_SetTimeStamp>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001728:	f001 f97c 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3740      	adds	r7, #64	; 0x40
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000077c 	.word	0x2000077c
 8001738:	40002800 	.word	0x40002800

0800173c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001740:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001742:	4a4e      	ldr	r2, [pc, #312]	; (800187c <MX_SAI2_Init+0x140>)
 8001744:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001746:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001748:	2200      	movs	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800174c:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <MX_SAI2_Init+0x13c>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001754:	2240      	movs	r2, #64	; 0x40
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001758:	4b47      	ldr	r3, [pc, #284]	; (8001878 <MX_SAI2_Init+0x13c>)
 800175a:	2200      	movs	r2, #0
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800175e:	4b46      	ldr	r3, [pc, #280]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001760:	2200      	movs	r2, #0
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001764:	4b44      	ldr	r3, [pc, #272]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <MX_SAI2_Init+0x13c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001770:	4b41      	ldr	r3, [pc, #260]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800177c:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <MX_SAI2_Init+0x13c>)
 800177e:	4a40      	ldr	r2, [pc, #256]	; (8001880 <MX_SAI2_Init+0x144>)
 8001780:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001788:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <MX_SAI2_Init+0x13c>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001790:	2200      	movs	r2, #0
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <MX_SAI2_Init+0x13c>)
 8001796:	2200      	movs	r2, #0
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <MX_SAI2_Init+0x13c>)
 800179c:	2208      	movs	r2, #8
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80017a0:	4b35      	ldr	r3, [pc, #212]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80017a6:	4b34      	ldr	r3, [pc, #208]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80017d0:	4829      	ldr	r0, [pc, #164]	; (8001878 <MX_SAI2_Init+0x13c>)
 80017d2:	f008 fb45 	bl	8009e60 <HAL_SAI_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80017dc:	f001 f922 	bl	8002a24 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_SAI2_Init+0x148>)
 80017e2:	4a29      	ldr	r2, [pc, #164]	; (8001888 <MX_SAI2_Init+0x14c>)
 80017e4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <MX_SAI2_Init+0x148>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_SAI2_Init+0x148>)
 80017ee:	2203      	movs	r2, #3
 80017f0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <MX_SAI2_Init+0x148>)
 80017f4:	2240      	movs	r2, #64	; 0x40
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <MX_SAI2_Init+0x148>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <MX_SAI2_Init+0x148>)
 8001800:	2200      	movs	r2, #0
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_SAI2_Init+0x148>)
 8001806:	2201      	movs	r2, #1
 8001808:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <MX_SAI2_Init+0x148>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_SAI2_Init+0x148>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MX_SAI2_Init+0x148>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_SAI2_Init+0x148>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_SAI2_Init+0x148>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_SAI2_Init+0x148>)
 800182a:	2200      	movs	r2, #0
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_SAI2_Init+0x148>)
 8001830:	2208      	movs	r2, #8
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <MX_SAI2_Init+0x148>)
 8001836:	2201      	movs	r2, #1
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_SAI2_Init+0x148>)
 800183c:	2200      	movs	r2, #0
 800183e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <MX_SAI2_Init+0x148>)
 8001842:	2200      	movs	r2, #0
 8001844:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_SAI2_Init+0x148>)
 8001848:	2200      	movs	r2, #0
 800184a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <MX_SAI2_Init+0x148>)
 800184e:	2200      	movs	r2, #0
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_SAI2_Init+0x148>)
 8001854:	2200      	movs	r2, #0
 8001856:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_SAI2_Init+0x148>)
 800185a:	2201      	movs	r2, #1
 800185c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_SAI2_Init+0x148>)
 8001860:	2200      	movs	r2, #0
 8001862:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <MX_SAI2_Init+0x148>)
 8001866:	f008 fafb 	bl	8009e60 <HAL_SAI_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001870:	f001 f8d8 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000079c 	.word	0x2000079c
 800187c:	40015c04 	.word	0x40015c04
 8001880:	0002ee00 	.word	0x0002ee00
 8001884:	20000820 	.word	0x20000820
 8001888:	40015c24 	.word	0x40015c24

0800188c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */
//
  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <MX_SDMMC1_SD_Init+0x3c>)
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <MX_SDMMC1_SD_Init+0x40>)
 8001894:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_SDMMC1_SD_Init+0x3c>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <MX_SDMMC1_SD_Init+0x3c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_SDMMC1_SD_Init+0x3c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <MX_SDMMC1_SD_Init+0x3c>)
 80018aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ae:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <MX_SDMMC1_SD_Init+0x3c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <MX_SDMMC1_SD_Init+0x3c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
//
  /* USER CODE END SDMMC1_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200008a4 	.word	0x200008a4
 80018cc:	40012c00 	.word	0x40012c00

080018d0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 80018d6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80018da:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 8001914:	2200      	movs	r2, #0
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_SPDIFRX_Init+0x5c>)
 800191a:	f00a f813 	bl	800b944 <HAL_SPDIFRX_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001924:	f001 f87e 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000928 	.word	0x20000928

08001930 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <MX_SPI2_Init+0x78>)
 8001938:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_SPI2_Init+0x74>)
 800193c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001940:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <MX_SPI2_Init+0x74>)
 800194a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800194e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_SPI2_Init+0x74>)
 800195e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001962:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_SPI2_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_SPI2_Init+0x74>)
 800197e:	2207      	movs	r2, #7
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_SPI2_Init+0x74>)
 800198a:	2208      	movs	r2, #8
 800198c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_SPI2_Init+0x74>)
 8001990:	f00a f834 	bl	800b9fc <HAL_SPI_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800199a:	f001 f843 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000974 	.word	0x20000974
 80019a8:	40003800 	.word	0x40003800

080019ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09a      	sub	sp, #104	; 0x68
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	615a      	str	r2, [r3, #20]
 80019de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	222c      	movs	r2, #44	; 0x2c
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00f fd02 	bl	80113f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <MX_TIM1_Init+0x150>)
 80019ee:	4a44      	ldr	r2, [pc, #272]	; (8001b00 <MX_TIM1_Init+0x154>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019f2:	4b42      	ldr	r3, [pc, #264]	; (8001afc <MX_TIM1_Init+0x150>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <MX_TIM1_Init+0x150>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019fe:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a18:	4838      	ldr	r0, [pc, #224]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a1a:	f00a f89a 	bl	800bb52 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a24:	f000 fffe 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a32:	4619      	mov	r1, r3
 8001a34:	4831      	ldr	r0, [pc, #196]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a36:	f00a fc0d 	bl	800c254 <HAL_TIM_ConfigClockSource>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a40:	f000 fff0 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a44:	482d      	ldr	r0, [pc, #180]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a46:	f00a f97b 	bl	800bd40 <HAL_TIM_PWM_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a50:	f000 ffe8 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a64:	4619      	mov	r1, r3
 8001a66:	4825      	ldr	r0, [pc, #148]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a68:	f00b f87e 	bl	800cb68 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a72:	f000 ffd7 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a76:	2360      	movs	r3, #96	; 0x60
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4818      	ldr	r0, [pc, #96]	; (8001afc <MX_TIM1_Init+0x150>)
 8001a9c:	f00a fac6 	bl	800c02c <HAL_TIM_PWM_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001aa6:	f000 ffbd 	bl	8002a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4807      	ldr	r0, [pc, #28]	; (8001afc <MX_TIM1_Init+0x150>)
 8001ae0:	f00b f8d0 	bl	800cc84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001aea:	f000 ff9b 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aee:	4803      	ldr	r0, [pc, #12]	; (8001afc <MX_TIM1_Init+0x150>)
 8001af0:	f001 fcf6 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8001af4:	bf00      	nop
 8001af6:	3768      	adds	r7, #104	; 0x68
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200009d8 	.word	0x200009d8
 8001b00:	40010000 	.word	0x40010000

08001b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	; 0x38
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b5e:	4823      	ldr	r0, [pc, #140]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b60:	f009 fff7 	bl	800bb52 <HAL_TIM_Base_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b6a:	f000 ff5b 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481c      	ldr	r0, [pc, #112]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b7c:	f00a fb6a 	bl	800c254 <HAL_TIM_ConfigClockSource>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b86:	f000 ff4d 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b8a:	4818      	ldr	r0, [pc, #96]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001b8c:	f00a f8d8 	bl	800bd40 <HAL_TIM_PWM_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b96:	f000 ff45 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4810      	ldr	r0, [pc, #64]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001baa:	f00a ffdd 	bl	800cb68 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001bb4:	f000 ff36 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	2360      	movs	r3, #96	; 0x60
 8001bba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001bd0:	f00a fa2c 	bl	800c02c <HAL_TIM_PWM_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001bda:	f000 ff23 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bde:	4803      	ldr	r0, [pc, #12]	; (8001bec <MX_TIM2_Init+0xe8>)
 8001be0:	f001 fc7e 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8001be4:	bf00      	nop
 8001be6:	3738      	adds	r7, #56	; 0x38
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000a24 	.word	0x20000a24

08001bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c10:	463b      	mov	r3, r7
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	615a      	str	r2, [r3, #20]
 8001c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c24:	4a2d      	ldr	r2, [pc, #180]	; (8001cdc <MX_TIM3_Init+0xec>)
 8001c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c48:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c4a:	f009 ff82 	bl	800bb52 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c54:	f000 fee6 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c62:	4619      	mov	r1, r3
 8001c64:	481c      	ldr	r0, [pc, #112]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c66:	f00a faf5 	bl	800c254 <HAL_TIM_ConfigClockSource>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c70:	f000 fed8 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c74:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c76:	f00a f863 	bl	800bd40 <HAL_TIM_PWM_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c80:	f000 fed0 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	4811      	ldr	r0, [pc, #68]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c94:	f00a ff68 	bl	800cb68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c9e:	f000 fec1 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca2:	2360      	movs	r3, #96	; 0x60
 8001ca4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001cba:	f00a f9b7 	bl	800c02c <HAL_TIM_PWM_ConfigChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cc4:	f000 feae 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MX_TIM3_Init+0xe8>)
 8001cca:	f001 fc09 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8001cce:	bf00      	nop
 8001cd0:	3738      	adds	r7, #56	; 0x38
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000a70 	.word	0x20000a70
 8001cdc:	40000400 	.word	0x40000400

08001ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <MX_TIM4_Init+0x9c>)
 8001d02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d14:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d26:	4814      	ldr	r0, [pc, #80]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d28:	f009 ff13 	bl	800bb52 <HAL_TIM_Base_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001d32:	f000 fe77 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d44:	f00a fa86 	bl	800c254 <HAL_TIM_ConfigClockSource>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001d4e:	f000 fe69 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d60:	f00a ff02 	bl	800cb68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001d6a:	f000 fe5b 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000abc 	.word	0x20000abc
 8001d7c:	40000800 	.word	0x40000800

08001d80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da0:	463b      	mov	r3, r7
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001db4:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <MX_TIM5_Init+0xec>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dd8:	4823      	ldr	r0, [pc, #140]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001dda:	f009 feba 	bl	800bb52 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001de4:	f000 fe1e 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df2:	4619      	mov	r1, r3
 8001df4:	481c      	ldr	r0, [pc, #112]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001df6:	f00a fa2d 	bl	800c254 <HAL_TIM_ConfigClockSource>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001e00:	f000 fe10 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e04:	4818      	ldr	r0, [pc, #96]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001e06:	f009 ff9b 	bl	800bd40 <HAL_TIM_PWM_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001e10:	f000 fe08 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	4619      	mov	r1, r3
 8001e22:	4811      	ldr	r0, [pc, #68]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001e24:	f00a fea0 	bl	800cb68 <HAL_TIMEx_MasterConfigSynchronization>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001e2e:	f000 fdf9 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e32:	2360      	movs	r3, #96	; 0x60
 8001e34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e42:	463b      	mov	r3, r7
 8001e44:	220c      	movs	r2, #12
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001e4a:	f00a f8ef 	bl	800c02c <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001e54:	f000 fde6 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <MX_TIM5_Init+0xe8>)
 8001e5a:	f001 fb41 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8001e5e:	bf00      	nop
 8001e60:	3738      	adds	r7, #56	; 0x38
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000b08 	.word	0x20000b08
 8001e6c:	40000c00 	.word	0x40000c00

08001e70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001e90:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <MX_TIM8_Init+0xa4>)
 8001e92:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001eba:	4815      	ldr	r0, [pc, #84]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001ebc:	f009 fe49 	bl	800bb52 <HAL_TIM_Base_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001ec6:	f000 fdad 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ece:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480e      	ldr	r0, [pc, #56]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001ed8:	f00a f9bc 	bl	800c254 <HAL_TIM_ConfigClockSource>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001ee2:	f000 fd9f 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	; (8001f10 <MX_TIM8_Init+0xa0>)
 8001ef8:	f00a fe36 	bl	800cb68 <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001f02:	f000 fd8f 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000b54 	.word	0x20000b54
 8001f14:	40010400 	.word	0x40010400

08001f18 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f32:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <MX_TIM12_Init+0x88>)
 8001f34:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f48:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f56:	4811      	ldr	r0, [pc, #68]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f58:	f009 fef2 	bl	800bd40 <HAL_TIM_PWM_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001f62:	f000 fd5f 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f66:	2360      	movs	r3, #96	; 0x60
 8001f68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4807      	ldr	r0, [pc, #28]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f7e:	f00a f855 	bl	800c02c <HAL_TIM_PWM_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001f88:	f000 fd4c 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <MX_TIM12_Init+0x84>)
 8001f8e:	f001 faa7 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8001f92:	bf00      	nop
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000ba0 	.word	0x20000ba0
 8001fa0:	40001800 	.word	0x40001800

08001fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <MX_USART1_UART_Init+0x5c>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fe8:	f00a fee8 	bl	800cdbc <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ff2:	f000 fd17 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000bec 	.word	0x20000bec
 8002000:	40011000 	.word	0x40011000

08002004 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_USART6_UART_Init+0x58>)
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <MX_USART6_UART_Init+0x5c>)
 800200c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002014:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_USART6_UART_Init+0x58>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_USART6_UART_Init+0x58>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <MX_USART6_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002042:	2200      	movs	r2, #0
 8002044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_USART6_UART_Init+0x58>)
 8002048:	f00a feb8 	bl	800cdbc <HAL_UART_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002052:	f000 fce7 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000c74 	.word	0x20000c74
 8002060:	40011400 	.word	0x40011400

08002064 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <MX_FMC_Init+0x98>)
 800207e:	4a20      	ldr	r2, [pc, #128]	; (8002100 <MX_FMC_Init+0x9c>)
 8002080:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <MX_FMC_Init+0x98>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <MX_FMC_Init+0x98>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <MX_FMC_Init+0x98>)
 8002090:	2204      	movs	r2, #4
 8002092:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <MX_FMC_Init+0x98>)
 8002096:	2210      	movs	r2, #16
 8002098:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <MX_FMC_Init+0x98>)
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <MX_FMC_Init+0x98>)
 80020a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80020a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <MX_FMC_Init+0x98>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <MX_FMC_Init+0x98>)
 80020b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <MX_FMC_Init+0x98>)
 80020b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <MX_FMC_Init+0x98>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80020c8:	2307      	movs	r3, #7
 80020ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80020cc:	2304      	movs	r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80020d0:	2307      	movs	r3, #7
 80020d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80020d4:	2303      	movs	r3, #3
 80020d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <MX_FMC_Init+0x98>)
 80020e6:	f009 fb9c 	bl	800b822 <HAL_SDRAM_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80020f0:	f000 fc98 	bl	8002a24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80020f4:	bf00      	nop
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000cfc 	.word	0x20000cfc
 8002100:	a0000140 	.word	0xa0000140

08002104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b090      	sub	sp, #64	; 0x40
 8002108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800211a:	4baf      	ldr	r3, [pc, #700]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4aae      	ldr	r2, [pc, #696]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002120:	f043 0310 	orr.w	r3, r3, #16
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4bac      	ldr	r3, [pc, #688]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002132:	4ba9      	ldr	r3, [pc, #676]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4aa8      	ldr	r2, [pc, #672]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4ba6      	ldr	r3, [pc, #664]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	4ba3      	ldr	r3, [pc, #652]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4aa2      	ldr	r2, [pc, #648]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4ba0      	ldr	r3, [pc, #640]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002162:	4b9d      	ldr	r3, [pc, #628]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a9c      	ldr	r2, [pc, #624]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b9a      	ldr	r3, [pc, #616]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	4b97      	ldr	r3, [pc, #604]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a96      	ldr	r2, [pc, #600]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b94      	ldr	r3, [pc, #592]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a90      	ldr	r2, [pc, #576]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b8e      	ldr	r3, [pc, #568]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021aa:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a8a      	ldr	r2, [pc, #552]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021c2:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a84      	ldr	r2, [pc, #528]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b82      	ldr	r3, [pc, #520]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021da:	4b7f      	ldr	r3, [pc, #508]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a7e      	ldr	r2, [pc, #504]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b7c      	ldr	r3, [pc, #496]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021f2:	4b79      	ldr	r3, [pc, #484]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a78      	ldr	r2, [pc, #480]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 80021f8:	f043 0320 	orr.w	r3, r3, #32
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800220a:	4b73      	ldr	r3, [pc, #460]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a72      	ldr	r2, [pc, #456]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b70      	ldr	r3, [pc, #448]	; (80023d8 <MX_GPIO_Init+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	2120      	movs	r1, #32
 8002226:	486d      	ldr	r0, [pc, #436]	; (80023dc <MX_GPIO_Init+0x2d8>)
 8002228:	f005 fb1a 	bl	8007860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	210c      	movs	r1, #12
 8002230:	486b      	ldr	r0, [pc, #428]	; (80023e0 <MX_GPIO_Init+0x2dc>)
 8002232:	f005 fb15 	bl	8007860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002236:	2201      	movs	r2, #1
 8002238:	2108      	movs	r1, #8
 800223a:	486a      	ldr	r0, [pc, #424]	; (80023e4 <MX_GPIO_Init+0x2e0>)
 800223c:	f005 fb10 	bl	8007860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002246:	4866      	ldr	r0, [pc, #408]	; (80023e0 <MX_GPIO_Init+0x2dc>)
 8002248:	f005 fb0a 	bl	8007860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800224c:	2200      	movs	r2, #0
 800224e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002252:	4865      	ldr	r0, [pc, #404]	; (80023e8 <MX_GPIO_Init+0x2e4>)
 8002254:	f005 fb04 	bl	8007860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002258:	2200      	movs	r2, #0
 800225a:	21c8      	movs	r1, #200	; 0xc8
 800225c:	4863      	ldr	r0, [pc, #396]	; (80023ec <MX_GPIO_Init+0x2e8>)
 800225e:	f005 faff 	bl	8007860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002262:	2308      	movs	r3, #8
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002266:	2300      	movs	r3, #0
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002272:	4619      	mov	r1, r3
 8002274:	485e      	ldr	r0, [pc, #376]	; (80023f0 <MX_GPIO_Init+0x2ec>)
 8002276:	f005 f92f 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800227a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800228c:	230a      	movs	r3, #10
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002294:	4619      	mov	r1, r3
 8002296:	4857      	ldr	r0, [pc, #348]	; (80023f4 <MX_GPIO_Init+0x2f0>)
 8002298:	f005 f91e 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800229c:	2360      	movs	r3, #96	; 0x60
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022ac:	230d      	movs	r3, #13
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b4:	4619      	mov	r1, r3
 80022b6:	484e      	ldr	r0, [pc, #312]	; (80023f0 <MX_GPIO_Init+0x2ec>)
 80022b8:	f005 f90e 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80022bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c2:	2300      	movs	r3, #0
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ce:	4619      	mov	r1, r3
 80022d0:	4849      	ldr	r0, [pc, #292]	; (80023f8 <MX_GPIO_Init+0x2f4>)
 80022d2:	f005 f901 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e8:	4619      	mov	r1, r3
 80022ea:	483c      	ldr	r0, [pc, #240]	; (80023dc <MX_GPIO_Init+0x2d8>)
 80022ec:	f005 f8f4 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80022f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002302:	230a      	movs	r3, #10
 8002304:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230a:	4619      	mov	r1, r3
 800230c:	483b      	ldr	r0, [pc, #236]	; (80023fc <MX_GPIO_Init+0x2f8>)
 800230e:	f005 f8e3 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002312:	2320      	movs	r3, #32
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	2301      	movs	r3, #1
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002326:	4619      	mov	r1, r3
 8002328:	482c      	ldr	r0, [pc, #176]	; (80023dc <MX_GPIO_Init+0x2d8>)
 800232a:	f005 f8d5 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800232e:	2308      	movs	r3, #8
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800233e:	230d      	movs	r3, #13
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002346:	4619      	mov	r1, r3
 8002348:	4824      	ldr	r0, [pc, #144]	; (80023dc <MX_GPIO_Init+0x2d8>)
 800234a:	f005 f8c5 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800234e:	f241 030c 	movw	r3, #4108	; 0x100c
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002364:	4619      	mov	r1, r3
 8002366:	481e      	ldr	r0, [pc, #120]	; (80023e0 <MX_GPIO_Init+0x2dc>)
 8002368:	f005 f8b6 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800236c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002372:	2300      	movs	r3, #0
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237e:	4619      	mov	r1, r3
 8002380:	481f      	ldr	r0, [pc, #124]	; (8002400 <MX_GPIO_Init+0x2fc>)
 8002382:	f005 f8a9 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002386:	2308      	movs	r3, #8
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238a:	2301      	movs	r3, #1
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239a:	4619      	mov	r1, r3
 800239c:	4811      	ldr	r0, [pc, #68]	; (80023e4 <MX_GPIO_Init+0x2e0>)
 800239e:	f005 f89b 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80023a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023b4:	230d      	movs	r3, #13
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023bc:	4619      	mov	r1, r3
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <MX_GPIO_Init+0x2e8>)
 80023c0:	f005 f88a 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80023c4:	2310      	movs	r3, #16
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d4:	4619      	mov	r1, r3
 80023d6:	e015      	b.n	8002404 <MX_GPIO_Init+0x300>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40022800 	.word	0x40022800
 80023e8:	40021c00 	.word	0x40021c00
 80023ec:	40021800 	.word	0x40021800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40022400 	.word	0x40022400
 80023fc:	40020000 	.word	0x40020000
 8002400:	40020800 	.word	0x40020800
 8002404:	4858      	ldr	r0, [pc, #352]	; (8002568 <MX_GPIO_Init+0x464>)
 8002406:	f005 f867 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800240a:	f248 0304 	movw	r3, #32772	; 0x8004
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241c:	4619      	mov	r1, r3
 800241e:	4853      	ldr	r0, [pc, #332]	; (800256c <MX_GPIO_Init+0x468>)
 8002420:	f005 f85a 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242a:	2301      	movs	r3, #1
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	484b      	ldr	r0, [pc, #300]	; (800256c <MX_GPIO_Init+0x468>)
 800243e:	f005 f84b 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002442:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002454:	230d      	movs	r3, #13
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245c:	4619      	mov	r1, r3
 800245e:	4843      	ldr	r0, [pc, #268]	; (800256c <MX_GPIO_Init+0x468>)
 8002460:	f005 f83a 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800246a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002478:	4619      	mov	r1, r3
 800247a:	483d      	ldr	r0, [pc, #244]	; (8002570 <MX_GPIO_Init+0x46c>)
 800247c:	f005 f82c 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002486:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002494:	4619      	mov	r1, r3
 8002496:	4836      	ldr	r0, [pc, #216]	; (8002570 <MX_GPIO_Init+0x46c>)
 8002498:	f005 f81e 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800249c:	2310      	movs	r3, #16
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024ac:	230a      	movs	r3, #10
 80024ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b4:	4619      	mov	r1, r3
 80024b6:	482d      	ldr	r0, [pc, #180]	; (800256c <MX_GPIO_Init+0x468>)
 80024b8:	f005 f80e 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80024bc:	23c8      	movs	r3, #200	; 0xc8
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c0:	2301      	movs	r3, #1
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d0:	4619      	mov	r1, r3
 80024d2:	4828      	ldr	r0, [pc, #160]	; (8002574 <MX_GPIO_Init+0x470>)
 80024d4:	f005 f800 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80024d8:	2305      	movs	r3, #5
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024e8:	230a      	movs	r3, #10
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4821      	ldr	r0, [pc, #132]	; (8002578 <MX_GPIO_Init+0x474>)
 80024f4:	f004 fff0 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80024f8:	2304      	movs	r3, #4
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002508:	4619      	mov	r1, r3
 800250a:	481a      	ldr	r0, [pc, #104]	; (8002574 <MX_GPIO_Init+0x470>)
 800250c:	f004 ffe4 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002510:	2350      	movs	r3, #80	; 0x50
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002520:	230d      	movs	r3, #13
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002528:	4619      	mov	r1, r3
 800252a:	4814      	ldr	r0, [pc, #80]	; (800257c <MX_GPIO_Init+0x478>)
 800252c:	f004 ffd4 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002530:	2328      	movs	r3, #40	; 0x28
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002540:	230a      	movs	r3, #10
 8002542:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002548:	4619      	mov	r1, r3
 800254a:	480c      	ldr	r0, [pc, #48]	; (800257c <MX_GPIO_Init+0x478>)
 800254c:	f004 ffc4 	bl	80074d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2105      	movs	r1, #5
 8002554:	2028      	movs	r0, #40	; 0x28
 8002556:	f003 fe7f 	bl	8006258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800255a:	2028      	movs	r0, #40	; 0x28
 800255c:	f003 fe98 	bl	8006290 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002560:	bf00      	nop
 8002562:	3740      	adds	r7, #64	; 0x40
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021c00 	.word	0x40021c00
 8002570:	40022000 	.word	0x40022000
 8002574:	40021800 	.word	0x40021800
 8002578:	40020800 	.word	0x40020800
 800257c:	40020000 	.word	0x40020000

08002580 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8002580:	b598      	push	{r3, r4, r7, lr}
 8002582:	af00      	add	r7, sp, #0

  /* Initialize the LCD */
  BSP_LCD_Init();
 8002584:	f002 fc24 	bl	8004dd0 <BSP_LCD_Init>

  /* LCD Initialization */
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8002588:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800258c:	2000      	movs	r0, #0
 800258e:	f002 fcb7 	bl	8004f00 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
 8002592:	f002 fc8d 	bl	8004eb0 <BSP_LCD_GetXSize>
 8002596:	4604      	mov	r4, r0
 8002598:	f002 fc9e 	bl	8004ed8 <BSP_LCD_GetYSize>
 800259c:	4603      	mov	r3, r0
 800259e:	fb04 f303 	mul.w	r3, r4, r3
 80025a2:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4619      	mov	r1, r3
 80025aa:	2001      	movs	r0, #1
 80025ac:	f002 fca8 	bl	8004f00 <BSP_LCD_LayerDefaultInit>

  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 80025b0:	f002 fede 	bl	8005370 <BSP_LCD_DisplayOn>

  /* Select the LCD Layer 0 */
  BSP_LCD_SelectLayer(0);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f002 fd05 	bl	8004fc4 <BSP_LCD_SelectLayer>
	BSP_LCD_SetBackColor( LCD_COLOR_BLACK);
 80025ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025be:	f002 fd67 	bl	8005090 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor( LCD_COLOR_WHITE);
 80025c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c6:	f002 fd4b 	bl	8005060 <BSP_LCD_SetTextColor>
  /* Clear the Background Layer */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80025ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025ce:	f002 fd93 	bl	80050f8 <BSP_LCD_Clear>

  /* Select the LCD Layer 1 */
  BSP_LCD_SelectLayer(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f002 fcf6 	bl	8004fc4 <BSP_LCD_SelectLayer>
	BSP_LCD_SetBackColor( LCD_COLOR_BLACK);
 80025d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025dc:	f002 fd58 	bl	8005090 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor( LCD_COLOR_WHITE);
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e4:	f002 fd3c 	bl	8005060 <BSP_LCD_SetTextColor>
  /* Clear the Foreground Layer */
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80025e8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025ec:	f002 fd84 	bl	80050f8 <BSP_LCD_Clear>

	/* default on LCD Layer 1 */
	BSP_LCD_SelectLayer(!LCD_ActiveLayer);
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <LCD_Config+0xac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fce0 	bl	8004fc4 <BSP_LCD_SelectLayer>
	BSP_LCD_SetLayerVisible( !LCD_ActiveLayer, ENABLE);
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <LCD_Config+0xac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f002 fce5 	bl	8004fe4 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible( LCD_ActiveLayer, DISABLE);
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <LCD_Config+0xac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f002 fcdf 	bl	8004fe4 <BSP_LCD_SetLayerVisible>

}
 8002626:	bf00      	nop
 8002628:	bd98      	pop	{r3, r4, r7, pc}
 800262a:	bf00      	nop
 800262c:	20000000 	.word	0x20000000

08002630 <draw_stl>:
	for(size_t i=0;i<object->edge_len; i++){
		BSP_LCD_DrawLine(object->points[object->edges[i].i].x,object->points[object->edges[i].i].y, object->points[object->edges[i].j].x, object->points[object->edges[i].j].y);
	}
}

void draw_stl(stl_obj2d* object,uint8_t mode){
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af02      	add	r7, sp, #8
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
	uint32_t min_luminosity = adjust_luminosity(LCD_COLOR_WHITE, 0.1);
 800263c:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002890 <draw_stl+0x260>
 8002640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002644:	f002 fa70 	bl	8004b28 <adjust_luminosity>
 8002648:	60f8      	str	r0, [r7, #12]
	if(mode == 0){
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d16c      	bne.n	800272a <draw_stl+0xfa>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002654:	f002 fd04 	bl	8005060 <BSP_LCD_SetTextColor>
		for(uint32_t i = 0; i < object->noTriangles; i++){
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e05f      	b.n	800271e <draw_stl+0xee>
			BSP_LCD_DrawLine(object->faces[i].p1->x, object->faces[i].p1->y, object->faces[i].p2->x, object->faces[i].p2->y);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	8818      	ldrh	r0, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	4413      	add	r3, r2
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	8859      	ldrh	r1, [r3, #2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	881c      	ldrh	r4, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	885b      	ldrh	r3, [r3, #2]
 8002696:	4622      	mov	r2, r4
 8002698:	f002 fd56 	bl	8005148 <BSP_LCD_DrawLine>
			BSP_LCD_DrawLine(object->faces[i].p2->x, object->faces[i].p2->y, object->faces[i].p3->x, object->faces[i].p3->y);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	8818      	ldrh	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4413      	add	r3, r2
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	8859      	ldrh	r1, [r3, #2]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	4413      	add	r3, r2
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	881c      	ldrh	r4, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4413      	add	r3, r2
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	885b      	ldrh	r3, [r3, #2]
 80026d4:	4622      	mov	r2, r4
 80026d6:	f002 fd37 	bl	8005148 <BSP_LCD_DrawLine>
			BSP_LCD_DrawLine(object->faces[i].p3->x, object->faces[i].p3->y, object->faces[i].p1->x, object->faces[i].p1->y);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4413      	add	r3, r2
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	8818      	ldrh	r0, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4413      	add	r3, r2
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	8859      	ldrh	r1, [r3, #2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	4413      	add	r3, r2
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	881c      	ldrh	r4, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	885b      	ldrh	r3, [r3, #2]
 8002712:	4622      	mov	r2, r4
 8002714:	f002 fd18 	bl	8005148 <BSP_LCD_DrawLine>
		for(uint32_t i = 0; i < object->noTriangles; i++){
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	429a      	cmp	r2, r3
 8002726:	d39a      	bcc.n	800265e <draw_stl+0x2e>
			FillTriangle(object->faces[i].p1->x,object->faces[i].p2->x,object->faces[i].p3->x,object->faces[i].p1->y,object->faces[i].p2->y,object->faces[i].p3->y);

			}
		}
	}
}
 8002728:	e0a9      	b.n	800287e <draw_stl+0x24e>
		for(uint32_t i = 0; i < object->noTriangles; i++){
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	e0a0      	b.n	8002872 <draw_stl+0x242>
			if(0>dot_product(camera,*(object->faces[i].normal_v))){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	4413      	add	r3, r2
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	ed93 5a00 	vldr	s10, [r3]
 8002740:	edd3 5a01 	vldr	s11, [r3, #4]
 8002744:	ed93 6a02 	vldr	s12, [r3, #8]
 8002748:	4b52      	ldr	r3, [pc, #328]	; (8002894 <draw_stl+0x264>)
 800274a:	edd3 6a00 	vldr	s13, [r3]
 800274e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002752:	edd3 7a02 	vldr	s15, [r3, #8]
 8002756:	eef0 1a45 	vmov.f32	s3, s10
 800275a:	eeb0 2a65 	vmov.f32	s4, s11
 800275e:	eef0 2a46 	vmov.f32	s5, s12
 8002762:	eeb0 0a66 	vmov.f32	s0, s13
 8002766:	eef0 0a47 	vmov.f32	s1, s14
 800276a:	eeb0 1a67 	vmov.f32	s2, s15
 800276e:	f001 fdfe 	bl	800436e <dot_product>
 8002772:	eef0 7a40 	vmov.f32	s15, s0
 8002776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	d575      	bpl.n	800286c <draw_stl+0x23c>
			luminosity= -dot_product(light, *(object->faces[i].normal_v));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	4413      	add	r3, r2
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	ed93 5a00 	vldr	s10, [r3]
 8002790:	edd3 5a01 	vldr	s11, [r3, #4]
 8002794:	ed93 6a02 	vldr	s12, [r3, #8]
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <draw_stl+0x268>)
 800279a:	edd3 6a00 	vldr	s13, [r3]
 800279e:	ed93 7a01 	vldr	s14, [r3, #4]
 80027a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a6:	eef0 1a45 	vmov.f32	s3, s10
 80027aa:	eeb0 2a65 	vmov.f32	s4, s11
 80027ae:	eef0 2a46 	vmov.f32	s5, s12
 80027b2:	eeb0 0a66 	vmov.f32	s0, s13
 80027b6:	eef0 0a47 	vmov.f32	s1, s14
 80027ba:	eeb0 1a67 	vmov.f32	s2, s15
 80027be:	f001 fdd6 	bl	800436e <dot_product>
 80027c2:	eef0 7a40 	vmov.f32	s15, s0
 80027c6:	eef1 7a67 	vneg.f32	s15, s15
 80027ca:	edc7 7a02 	vstr	s15, [r7, #8]
			if(luminosity<0.1){
 80027ce:	68b8      	ldr	r0, [r7, #8]
 80027d0:	f7fd fe82 	bl	80004d8 <__aeabi_f2d>
 80027d4:	a32c      	add	r3, pc, #176	; (adr r3, 8002888 <draw_stl+0x258>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f7fe f947 	bl	8000a6c <__aeabi_dcmplt>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <draw_stl+0x1bc>
				BSP_LCD_SetTextColor(min_luminosity);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f002 fc3b 	bl	8005060 <BSP_LCD_SetTextColor>
 80027ea:	e009      	b.n	8002800 <draw_stl+0x1d0>
				BSP_LCD_SetTextColor(adjust_luminosity(LCD_COLOR_WHITE, luminosity));
 80027ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f4:	f002 f998 	bl	8004b28 <adjust_luminosity>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fc30 	bl	8005060 <BSP_LCD_SetTextColor>
			FillTriangle(object->faces[i].p1->x,object->faces[i].p2->x,object->faces[i].p3->x,object->faces[i].p1->y,object->faces[i].p2->y,object->faces[i].p3->y);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4413      	add	r3, r2
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	461c      	mov	r4, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	4413      	add	r3, r2
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	461d      	mov	r5, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	4413      	add	r3, r2
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	885b      	ldrh	r3, [r3, #2]
 800283e:	461e      	mov	r6, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	4413      	add	r3, r2
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	885b      	ldrh	r3, [r3, #2]
 800284e:	4619      	mov	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4413      	add	r3, r2
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	885b      	ldrh	r3, [r3, #2]
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	9100      	str	r1, [sp, #0]
 8002862:	4633      	mov	r3, r6
 8002864:	462a      	mov	r2, r5
 8002866:	4621      	mov	r1, r4
 8002868:	f002 fe96 	bl	8005598 <FillTriangle>
		for(uint32_t i = 0; i < object->noTriangles; i++){
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	3301      	adds	r3, #1
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	429a      	cmp	r2, r3
 800287a:	f4ff af59 	bcc.w	8002730 <draw_stl+0x100>
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002886:	bf00      	nop
 8002888:	9999999a 	.word	0x9999999a
 800288c:	3fb99999 	.word	0x3fb99999
 8002890:	3dcccccd 	.word	0x3dcccccd
 8002894:	20000004 	.word	0x20000004
 8002898:	20000010 	.word	0x20000010

0800289c <FBSwitch>:

void FBSwitch(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));			// ****************
 80028a0:	bf00      	nop
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <FBSwitch+0x94>)
 80028a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f9      	beq.n	80028a2 <FBSwitch+0x6>
	BSP_LCD_SetLayerVisible( !LCD_ActiveLayer, DISABLE);
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <FBSwitch+0x98>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fb90 	bl	8004fe4 <BSP_LCD_SetLayerVisible>
	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));			// ****************
 80028c4:	bf00      	nop
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <FBSwitch+0x94>)
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f9      	beq.n	80028c6 <FBSwitch+0x2a>
	BSP_LCD_SetLayerVisible( LCD_ActiveLayer, ENABLE);
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <FBSwitch+0x98>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f002 fb83 	bl	8004fe4 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(!LCD_ActiveLayer);
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <FBSwitch+0x98>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf0c      	ite	eq
 80028e6:	2301      	moveq	r3, #1
 80028e8:	2300      	movne	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f002 fb69 	bl	8004fc4 <BSP_LCD_SelectLayer>
	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));
 80028f2:	bf00      	nop
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <FBSwitch+0x94>)
 80028f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f9      	beq.n	80028f4 <FBSwitch+0x58>
	BSP_LCD_SetLayerVisible( !LCD_ActiveLayer, DISABLE);
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <FBSwitch+0x98>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f002 fb67 	bl	8004fe4 <BSP_LCD_SetLayerVisible>

	LCD_ActiveLayer = !LCD_ActiveLayer;
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <FBSwitch+0x98>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4b03      	ldr	r3, [pc, #12]	; (8002934 <FBSwitch+0x98>)
 8002928:	601a      	str	r2, [r3, #0]

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40016800 	.word	0x40016800
 8002934:	20000000 	.word	0x20000000

08002938 <renderer>:



void renderer(void const * argument){
 8002938:	b580      	push	{r7, lr}
 800293a:	ed2d 8b02 	vpush	{d8}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	LCD_Config();
 8002944:	f7ff fe1c 	bl	8002580 <LCD_Config>



	stl_obj* kostka = create_icosahedron();
 8002948:	f001 feb8 	bl	80046bc <create_icosahedron>
 800294c:	6138      	str	r0, [r7, #16]
	for(uint32_t i = 0; i<kostka->noTriangles; i++){
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e013      	b.n	800297c <renderer+0x44>
		calculate_normal(&kostka->faces[i]);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	4413      	add	r3, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fdc6 	bl	80044f0 <calculate_normal>
		normalize_vector(kostka->faces[i].normal_v);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 f9ef 	bl	8004d54 <normalize_vector>
	for(uint32_t i = 0; i<kostka->noTriangles; i++){
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3301      	adds	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	429a      	cmp	r2, r3
 8002984:	d3e6      	bcc.n	8002954 <renderer+0x1c>
	}

	stl_obj2d* k2d = allocStlProjection(kostka);
 8002986:	6938      	ldr	r0, [r7, #16]
 8002988:	f001 fbf5 	bl	8004176 <allocStlProjection>
 800298c:	60f8      	str	r0, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800298e:	b672      	cpsid	i
}
 8002990:	bf00      	nop

	while(1){


		__disable_irq();
		rotate_stl_obj(kostka, deg2rad(1), deg2rad(1), deg2rad(1));
 8002992:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002996:	f001 f98b 	bl	8003cb0 <deg2rad>
 800299a:	eeb0 8a40 	vmov.f32	s16, s0
 800299e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80029a2:	f001 f985 	bl	8003cb0 <deg2rad>
 80029a6:	eef0 8a40 	vmov.f32	s17, s0
 80029aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80029ae:	f001 f97f 	bl	8003cb0 <deg2rad>
 80029b2:	eef0 7a40 	vmov.f32	s15, s0
 80029b6:	eeb0 1a67 	vmov.f32	s2, s15
 80029ba:	eef0 0a68 	vmov.f32	s1, s17
 80029be:	eeb0 0a48 	vmov.f32	s0, s16
 80029c2:	6938      	ldr	r0, [r7, #16]
 80029c4:	f001 fc34 	bl	8004230 <rotate_stl_obj>


		render_stl_object(kostka, k2d);
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	6938      	ldr	r0, [r7, #16]
 80029cc:	f001 fd07 	bl	80043de <render_stl_object>


		  painterAlgorithm(kostka, k2d);
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	6938      	ldr	r0, [r7, #16]
 80029d4:	f002 f942 	bl	8004c5c <painterAlgorithm>
		  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80029d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80029dc:	f002 fb8c 	bl	80050f8 <BSP_LCD_Clear>
		  draw_stl(k2d,MeshRendering);
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <renderer+0xc4>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4619      	mov	r1, r3
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff fe22 	bl	8002630 <draw_stl>
  __ASM volatile ("cpsie i" : : : "memory");
 80029ec:	b662      	cpsie	i
}
 80029ee:	bf00      	nop
		__enable_irq();

		FBSwitch();
 80029f0:	f7ff ff54 	bl	800289c <FBSwitch>

		osDelay(1);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f00c f821 	bl	800ea3c <osDelay>
		__disable_irq();
 80029fa:	e7c8      	b.n	800298e <renderer+0x56>
 80029fc:	20000d3d 	.word	0x20000d3d

08002a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a12:	f003 f891 	bl	8005b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40001000 	.word	0x40001000

08002a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
}
 8002a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <Error_Handler+0x8>
	...

08002a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	210f      	movs	r1, #15
 8002a6a:	f06f 0001 	mvn.w	r0, #1
 8002a6e:	f003 fbf3 	bl	8006258 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_ADC_MspInit+0xa4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d13c      	bne.n	8002b1c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aac:	6453      	str	r3, [r2, #68]	; 0x44
 8002aae:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002ac0:	f043 0320 	orr.w	r3, r3, #32
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_ADC_MspInit+0xa8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002aea:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002aee:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af0:	2303      	movs	r3, #3
 8002af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4619      	mov	r1, r3
 8002afe:	480b      	ldr	r0, [pc, #44]	; (8002b2c <HAL_ADC_MspInit+0xac>)
 8002b00:	f004 fcea 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4619      	mov	r1, r3
 8002b16:	4806      	ldr	r0, [pc, #24]	; (8002b30 <HAL_ADC_MspInit+0xb0>)
 8002b18:	f004 fcde 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002b1c:	bf00      	nop
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40012200 	.word	0x40012200
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40021400 	.word	0x40021400
 8002b30:	40020000 	.word	0x40020000

08002b34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_CRC_MspInit+0x38>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10b      	bne.n	8002b5e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_CRC_MspInit+0x3c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <HAL_CRC_MspInit+0x3c>)
 8002b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_CRC_MspInit+0x3c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023000 	.word	0x40023000
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_DMA2D_MspInit+0x38>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10b      	bne.n	8002b9e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_DMA2D_MspInit+0x3c>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <HAL_DMA2D_MspInit+0x3c>)
 8002b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_DMA2D_MspInit+0x3c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	4002b000 	.word	0x4002b000
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08e      	sub	sp, #56	; 0x38
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_ETH_MspInit+0x11c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d178      	bne.n	8002cc8 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a3e      	ldr	r2, [pc, #248]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002bdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b3c      	ldr	r3, [pc, #240]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a38      	ldr	r2, [pc, #224]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002bf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a32      	ldr	r2, [pc, #200]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c36:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_ETH_MspInit+0x120>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002c66:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c78:	230b      	movs	r3, #11
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	4619      	mov	r1, r3
 8002c82:	4815      	ldr	r0, [pc, #84]	; (8002cd8 <HAL_ETH_MspInit+0x124>)
 8002c84:	f004 fc28 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c88:	2332      	movs	r3, #50	; 0x32
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c98:	230b      	movs	r3, #11
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480e      	ldr	r0, [pc, #56]	; (8002cdc <HAL_ETH_MspInit+0x128>)
 8002ca4:	f004 fc18 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002ca8:	2386      	movs	r3, #134	; 0x86
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cb8:	230b      	movs	r3, #11
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <HAL_ETH_MspInit+0x12c>)
 8002cc4:	f004 fc08 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002cc8:	bf00      	nop
 8002cca:	3738      	adds	r7, #56	; 0x38
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40028000 	.word	0x40028000
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40021800 	.word	0x40021800
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	40020000 	.word	0x40020000

08002ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0ac      	sub	sp, #176	; 0xb0
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cfc:	f107 0318 	add.w	r3, r7, #24
 8002d00:	2284      	movs	r2, #132	; 0x84
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00e fb73 	bl	80113f0 <memset>
  if(hi2c->Instance==I2C1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a44      	ldr	r2, [pc, #272]	; (8002e20 <HAL_I2C_MspInit+0x13c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d13d      	bne.n	8002d90 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1e:	f107 0318 	add.w	r3, r7, #24
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 ff96 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002d2e:	f7ff fe79 	bl	8002a24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d52:	2312      	movs	r3, #18
 8002d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d64:	2304      	movs	r3, #4
 8002d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	482d      	ldr	r0, [pc, #180]	; (8002e28 <HAL_I2C_MspInit+0x144>)
 8002d72:	f004 fbb1 	bl	80074d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d76:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d8e:	e042      	b.n	8002e16 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <HAL_I2C_MspInit+0x148>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d13d      	bne.n	8002e16 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002da6:	f107 0318 	add.w	r3, r7, #24
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 ff52 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002db6:	f7ff fe35 	bl	8002a24 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002dd2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dda:	2312      	movs	r3, #18
 8002ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de6:	2303      	movs	r3, #3
 8002de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dec:	2304      	movs	r3, #4
 8002dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002df6:	4619      	mov	r1, r3
 8002df8:	480d      	ldr	r0, [pc, #52]	; (8002e30 <HAL_I2C_MspInit+0x14c>)
 8002dfa:	f004 fb6d 	bl	80074d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002e04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_I2C_MspInit+0x140>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
}
 8002e16:	bf00      	nop
 8002e18:	37b0      	adds	r7, #176	; 0xb0
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40005400 	.word	0x40005400
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	40005c00 	.word	0x40005c00
 8002e30:	40021c00 	.word	0x40021c00

08002e34 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08e      	sub	sp, #56	; 0x38
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a51      	ldr	r2, [pc, #324]	; (8002f98 <HAL_LTDC_MspInit+0x164>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	f040 809b 	bne.w	8002f8e <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e58:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	4a4f      	ldr	r2, [pc, #316]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e62:	6453      	str	r3, [r2, #68]	; 0x44
 8002e64:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e70:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	4a49      	ldr	r2, [pc, #292]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e76:	f043 0310 	orr.w	r3, r3, #16
 8002e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7c:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e88:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	4a43      	ldr	r2, [pc, #268]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e92:	6313      	str	r3, [r2, #48]	; 0x30
 8002e94:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ea0:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4a3d      	ldr	r2, [pc, #244]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	4a37      	ldr	r2, [pc, #220]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ed0:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a31      	ldr	r2, [pc, #196]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <HAL_LTDC_MspInit+0x168>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ee8:	2310      	movs	r3, #16
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ef8:	230e      	movs	r3, #14
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f00:	4619      	mov	r1, r3
 8002f02:	4827      	ldr	r0, [pc, #156]	; (8002fa0 <HAL_LTDC_MspInit+0x16c>)
 8002f04:	f004 fae8 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002f08:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f1a:	230e      	movs	r3, #14
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f22:	4619      	mov	r1, r3
 8002f24:	481f      	ldr	r0, [pc, #124]	; (8002fa4 <HAL_LTDC_MspInit+0x170>)
 8002f26:	f004 fad7 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002f2a:	23f7      	movs	r3, #247	; 0xf7
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f3a:	230e      	movs	r3, #14
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f42:	4619      	mov	r1, r3
 8002f44:	4818      	ldr	r0, [pc, #96]	; (8002fa8 <HAL_LTDC_MspInit+0x174>)
 8002f46:	f004 fac7 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f5c:	2309      	movs	r3, #9
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f64:	4619      	mov	r1, r3
 8002f66:	4811      	ldr	r0, [pc, #68]	; (8002fac <HAL_LTDC_MspInit+0x178>)
 8002f68:	f004 fab6 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002f6c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f7e:	230e      	movs	r3, #14
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f86:	4619      	mov	r1, r3
 8002f88:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <HAL_LTDC_MspInit+0x17c>)
 8002f8a:	f004 faa5 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f8e:	bf00      	nop
 8002f90:	3738      	adds	r7, #56	; 0x38
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40016800 	.word	0x40016800
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40022400 	.word	0x40022400
 8002fa8:	40022800 	.word	0x40022800
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a3b      	ldr	r2, [pc, #236]	; (80030c0 <HAL_QSPI_MspInit+0x10c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d170      	bne.n	80030b8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6393      	str	r3, [r2, #56]	; 0x38
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fee:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002ff4:	f043 0310 	orr.w	r3, r3, #16
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003006:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a2e      	ldr	r2, [pc, #184]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800301e:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003036:	2304      	movs	r3, #4
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003042:	2303      	movs	r3, #3
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003046:	2309      	movs	r3, #9
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800304a:	f107 031c 	add.w	r3, r7, #28
 800304e:	4619      	mov	r1, r3
 8003050:	481d      	ldr	r0, [pc, #116]	; (80030c8 <HAL_QSPI_MspInit+0x114>)
 8003052:	f004 fa41 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003066:	230a      	movs	r3, #10
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800306a:	f107 031c 	add.w	r3, r7, #28
 800306e:	4619      	mov	r1, r3
 8003070:	4816      	ldr	r0, [pc, #88]	; (80030cc <HAL_QSPI_MspInit+0x118>)
 8003072:	f004 fa31 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003076:	2304      	movs	r3, #4
 8003078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003082:	2303      	movs	r3, #3
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003086:	2309      	movs	r3, #9
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	4619      	mov	r1, r3
 8003090:	480e      	ldr	r0, [pc, #56]	; (80030cc <HAL_QSPI_MspInit+0x118>)
 8003092:	f004 fa21 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003096:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030a8:	2309      	movs	r3, #9
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ac:	f107 031c 	add.w	r3, r7, #28
 80030b0:	4619      	mov	r1, r3
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <HAL_QSPI_MspInit+0x11c>)
 80030b4:	f004 fa10 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80030b8:	bf00      	nop
 80030ba:	3730      	adds	r7, #48	; 0x30
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	a0001000 	.word	0xa0001000
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	40020c00 	.word	0x40020c00

080030d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b0a4      	sub	sp, #144	; 0x90
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	2284      	movs	r2, #132	; 0x84
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f00e f983 	bl	80113f0 <memset>
  if(hrtc->Instance==RTC)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a0e      	ldr	r2, [pc, #56]	; (8003128 <HAL_RTC_MspInit+0x54>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d114      	bne.n	800311e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030f4:	2320      	movs	r3, #32
 80030f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	4618      	mov	r0, r3
 8003104:	f005 fda6 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800310e:	f7ff fc89 	bl	8002a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RTC_MspInit+0x58>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <HAL_RTC_MspInit+0x58>)
 8003118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800311e:	bf00      	nop
 8003120:	3790      	adds	r7, #144	; 0x90
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40002800 	.word	0x40002800
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <HAL_SD_MspInit+0xc4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d14c      	bne.n	80031ec <HAL_SD_MspInit+0xbc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003152:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 8003158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a22      	ldr	r2, [pc, #136]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003182:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <HAL_SD_MspInit+0xc8>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800319a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800319e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a0:	2302      	movs	r3, #2
 80031a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a8:	2303      	movs	r3, #3
 80031aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80031ac:	230c      	movs	r3, #12
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	4619      	mov	r1, r3
 80031b6:	4811      	ldr	r0, [pc, #68]	; (80031fc <HAL_SD_MspInit+0xcc>)
 80031b8:	f004 f98e 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80031bc:	2304      	movs	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	2303      	movs	r3, #3
 80031ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80031cc:	230c      	movs	r3, #12
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4619      	mov	r1, r3
 80031d6:	480a      	ldr	r0, [pc, #40]	; (8003200 <HAL_SD_MspInit+0xd0>)
 80031d8:	f004 f97e 	bl	80074d8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80031dc:	2200      	movs	r2, #0
 80031de:	2105      	movs	r1, #5
 80031e0:	2031      	movs	r0, #49	; 0x31
 80031e2:	f003 f839 	bl	8006258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80031e6:	2031      	movs	r0, #49	; 0x31
 80031e8:	f003 f852 	bl	8006290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80031ec:	bf00      	nop
 80031ee:	3728      	adds	r7, #40	; 0x28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020800 	.word	0x40020800
 8003200:	40020c00 	.word	0x40020c00

08003204 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b0aa      	sub	sp, #168	; 0xa8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	2284      	movs	r2, #132	; 0x84
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f00e f8e3 	bl	80113f0 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003232:	d143      	bne.n	80032bc <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003238:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800323a:	2364      	movs	r3, #100	; 0x64
 800323c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800323e:	2302      	movs	r3, #2
 8003240:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003242:	2302      	movs	r3, #2
 8003244:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003246:	2302      	movs	r3, #2
 8003248:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800324e:	f107 0310 	add.w	r3, r7, #16
 8003252:	4618      	mov	r0, r3
 8003254:	f005 fcfe 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800325e:	f7ff fbe1 	bl	8002a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_SPDIFRX_MspInit+0xc0>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003280:	f043 0308 	orr.w	r3, r3, #8
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80032aa:	2308      	movs	r3, #8
 80032ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80032b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032b4:	4619      	mov	r1, r3
 80032b6:	4804      	ldr	r0, [pc, #16]	; (80032c8 <HAL_SPDIFRX_MspInit+0xc4>)
 80032b8:	f004 f90e 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80032bc:	bf00      	nop
 80032be:	37a8      	adds	r7, #168	; 0xa8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020c00 	.word	0x40020c00

080032cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <HAL_SPI_MspInit+0xb4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d144      	bne.n	8003378 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032ee:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003306:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a18      	ldr	r2, [pc, #96]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_SPI_MspInit+0xb8>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003336:	2302      	movs	r3, #2
 8003338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003346:	2305      	movs	r3, #5
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	480d      	ldr	r0, [pc, #52]	; (8003388 <HAL_SPI_MspInit+0xbc>)
 8003352:	f004 f8c1 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003356:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800335a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003368:	2305      	movs	r3, #5
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4619      	mov	r1, r3
 8003372:	4806      	ldr	r0, [pc, #24]	; (800338c <HAL_SPI_MspInit+0xc0>)
 8003374:	f004 f8b0 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003378:	bf00      	nop
 800337a:	3728      	adds	r7, #40	; 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40003800 	.word	0x40003800
 8003384:	40023800 	.word	0x40023800
 8003388:	40022000 	.word	0x40022000
 800338c:	40020400 	.word	0x40020400

08003390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a3a      	ldr	r2, [pc, #232]	; (8003488 <HAL_TIM_Base_MspInit+0xf8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10c      	bne.n	80033bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033a2:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a39      	ldr	r2, [pc, #228]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80033ba:	e060      	b.n	800347e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d10c      	bne.n	80033e0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033c6:	4b31      	ldr	r3, [pc, #196]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a30      	ldr	r2, [pc, #192]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	69bb      	ldr	r3, [r7, #24]
}
 80033de:	e04e      	b.n	800347e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <HAL_TIM_Base_MspInit+0x100>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10c      	bne.n	8003404 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a27      	ldr	r2, [pc, #156]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033f0:	f043 0302 	orr.w	r3, r3, #2
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]
}
 8003402:	e03c      	b.n	800347e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a22      	ldr	r2, [pc, #136]	; (8003494 <HAL_TIM_Base_MspInit+0x104>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d114      	bne.n	8003438 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2105      	movs	r1, #5
 800342a:	201e      	movs	r0, #30
 800342c:	f002 ff14 	bl	8006258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003430:	201e      	movs	r0, #30
 8003432:	f002 ff2d 	bl	8006290 <HAL_NVIC_EnableIRQ>
}
 8003436:	e022      	b.n	800347e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_TIM_Base_MspInit+0x108>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10c      	bne.n	800345c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a11      	ldr	r2, [pc, #68]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
}
 800345a:	e010      	b.n	800347e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM8)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_TIM_Base_MspInit+0x10c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10b      	bne.n	800347e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	6453      	str	r3, [r2, #68]	; 0x44
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_TIM_Base_MspInit+0xfc>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
}
 800347e:	bf00      	nop
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40023800 	.word	0x40023800
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40010400 	.word	0x40010400

080034a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <HAL_TIM_PWM_MspInit+0x38>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10b      	bne.n	80034ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_TIM_PWM_MspInit+0x3c>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_TIM_PWM_MspInit+0x3c>)
 80034b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034bc:	6413      	str	r3, [r2, #64]	; 0x40
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_TIM_PWM_MspInit+0x3c>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40001800 	.word	0x40001800
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	; 0x30
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a56      	ldr	r2, [pc, #344]	; (8003658 <HAL_TIM_MspPostInit+0x178>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d11d      	bne.n	800353e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003502:	4b56      	ldr	r3, [pc, #344]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a55      	ldr	r2, [pc, #340]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800351a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800351e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	2300      	movs	r3, #0
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800352c:	2301      	movs	r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003530:	f107 031c 	add.w	r3, r7, #28
 8003534:	4619      	mov	r1, r3
 8003536:	484a      	ldr	r0, [pc, #296]	; (8003660 <HAL_TIM_MspPostInit+0x180>)
 8003538:	f003 ffce 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800353c:	e087      	b.n	800364e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003546:	d11d      	bne.n	8003584 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	4b44      	ldr	r3, [pc, #272]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	4a43      	ldr	r2, [pc, #268]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6313      	str	r3, [r2, #48]	; 0x30
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	2300      	movs	r3, #0
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003572:	2301      	movs	r3, #1
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	4619      	mov	r1, r3
 800357c:	4838      	ldr	r0, [pc, #224]	; (8003660 <HAL_TIM_MspPostInit+0x180>)
 800357e:	f003 ffab 	bl	80074d8 <HAL_GPIO_Init>
}
 8003582:	e064      	b.n	800364e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a36      	ldr	r2, [pc, #216]	; (8003664 <HAL_TIM_MspPostInit+0x184>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d11c      	bne.n	80035c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	4b33      	ldr	r3, [pc, #204]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a32      	ldr	r2, [pc, #200]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b30      	ldr	r3, [pc, #192]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80035a6:	2310      	movs	r3, #16
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035b6:	2302      	movs	r3, #2
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f107 031c 	add.w	r3, r7, #28
 80035be:	4619      	mov	r1, r3
 80035c0:	4829      	ldr	r0, [pc, #164]	; (8003668 <HAL_TIM_MspPostInit+0x188>)
 80035c2:	f003 ff89 	bl	80074d8 <HAL_GPIO_Init>
}
 80035c6:	e042      	b.n	800364e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_TIM_MspPostInit+0x18c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d11c      	bne.n	800360c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a21      	ldr	r2, [pc, #132]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b1f      	ldr	r3, [pc, #124]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035fa:	2302      	movs	r3, #2
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f107 031c 	add.w	r3, r7, #28
 8003602:	4619      	mov	r1, r3
 8003604:	481a      	ldr	r0, [pc, #104]	; (8003670 <HAL_TIM_MspPostInit+0x190>)
 8003606:	f003 ff67 	bl	80074d8 <HAL_GPIO_Init>
}
 800360a:	e020      	b.n	800364e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_TIM_MspPostInit+0x194>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d11b      	bne.n	800364e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_TIM_MspPostInit+0x17c>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800362e:	2340      	movs	r3, #64	; 0x40
 8003630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800363e:	2309      	movs	r3, #9
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	4619      	mov	r1, r3
 8003648:	480b      	ldr	r0, [pc, #44]	; (8003678 <HAL_TIM_MspPostInit+0x198>)
 800364a:	f003 ff45 	bl	80074d8 <HAL_GPIO_Init>
}
 800364e:	bf00      	nop
 8003650:	3730      	adds	r7, #48	; 0x30
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000
 800365c:	40023800 	.word	0x40023800
 8003660:	40020000 	.word	0x40020000
 8003664:	40000400 	.word	0x40000400
 8003668:	40020400 	.word	0x40020400
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40022000 	.word	0x40022000
 8003674:	40001800 	.word	0x40001800
 8003678:	40021c00 	.word	0x40021c00

0800367c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b0ae      	sub	sp, #184	; 0xb8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003694:	f107 0320 	add.w	r3, r7, #32
 8003698:	2284      	movs	r2, #132	; 0x84
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f00d fea7 	bl	80113f0 <memset>
  if(huart->Instance==USART1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a53      	ldr	r2, [pc, #332]	; (80037f4 <HAL_UART_MspInit+0x178>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d15d      	bne.n	8003768 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80036ac:	2340      	movs	r3, #64	; 0x40
 80036ae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80036b0:	2301      	movs	r3, #1
 80036b2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036b4:	f107 0320 	add.w	r3, r7, #32
 80036b8:	4618      	mov	r0, r3
 80036ba:	f005 facb 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80036c4:	f7ff f9ae 	bl	8002a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036c8:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	4a4a      	ldr	r2, [pc, #296]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80036ce:	f043 0310 	orr.w	r3, r3, #16
 80036d2:	6453      	str	r3, [r2, #68]	; 0x44
 80036d4:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e0:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	4a44      	ldr	r2, [pc, #272]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	6313      	str	r3, [r2, #48]	; 0x30
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f8:	4b3f      	ldr	r3, [pc, #252]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	4a3e      	ldr	r2, [pc, #248]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6313      	str	r3, [r2, #48]	; 0x30
 8003704:	4b3c      	ldr	r3, [pc, #240]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003716:	2302      	movs	r3, #2
 8003718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003728:	2307      	movs	r3, #7
 800372a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800372e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003732:	4619      	mov	r1, r3
 8003734:	4831      	ldr	r0, [pc, #196]	; (80037fc <HAL_UART_MspInit+0x180>)
 8003736:	f003 fecf 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800373a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800373e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003754:	2307      	movs	r3, #7
 8003756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800375a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800375e:	4619      	mov	r1, r3
 8003760:	4827      	ldr	r0, [pc, #156]	; (8003800 <HAL_UART_MspInit+0x184>)
 8003762:	f003 feb9 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003766:	e041      	b.n	80037ec <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART6)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a25      	ldr	r2, [pc, #148]	; (8003804 <HAL_UART_MspInit+0x188>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d13c      	bne.n	80037ec <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003776:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_SYSCLK;
 8003778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800377c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800377e:	f107 0320 	add.w	r3, r7, #32
 8003782:	4618      	mov	r0, r3
 8003784:	f005 fa66 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_UART_MspInit+0x116>
      Error_Handler();
 800378e:	f7ff f949 	bl	8002a24 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003792:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 8003798:	f043 0320 	orr.w	r3, r3, #32
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_UART_MspInit+0x17c>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80037c2:	23c0      	movs	r3, #192	; 0xc0
 80037c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d4:	2303      	movs	r3, #3
 80037d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80037da:	2308      	movs	r3, #8
 80037dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4808      	ldr	r0, [pc, #32]	; (8003808 <HAL_UART_MspInit+0x18c>)
 80037e8:	f003 fe76 	bl	80074d8 <HAL_GPIO_Init>
}
 80037ec:	bf00      	nop
 80037ee:	37b8      	adds	r7, #184	; 0xb8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020400 	.word	0x40020400
 8003800:	40020000 	.word	0x40020000
 8003804:	40011400 	.word	0x40011400
 8003808:	40020800 	.word	0x40020800

0800380c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003820:	4b3a      	ldr	r3, [pc, #232]	; (800390c <HAL_FMC_MspInit+0x100>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d16d      	bne.n	8003904 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003828:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_FMC_MspInit+0x100>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800382e:	4b38      	ldr	r3, [pc, #224]	; (8003910 <HAL_FMC_MspInit+0x104>)
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	4a37      	ldr	r2, [pc, #220]	; (8003910 <HAL_FMC_MspInit+0x104>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6393      	str	r3, [r2, #56]	; 0x38
 800383a:	4b35      	ldr	r3, [pc, #212]	; (8003910 <HAL_FMC_MspInit+0x104>)
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003846:	f64f 7383 	movw	r3, #65411	; 0xff83
 800384a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384c:	2302      	movs	r3, #2
 800384e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003854:	2303      	movs	r3, #3
 8003856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003858:	230c      	movs	r3, #12
 800385a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	4619      	mov	r1, r3
 8003860:	482c      	ldr	r0, [pc, #176]	; (8003914 <HAL_FMC_MspInit+0x108>)
 8003862:	f003 fe39 	bl	80074d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003866:	f248 1333 	movw	r3, #33075	; 0x8133
 800386a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003878:	230c      	movs	r3, #12
 800387a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4825      	ldr	r0, [pc, #148]	; (8003918 <HAL_FMC_MspInit+0x10c>)
 8003882:	f003 fe29 	bl	80074d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003886:	f24c 7303 	movw	r3, #50947	; 0xc703
 800388a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003898:	230c      	movs	r3, #12
 800389a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	481e      	ldr	r0, [pc, #120]	; (800391c <HAL_FMC_MspInit+0x110>)
 80038a2:	f003 fe19 	bl	80074d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80038a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038aa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ac:	2302      	movs	r3, #2
 80038ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b4:	2303      	movs	r3, #3
 80038b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038b8:	230c      	movs	r3, #12
 80038ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4817      	ldr	r0, [pc, #92]	; (8003920 <HAL_FMC_MspInit+0x114>)
 80038c2:	f003 fe09 	bl	80074d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80038c6:	2328      	movs	r3, #40	; 0x28
 80038c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ca:	2302      	movs	r3, #2
 80038cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d2:	2303      	movs	r3, #3
 80038d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038d6:	230c      	movs	r3, #12
 80038d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038da:	1d3b      	adds	r3, r7, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4811      	ldr	r0, [pc, #68]	; (8003924 <HAL_FMC_MspInit+0x118>)
 80038e0:	f003 fdfa 	bl	80074d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80038e4:	2308      	movs	r3, #8
 80038e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f0:	2303      	movs	r3, #3
 80038f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038f4:	230c      	movs	r3, #12
 80038f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	480a      	ldr	r0, [pc, #40]	; (8003928 <HAL_FMC_MspInit+0x11c>)
 80038fe:	f003 fdeb 	bl	80074d8 <HAL_GPIO_Init>
 8003902:	e000      	b.n	8003906 <HAL_FMC_MspInit+0xfa>
    return;
 8003904:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000d48 	.word	0x20000d48
 8003910:	40023800 	.word	0x40023800
 8003914:	40021000 	.word	0x40021000
 8003918:	40021800 	.word	0x40021800
 800391c:	40020c00 	.word	0x40020c00
 8003920:	40021400 	.word	0x40021400
 8003924:	40021c00 	.word	0x40021c00
 8003928:	40020800 	.word	0x40020800

0800392c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003934:	f7ff ff6a 	bl	800380c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <HAL_SAI_MspInit+0xbc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d124      	bne.n	800399c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_SAI_MspInit+0xc0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800395a:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_SAI_MspInit+0xc4>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <HAL_SAI_MspInit+0xc4>)
 8003960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003964:	6453      	str	r3, [r2, #68]	; 0x44
 8003966:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_SAI_MspInit+0xc4>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <HAL_SAI_MspInit+0xc0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_SAI_MspInit+0xc0>)
 800397a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800397c:	23f0      	movs	r3, #240	; 0xf0
 800397e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003980:	2302      	movs	r3, #2
 8003982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	2300      	movs	r3, #0
 800398a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800398c:	230a      	movs	r3, #10
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	4619      	mov	r1, r3
 8003996:	481c      	ldr	r0, [pc, #112]	; (8003a08 <HAL_SAI_MspInit+0xc8>)
 8003998:	f003 fd9e 	bl	80074d8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1a      	ldr	r2, [pc, #104]	; (8003a0c <HAL_SAI_MspInit+0xcc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d125      	bne.n	80039f2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80039a6:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <HAL_SAI_MspInit+0xc0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10b      	bne.n	80039c6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_SAI_MspInit+0xc4>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <HAL_SAI_MspInit+0xc4>)
 80039b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039b8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_SAI_MspInit+0xc4>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <HAL_SAI_MspInit+0xc0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <HAL_SAI_MspInit+0xc0>)
 80039ce:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80039d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80039e2:	230a      	movs	r3, #10
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4808      	ldr	r0, [pc, #32]	; (8003a10 <HAL_SAI_MspInit+0xd0>)
 80039ee:	f003 fd73 	bl	80074d8 <HAL_GPIO_Init>

    }
}
 80039f2:	bf00      	nop
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40015c04 	.word	0x40015c04
 8003a00:	20000d4c 	.word	0x20000d4c
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	40015c24 	.word	0x40015c24
 8003a10:	40021800 	.word	0x40021800

08003a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	; 0x38
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a24:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <HAL_InitTick+0xe0>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	4a32      	ldr	r2, [pc, #200]	; (8003af4 <HAL_InitTick+0xe0>)
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
 8003a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a30:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_InitTick+0xe0>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a3c:	f107 0210 	add.w	r2, r7, #16
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f005 f8d2 	bl	8008bf0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a56:	f005 f8a3 	bl	8008ba0 <HAL_RCC_GetPCLK1Freq>
 8003a5a:	6378      	str	r0, [r7, #52]	; 0x34
 8003a5c:	e004      	b.n	8003a68 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a5e:	f005 f89f 	bl	8008ba0 <HAL_RCC_GetPCLK1Freq>
 8003a62:	4603      	mov	r3, r0
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6a:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <HAL_InitTick+0xe4>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	0c9b      	lsrs	r3, r3, #18
 8003a72:	3b01      	subs	r3, #1
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_InitTick+0xe8>)
 8003a78:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <HAL_InitTick+0xec>)
 8003a7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a7c:	4b1f      	ldr	r3, [pc, #124]	; (8003afc <HAL_InitTick+0xe8>)
 8003a7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <HAL_InitTick+0xe8>)
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a8a:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <HAL_InitTick+0xe8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a90:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_InitTick+0xe8>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a96:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_InitTick+0xe8>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003a9c:	4817      	ldr	r0, [pc, #92]	; (8003afc <HAL_InitTick+0xe8>)
 8003a9e:	f008 f858 	bl	800bb52 <HAL_TIM_Base_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11b      	bne.n	8003ae8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003ab0:	4812      	ldr	r0, [pc, #72]	; (8003afc <HAL_InitTick+0xe8>)
 8003ab2:	f008 f8cd 	bl	800bc50 <HAL_TIM_Base_Start_IT>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d111      	bne.n	8003ae8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ac4:	2036      	movs	r0, #54	; 0x36
 8003ac6:	f002 fbe3 	bl	8006290 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b0f      	cmp	r3, #15
 8003ace:	d808      	bhi.n	8003ae2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	2036      	movs	r0, #54	; 0x36
 8003ad6:	f002 fbbf 	bl	8006258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <HAL_InitTick+0xf0>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	e002      	b.n	8003ae8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3738      	adds	r7, #56	; 0x38
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	431bde83 	.word	0x431bde83
 8003afc:	20000d50 	.word	0x20000d50
 8003b00:	40001000 	.word	0x40001000
 8003b04:	2000002c 	.word	0x2000002c

08003b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <NMI_Handler+0x4>

08003b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <HardFault_Handler+0x4>

08003b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <MemManage_Handler+0x4>

08003b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b1e:	e7fe      	b.n	8003b1e <BusFault_Handler+0x4>

08003b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <UsageFault_Handler+0x4>

08003b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	buttonFlag = 0;
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <TIM4_IRQHandler+0x20>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b3e:	4806      	ldr	r0, [pc, #24]	; (8003b58 <TIM4_IRQHandler+0x24>)
 8003b40:	f008 f955 	bl	800bdee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  HAL_TIM_Base_Stop(&htim4);
 8003b44:	4804      	ldr	r0, [pc, #16]	; (8003b58 <TIM4_IRQHandler+0x24>)
 8003b46:	f008 f85b 	bl	800bc00 <HAL_TIM_Base_Stop>
  TIM4->CNT = 0;
 8003b4a:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <TIM4_IRQHandler+0x28>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM4_IRQn 1 */
}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000d3c 	.word	0x20000d3c
 8003b58:	20000abc 	.word	0x20000abc
 8003b5c:	40000800 	.word	0x40000800

08003b60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(buttonFlag==0){
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <EXTI15_10_IRQHandler+0x38>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <EXTI15_10_IRQHandler+0x2c>
		HAL_TIM_Base_Start_IT(&htim4);
 8003b6c:	480b      	ldr	r0, [pc, #44]	; (8003b9c <EXTI15_10_IRQHandler+0x3c>)
 8003b6e:	f008 f86f 	bl	800bc50 <HAL_TIM_Base_Start_IT>
		buttonFlag = 1;
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <EXTI15_10_IRQHandler+0x38>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
		MeshRendering=!MeshRendering;
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <EXTI15_10_IRQHandler+0x40>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <EXTI15_10_IRQHandler+0x40>)
 8003b8a:	701a      	strb	r2, [r3, #0]


	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003b8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b90:	f003 fe80 	bl	8007894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000d3c 	.word	0x20000d3c
 8003b9c:	20000abc 	.word	0x20000abc
 8003ba0:	20000d3d 	.word	0x20000d3d

08003ba4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <SDMMC1_IRQHandler+0x10>)
 8003baa:	f006 fd8f 	bl	800a6cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200008a4 	.word	0x200008a4

08003bb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <TIM6_DAC_IRQHandler+0x10>)
 8003bbe:	f008 f916 	bl	800bdee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000d50 	.word	0x20000d50

08003bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <_sbrk+0x5c>)
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <_sbrk+0x60>)
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <_sbrk+0x64>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <_sbrk+0x64>)
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <_sbrk+0x68>)
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <_sbrk+0x64>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d207      	bcs.n	8003c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bfc:	f00d fc10 	bl	8011420 <__errno>
 8003c00:	4603      	mov	r3, r0
 8003c02:	220c      	movs	r2, #12
 8003c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c0a:	e009      	b.n	8003c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <_sbrk+0x64>)
 8003c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20050000 	.word	0x20050000
 8003c2c:	00000400 	.word	0x00000400
 8003c30:	20000d9c 	.word	0x20000d9c
 8003c34:	20009298 	.word	0x20009298

08003c38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <SystemInit+0x20>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <SystemInit+0x20>)
 8003c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c60:	480d      	ldr	r0, [pc, #52]	; (8003c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c62:	490e      	ldr	r1, [pc, #56]	; (8003c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c64:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c68:	e002      	b.n	8003c70 <LoopCopyDataInit>

08003c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c6e:	3304      	adds	r3, #4

08003c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c74:	d3f9      	bcc.n	8003c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c76:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c78:	4c0b      	ldr	r4, [pc, #44]	; (8003ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c7c:	e001      	b.n	8003c82 <LoopFillZerobss>

08003c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c80:	3204      	adds	r2, #4

08003c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c84:	d3fb      	bcc.n	8003c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c86:	f7ff ffd7 	bl	8003c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c8a:	f00d fbcf 	bl	801142c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c8e:	f7fd f955 	bl	8000f3c <main>
  bx  lr    
 8003c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c9c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003ca0:	08014698 	.word	0x08014698
  ldr r2, =_sbss
 8003ca4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003ca8:	20009298 	.word	0x20009298

08003cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cac:	e7fe      	b.n	8003cac <ADC_IRQHandler>
	...

08003cb0 <deg2rad>:


#include "3d_engine.h"


float deg2rad(float x){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	ed87 0a01 	vstr	s0, [r7, #4]
	return x*(M_PI/180.0);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fc fc0c 	bl	80004d8 <__aeabi_f2d>
 8003cc0:	a309      	add	r3, pc, #36	; (adr r3, 8003ce8 <deg2rad+0x38>)
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	f7fc fc5f 	bl	8000588 <__aeabi_dmul>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f7fc ff31 	bl	8000b38 <__aeabi_d2f>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	ee07 3a90 	vmov	s15, r3
}
 8003cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	a2529d39 	.word	0xa2529d39
 8003cec:	3f91df46 	.word	0x3f91df46

08003cf0 <rotate_x>:
    }
    return NULL;
}


void rotate_x(point3d_t* point, float angle){
 8003cf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	ed87 0a00 	vstr	s0, [r7]
    float y = point->y;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	60fb      	str	r3, [r7, #12]
    float z = point->z;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60bb      	str	r3, [r7, #8]
	point->x = point->x;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
	point->y = y * cos(angle) - z * sin(angle);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7fc fbe0 	bl	80004d8 <__aeabi_f2d>
 8003d18:	4604      	mov	r4, r0
 8003d1a:	460d      	mov	r5, r1
 8003d1c:	6838      	ldr	r0, [r7, #0]
 8003d1e:	f7fc fbdb 	bl	80004d8 <__aeabi_f2d>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	ec43 2b10 	vmov	d0, r2, r3
 8003d2a:	f00d fc2d 	bl	8011588 <cos>
 8003d2e:	ec53 2b10 	vmov	r2, r3, d0
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	f7fc fc27 	bl	8000588 <__aeabi_dmul>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4690      	mov	r8, r2
 8003d40:	4699      	mov	r9, r3
 8003d42:	68b8      	ldr	r0, [r7, #8]
 8003d44:	f7fc fbc8 	bl	80004d8 <__aeabi_f2d>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	460d      	mov	r5, r1
 8003d4c:	6838      	ldr	r0, [r7, #0]
 8003d4e:	f7fc fbc3 	bl	80004d8 <__aeabi_f2d>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	ec43 2b10 	vmov	d0, r2, r3
 8003d5a:	f00d fc75 	bl	8011648 <sin>
 8003d5e:	ec53 2b10 	vmov	r2, r3, d0
 8003d62:	4620      	mov	r0, r4
 8003d64:	4629      	mov	r1, r5
 8003d66:	f7fc fc0f 	bl	8000588 <__aeabi_dmul>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4640      	mov	r0, r8
 8003d70:	4649      	mov	r1, r9
 8003d72:	f7fc fa51 	bl	8000218 <__aeabi_dsub>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f7fc fedb 	bl	8000b38 <__aeabi_d2f>
 8003d82:	4602      	mov	r2, r0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	605a      	str	r2, [r3, #4]
	point->z = y * sin(angle) + z * cos(angle);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7fc fba5 	bl	80004d8 <__aeabi_f2d>
 8003d8e:	4604      	mov	r4, r0
 8003d90:	460d      	mov	r5, r1
 8003d92:	6838      	ldr	r0, [r7, #0]
 8003d94:	f7fc fba0 	bl	80004d8 <__aeabi_f2d>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	ec43 2b10 	vmov	d0, r2, r3
 8003da0:	f00d fc52 	bl	8011648 <sin>
 8003da4:	ec53 2b10 	vmov	r2, r3, d0
 8003da8:	4620      	mov	r0, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	f7fc fbec 	bl	8000588 <__aeabi_dmul>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4690      	mov	r8, r2
 8003db6:	4699      	mov	r9, r3
 8003db8:	68b8      	ldr	r0, [r7, #8]
 8003dba:	f7fc fb8d 	bl	80004d8 <__aeabi_f2d>
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	460d      	mov	r5, r1
 8003dc2:	6838      	ldr	r0, [r7, #0]
 8003dc4:	f7fc fb88 	bl	80004d8 <__aeabi_f2d>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	ec43 2b10 	vmov	d0, r2, r3
 8003dd0:	f00d fbda 	bl	8011588 <cos>
 8003dd4:	ec53 2b10 	vmov	r2, r3, d0
 8003dd8:	4620      	mov	r0, r4
 8003dda:	4629      	mov	r1, r5
 8003ddc:	f7fc fbd4 	bl	8000588 <__aeabi_dmul>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4640      	mov	r0, r8
 8003de6:	4649      	mov	r1, r9
 8003de8:	f7fc fa18 	bl	800021c <__adddf3>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7fc fea0 	bl	8000b38 <__aeabi_d2f>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003e08 <rotate_y>:


void rotate_y(point3d_t* point, float angle){
 8003e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	ed87 0a00 	vstr	s0, [r7]
	float x = point->x;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]
	float z = point->z;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	60bb      	str	r3, [r7, #8]
	point->x = x * cos(angle) + z * sin(angle);
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7fc fb58 	bl	80004d8 <__aeabi_f2d>
 8003e28:	4604      	mov	r4, r0
 8003e2a:	460d      	mov	r5, r1
 8003e2c:	6838      	ldr	r0, [r7, #0]
 8003e2e:	f7fc fb53 	bl	80004d8 <__aeabi_f2d>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	ec43 2b10 	vmov	d0, r2, r3
 8003e3a:	f00d fba5 	bl	8011588 <cos>
 8003e3e:	ec53 2b10 	vmov	r2, r3, d0
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	f7fc fb9f 	bl	8000588 <__aeabi_dmul>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4690      	mov	r8, r2
 8003e50:	4699      	mov	r9, r3
 8003e52:	68b8      	ldr	r0, [r7, #8]
 8003e54:	f7fc fb40 	bl	80004d8 <__aeabi_f2d>
 8003e58:	4604      	mov	r4, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	6838      	ldr	r0, [r7, #0]
 8003e5e:	f7fc fb3b 	bl	80004d8 <__aeabi_f2d>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	ec43 2b10 	vmov	d0, r2, r3
 8003e6a:	f00d fbed 	bl	8011648 <sin>
 8003e6e:	ec53 2b10 	vmov	r2, r3, d0
 8003e72:	4620      	mov	r0, r4
 8003e74:	4629      	mov	r1, r5
 8003e76:	f7fc fb87 	bl	8000588 <__aeabi_dmul>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4640      	mov	r0, r8
 8003e80:	4649      	mov	r1, r9
 8003e82:	f7fc f9cb 	bl	800021c <__adddf3>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f7fc fe53 	bl	8000b38 <__aeabi_d2f>
 8003e92:	4602      	mov	r2, r0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	601a      	str	r2, [r3, #0]
	point->y = point->y;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	605a      	str	r2, [r3, #4]
	point->z = -x * sin(angle) + z * cos(angle);
 8003ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ea4:	eef1 7a67 	vneg.f32	s15, s15
 8003ea8:	ee17 3a90 	vmov	r3, s15
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc fb13 	bl	80004d8 <__aeabi_f2d>
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	460d      	mov	r5, r1
 8003eb6:	6838      	ldr	r0, [r7, #0]
 8003eb8:	f7fc fb0e 	bl	80004d8 <__aeabi_f2d>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	ec43 2b10 	vmov	d0, r2, r3
 8003ec4:	f00d fbc0 	bl	8011648 <sin>
 8003ec8:	ec53 2b10 	vmov	r2, r3, d0
 8003ecc:	4620      	mov	r0, r4
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7fc fb5a 	bl	8000588 <__aeabi_dmul>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4690      	mov	r8, r2
 8003eda:	4699      	mov	r9, r3
 8003edc:	68b8      	ldr	r0, [r7, #8]
 8003ede:	f7fc fafb 	bl	80004d8 <__aeabi_f2d>
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	460d      	mov	r5, r1
 8003ee6:	6838      	ldr	r0, [r7, #0]
 8003ee8:	f7fc faf6 	bl	80004d8 <__aeabi_f2d>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	ec43 2b10 	vmov	d0, r2, r3
 8003ef4:	f00d fb48 	bl	8011588 <cos>
 8003ef8:	ec53 2b10 	vmov	r2, r3, d0
 8003efc:	4620      	mov	r0, r4
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7fc fb42 	bl	8000588 <__aeabi_dmul>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4640      	mov	r0, r8
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	f7fc f986 	bl	800021c <__adddf3>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7fc fe0e 	bl	8000b38 <__aeabi_d2f>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003f2c <rotate_z>:

void rotate_z(point3d_t* point, float angle){
 8003f2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	ed87 0a00 	vstr	s0, [r7]
	float x = point->x;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]
	float y = point->y;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60bb      	str	r3, [r7, #8]
	point->x = x * cos(angle) - y * sin(angle);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7fc fac6 	bl	80004d8 <__aeabi_f2d>
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	460d      	mov	r5, r1
 8003f50:	6838      	ldr	r0, [r7, #0]
 8003f52:	f7fc fac1 	bl	80004d8 <__aeabi_f2d>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	ec43 2b10 	vmov	d0, r2, r3
 8003f5e:	f00d fb13 	bl	8011588 <cos>
 8003f62:	ec53 2b10 	vmov	r2, r3, d0
 8003f66:	4620      	mov	r0, r4
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f7fc fb0d 	bl	8000588 <__aeabi_dmul>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4690      	mov	r8, r2
 8003f74:	4699      	mov	r9, r3
 8003f76:	68b8      	ldr	r0, [r7, #8]
 8003f78:	f7fc faae 	bl	80004d8 <__aeabi_f2d>
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	460d      	mov	r5, r1
 8003f80:	6838      	ldr	r0, [r7, #0]
 8003f82:	f7fc faa9 	bl	80004d8 <__aeabi_f2d>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	ec43 2b10 	vmov	d0, r2, r3
 8003f8e:	f00d fb5b 	bl	8011648 <sin>
 8003f92:	ec53 2b10 	vmov	r2, r3, d0
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f7fc faf5 	bl	8000588 <__aeabi_dmul>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	f7fc f937 	bl	8000218 <__aeabi_dsub>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f7fc fdc1 	bl	8000b38 <__aeabi_d2f>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
	point->y = x * sin(angle) + y * cos(angle);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7fc fa8b 	bl	80004d8 <__aeabi_f2d>
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	6838      	ldr	r0, [r7, #0]
 8003fc8:	f7fc fa86 	bl	80004d8 <__aeabi_f2d>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	ec43 2b10 	vmov	d0, r2, r3
 8003fd4:	f00d fb38 	bl	8011648 <sin>
 8003fd8:	ec53 2b10 	vmov	r2, r3, d0
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc fad2 	bl	8000588 <__aeabi_dmul>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4690      	mov	r8, r2
 8003fea:	4699      	mov	r9, r3
 8003fec:	68b8      	ldr	r0, [r7, #8]
 8003fee:	f7fc fa73 	bl	80004d8 <__aeabi_f2d>
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	6838      	ldr	r0, [r7, #0]
 8003ff8:	f7fc fa6e 	bl	80004d8 <__aeabi_f2d>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	ec43 2b10 	vmov	d0, r2, r3
 8004004:	f00d fac0 	bl	8011588 <cos>
 8004008:	ec53 2b10 	vmov	r2, r3, d0
 800400c:	4620      	mov	r0, r4
 800400e:	4629      	mov	r1, r5
 8004010:	f7fc faba 	bl	8000588 <__aeabi_dmul>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4640      	mov	r0, r8
 800401a:	4649      	mov	r1, r9
 800401c:	f7fc f8fe 	bl	800021c <__adddf3>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	f7fc fd86 	bl	8000b38 <__aeabi_d2f>
 800402c:	4602      	mov	r2, r0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	605a      	str	r2, [r3, #4]
	point->z = point->z;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004044 <project>:

//windowsizex /2 +(Fov*point.x)/ (Fov+point.z) * 10
//windowsizey /2 +(Fov*point.y)/ (Fov+point.z) * 10
point2d_t project(point3d_t point){
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	eef0 6a40 	vmov.f32	s13, s0
 800404e:	eeb0 7a60 	vmov.f32	s14, s1
 8004052:	eef0 7a41 	vmov.f32	s15, s2
 8004056:	edc7 6a01 	vstr	s13, [r7, #4]
 800405a:	ed87 7a02 	vstr	s14, [r7, #8]
 800405e:	edc7 7a03 	vstr	s15, [r7, #12]
	point2d_t result;
	result.x = (uint16_t)(ScreenWidth/2 + (FOV*point.x)/(FOV+point.z)*PROJECTION_SCALE);
 8004062:	edd7 7a01 	vldr	s15, [r7, #4]
 8004066:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800406a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800406e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004072:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800407a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80040f0 <project+0xac>
 8004082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004086:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80040f4 <project+0xb0>
 800408a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800408e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004092:	ee17 3a90 	vmov	r3, s15
 8004096:	b29b      	uxth	r3, r3
 8004098:	823b      	strh	r3, [r7, #16]
	result.y = (uint16_t)(ScreenHight/2 + (FOV*point.y)/(FOV+point.z)*PROJECTION_SCALE);
 800409a:	edd7 7a02 	vldr	s15, [r7, #8]
 800409e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80040a2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80040a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80040aa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80040ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80040f0 <project+0xac>
 80040ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040be:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80040f8 <project+0xb4>
 80040c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ca:	ee17 3a90 	vmov	r3, s15
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	827b      	strh	r3, [r7, #18]
	return result;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	2300      	movs	r3, #0
 80040d8:	8aba      	ldrh	r2, [r7, #20]
 80040da:	f362 030f 	bfi	r3, r2, #0, #16
 80040de:	8afa      	ldrh	r2, [r7, #22]
 80040e0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	428c0000 	.word	0x428c0000
 80040f4:	43700000 	.word	0x43700000
 80040f8:	43080000 	.word	0x43080000

080040fc <vector_length>:
//	newObj->faces = (face2d_t*)malloc(sizeof(face2d_t)*stl->noTriangles);
//	newObj->noTriangles = stl->noTriangles;
//	return newObj;
//
//}
static float vector_length(point3d_t vec) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	eef0 6a40 	vmov.f32	s13, s0
 8004106:	eeb0 7a60 	vmov.f32	s14, s1
 800410a:	eef0 7a41 	vmov.f32	s15, s2
 800410e:	edc7 6a01 	vstr	s13, [r7, #4]
 8004112:	ed87 7a02 	vstr	s14, [r7, #8]
 8004116:	edc7 7a03 	vstr	s15, [r7, #12]
    return sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
 800411a:	ed97 7a01 	vldr	s14, [r7, #4]
 800411e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004126:	edd7 6a02 	vldr	s13, [r7, #8]
 800412a:	edd7 7a02 	vldr	s15, [r7, #8]
 800412e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004136:	edd7 6a03 	vldr	s13, [r7, #12]
 800413a:	edd7 7a03 	vldr	s15, [r7, #12]
 800413e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004146:	ee17 0a90 	vmov	r0, s15
 800414a:	f7fc f9c5 	bl	80004d8 <__aeabi_f2d>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	ec43 2b10 	vmov	d0, r2, r3
 8004156:	f00d f9e9 	bl	801152c <sqrt>
 800415a:	ec53 2b10 	vmov	r2, r3, d0
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	f7fc fce9 	bl	8000b38 <__aeabi_d2f>
 8004166:	4603      	mov	r3, r0
 8004168:	ee07 3a90 	vmov	s15, r3
}
 800416c:	eeb0 0a67 	vmov.f32	s0, s15
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <allocStlProjection>:


stl_obj2d* allocStlProjection(stl_obj* stl) {
 8004176:	b590      	push	{r4, r7, lr}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
    stl_obj2d* newObj = (stl_obj2d*)malloc(sizeof(stl_obj2d)); // Allocate correct structure size
 800417e:	2008      	movs	r0, #8
 8004180:	f00c fef2 	bl	8010f68 <malloc>
 8004184:	4603      	mov	r3, r0
 8004186:	60bb      	str	r3, [r7, #8]
    if (newObj == NULL) return NULL;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <allocStlProjection+0x1c>
 800418e:	2300      	movs	r3, #0
 8004190:	e04a      	b.n	8004228 <allocStlProjection+0xb2>

    newObj->faces = (face2d_t*)malloc(sizeof(face2d_t) * stl->noTriangles);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f00c fee5 	bl	8010f68 <malloc>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	601a      	str	r2, [r3, #0]
    if (newObj->faces == NULL) {
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <allocStlProjection+0x42>
        free(newObj);
 80041ae:	68b8      	ldr	r0, [r7, #8]
 80041b0:	f00c fee2 	bl	8010f78 <free>
        return NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e037      	b.n	8004228 <allocStlProjection+0xb2>
    }

    for (uint32_t i = 0; i < stl->noTriangles; i++) {
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e02a      	b.n	8004214 <allocStlProjection+0x9e>
        newObj->faces[i].p1 = (point2d_t*)malloc(sizeof(point2d_t));
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	18d4      	adds	r4, r2, r3
 80041c8:	2004      	movs	r0, #4
 80041ca:	f00c fecd 	bl	8010f68 <malloc>
 80041ce:	4603      	mov	r3, r0
 80041d0:	6063      	str	r3, [r4, #4]
        newObj->faces[i].p2 = (point2d_t*)malloc(sizeof(point2d_t));
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	18d4      	adds	r4, r2, r3
 80041dc:	2004      	movs	r0, #4
 80041de:	f00c fec3 	bl	8010f68 <malloc>
 80041e2:	4603      	mov	r3, r0
 80041e4:	60a3      	str	r3, [r4, #8]
        newObj->faces[i].p3 = (point2d_t*)malloc(sizeof(point2d_t));
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	18d4      	adds	r4, r2, r3
 80041f0:	2004      	movs	r0, #4
 80041f2:	f00c feb9 	bl	8010f68 <malloc>
 80041f6:	4603      	mov	r3, r0
 80041f8:	60e3      	str	r3, [r4, #12]
        newObj->faces[i].normal_v = (point3d_t*)malloc(sizeof(point3d_t)); // Ensure normal vector is allocated
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	18d4      	adds	r4, r2, r3
 8004204:	200c      	movs	r0, #12
 8004206:	f00c feaf 	bl	8010f68 <malloc>
 800420a:	4603      	mov	r3, r0
 800420c:	6023      	str	r3, [r4, #0]
    for (uint32_t i = 0; i < stl->noTriangles; i++) {
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3301      	adds	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3cf      	bcc.n	80041be <allocStlProjection+0x48>
    }

    newObj->noTriangles = stl->noTriangles;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	605a      	str	r2, [r3, #4]
    return newObj;
 8004226:	68bb      	ldr	r3, [r7, #8]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bd90      	pop	{r4, r7, pc}

08004230 <rotate_stl_obj>:
		rotate_x(&obj->points[i],angle_x);
		rotate_y(&obj->points[i],angle_y);
		rotate_z(&obj->points[i],angle_z);
	}
}
void rotate_stl_obj(stl_obj* obj, float angle_x, float angle_y, float angle_z) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	ed87 0a02 	vstr	s0, [r7, #8]
 800423c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004240:	ed87 1a00 	vstr	s2, [r7]
    for (size_t i = 0; i < obj->noTriangles; i++) {
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e086      	b.n	8004358 <rotate_stl_obj+0x128>
        // Rotate the normal vector
        rotate_x(obj->faces[i].normal_v, angle_x);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4413      	add	r3, r2
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	ed97 0a02 	vldr	s0, [r7, #8]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fd48 	bl	8003cf0 <rotate_x>
        rotate_y(obj->faces[i].normal_v, angle_y);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fdc9 	bl	8003e08 <rotate_y>
        rotate_z(obj->faces[i].normal_v, angle_z);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4413      	add	r3, r2
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	ed97 0a00 	vldr	s0, [r7]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fe50 	bl	8003f2c <rotate_z>

        // Rotate each vertex of the triangle
        rotate_x(obj->faces[i].p1, angle_x);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	ed97 0a02 	vldr	s0, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fd27 	bl	8003cf0 <rotate_x>
        rotate_y(obj->faces[i].p1, angle_y);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fda8 	bl	8003e08 <rotate_y>
        rotate_z(obj->faces[i].p1, angle_z);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	4413      	add	r3, r2
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	ed97 0a00 	vldr	s0, [r7]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fe2f 	bl	8003f2c <rotate_z>

        rotate_x(obj->faces[i].p2, angle_x);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4413      	add	r3, r2
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	ed97 0a02 	vldr	s0, [r7, #8]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fd06 	bl	8003cf0 <rotate_x>
        rotate_y(obj->faces[i].p2, angle_y);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	4413      	add	r3, r2
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fd87 	bl	8003e08 <rotate_y>
        rotate_z(obj->faces[i].p2, angle_z);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	ed97 0a00 	vldr	s0, [r7]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fe0e 	bl	8003f2c <rotate_z>

        rotate_x(obj->faces[i].p3, angle_x);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4413      	add	r3, r2
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fce5 	bl	8003cf0 <rotate_x>
        rotate_y(obj->faces[i].p3, angle_y);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	4413      	add	r3, r2
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	ed97 0a01 	vldr	s0, [r7, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fd66 	bl	8003e08 <rotate_y>
        rotate_z(obj->faces[i].p3, angle_z);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	4413      	add	r3, r2
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	ed97 0a00 	vldr	s0, [r7]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fded 	bl	8003f2c <rotate_z>
    for (size_t i = 0; i < obj->noTriangles; i++) {
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3301      	adds	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	429a      	cmp	r2, r3
 8004360:	f4ff af73 	bcc.w	800424a <rotate_stl_obj+0x1a>
    }
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <dot_product>:
	out_obj->edge_len = in_obj->edge_len;

	return;
}

float dot_product(point3d_t vec1, point3d_t vec2) {
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	eeb0 5a40 	vmov.f32	s10, s0
 8004378:	eef0 5a60 	vmov.f32	s11, s1
 800437c:	eeb0 6a41 	vmov.f32	s12, s2
 8004380:	eef0 6a61 	vmov.f32	s13, s3
 8004384:	eeb0 7a42 	vmov.f32	s14, s4
 8004388:	eef0 7a62 	vmov.f32	s15, s5
 800438c:	ed87 5a03 	vstr	s10, [r7, #12]
 8004390:	edc7 5a04 	vstr	s11, [r7, #16]
 8004394:	ed87 6a05 	vstr	s12, [r7, #20]
 8004398:	edc7 6a00 	vstr	s13, [r7]
 800439c:	ed87 7a01 	vstr	s14, [r7, #4]
 80043a0:	edc7 7a02 	vstr	s15, [r7, #8]
    return (vec1.x * vec2.x) + (vec1.y * vec2.y) + (vec1.z * vec2.z);
 80043a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80043a8:	edd7 7a00 	vldr	s15, [r7]
 80043ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043b0:	edd7 6a04 	vldr	s13, [r7, #16]
 80043b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80043b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80043c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043cc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80043d0:	eeb0 0a67 	vmov.f32	s0, s15
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <render_stl_object>:
//        *out_obj->faces[i].p1 = project(*(in_obj->faces[i].p1));
//        *out_obj->faces[i].p2 = project(*(in_obj->faces[i].p2));
//        *out_obj->faces[i].p3 = project(*(in_obj->faces[i].p3));
//    }
//}
void render_stl_object(stl_obj* in_obj, stl_obj2d* out_obj) {
 80043de:	b590      	push	{r4, r7, lr}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
    out_obj->noTriangles = in_obj->noTriangles;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	605a      	str	r2, [r3, #4]
    for (uint32_t i = 0; i < in_obj->noTriangles; i++) {
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e072      	b.n	80044dc <render_stl_object+0xfe>
        *(out_obj->faces[i].normal_v) = *(in_obj->faces[i].normal_v); // Copy normal vector
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4413      	add	r3, r2
 8004400:	6819      	ldr	r1, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	4413      	add	r3, r2
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	460a      	mov	r2, r1
 8004410:	ca07      	ldmia	r2, {r0, r1, r2}
 8004412:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(out_obj->faces[i].p1) = project(*(in_obj->faces[i].p1)); // Project and assign the result
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	4413      	add	r3, r2
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	440a      	add	r2, r1
 800442c:	6854      	ldr	r4, [r2, #4]
 800442e:	edd3 6a00 	vldr	s13, [r3]
 8004432:	ed93 7a01 	vldr	s14, [r3, #4]
 8004436:	edd3 7a02 	vldr	s15, [r3, #8]
 800443a:	eeb0 0a66 	vmov.f32	s0, s13
 800443e:	eef0 0a47 	vmov.f32	s1, s14
 8004442:	eeb0 1a67 	vmov.f32	s2, s15
 8004446:	f7ff fdfd 	bl	8004044 <project>
 800444a:	4603      	mov	r3, r0
 800444c:	461a      	mov	r2, r3
 800444e:	8022      	strh	r2, [r4, #0]
 8004450:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8004454:	8063      	strh	r3, [r4, #2]
        *(out_obj->faces[i].p2) = project(*(in_obj->faces[i].p2)); // Project and assign the result
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	4413      	add	r3, r2
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	6811      	ldr	r1, [r2, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	440a      	add	r2, r1
 800446c:	6894      	ldr	r4, [r2, #8]
 800446e:	edd3 6a00 	vldr	s13, [r3]
 8004472:	ed93 7a01 	vldr	s14, [r3, #4]
 8004476:	edd3 7a02 	vldr	s15, [r3, #8]
 800447a:	eeb0 0a66 	vmov.f32	s0, s13
 800447e:	eef0 0a47 	vmov.f32	s1, s14
 8004482:	eeb0 1a67 	vmov.f32	s2, s15
 8004486:	f7ff fddd 	bl	8004044 <project>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	8022      	strh	r2, [r4, #0]
 8004490:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8004494:	8063      	strh	r3, [r4, #2]
        *(out_obj->faces[i].p3) = project(*(in_obj->faces[i].p3)); // Project and assign the result
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	4413      	add	r3, r2
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	6811      	ldr	r1, [r2, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	440a      	add	r2, r1
 80044ac:	68d4      	ldr	r4, [r2, #12]
 80044ae:	edd3 6a00 	vldr	s13, [r3]
 80044b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80044b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80044ba:	eeb0 0a66 	vmov.f32	s0, s13
 80044be:	eef0 0a47 	vmov.f32	s1, s14
 80044c2:	eeb0 1a67 	vmov.f32	s2, s15
 80044c6:	f7ff fdbd 	bl	8004044 <project>
 80044ca:	4603      	mov	r3, r0
 80044cc:	461a      	mov	r2, r3
 80044ce:	8022      	strh	r2, [r4, #0]
 80044d0:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80044d4:	8063      	strh	r3, [r4, #2]
    for (uint32_t i = 0; i < in_obj->noTriangles; i++) {
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d387      	bcc.n	80043f6 <render_stl_object+0x18>
    }
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <calculate_normal>:

void calculate_normal(face_t* face) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
    float u_x = face->p2->x - face->p1->x;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	ed93 7a00 	vldr	s14, [r3]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float u_y = face->p2->y - face->p1->y;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	ed93 7a01 	vldr	s14, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004524:	edc7 7a08 	vstr	s15, [r7, #32]
    float u_z = face->p2->z - face->p1->z;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	edd3 7a02 	vldr	s15, [r3, #8]
 8004538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800453c:	edc7 7a07 	vstr	s15, [r7, #28]

    float v_x = face->p3->x - face->p1->x;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	ed93 7a00 	vldr	s14, [r3]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	edd3 7a00 	vldr	s15, [r3]
 8004550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004554:	edc7 7a06 	vstr	s15, [r7, #24]
    float v_y = face->p3->y - face->p1->y;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	edd3 7a01 	vldr	s15, [r3, #4]
 8004568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800456c:	edc7 7a05 	vstr	s15, [r7, #20]
    float v_z = face->p3->z - face->p1->z;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	ed93 7a02 	vldr	s14, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004584:	edc7 7a04 	vstr	s15, [r7, #16]

    face->normal_v->x = u_y * v_z - u_z * v_y;
 8004588:	ed97 7a08 	vldr	s14, [r7, #32]
 800458c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004594:	edd7 6a07 	vldr	s13, [r7, #28]
 8004598:	edd7 7a05 	vldr	s15, [r7, #20]
 800459c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a8:	edc3 7a00 	vstr	s15, [r3]
    face->normal_v->y = u_z * v_x - u_x * v_z;
 80045ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80045b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80045b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045b8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80045bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80045c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045cc:	edc3 7a01 	vstr	s15, [r3, #4]
    face->normal_v->z = u_x * v_y - u_y * v_x;
 80045d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80045d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80045d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045dc:	edd7 6a08 	vldr	s13, [r7, #32]
 80045e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80045e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f0:	edc3 7a02 	vstr	s15, [r3, #8]

    float length = sqrt(face->normal_v->x * face->normal_v->x + face->normal_v->y * face->normal_v->y + face->normal_v->z * face->normal_v->z);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	ed93 7a00 	vldr	s14, [r3]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	edd3 7a00 	vldr	s15, [r3]
 8004604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	edd3 7a01 	vldr	s15, [r3, #4]
 8004618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800461c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	edd3 6a02 	vldr	s13, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004638:	ee17 0a90 	vmov	r0, s15
 800463c:	f7fb ff4c 	bl	80004d8 <__aeabi_f2d>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	ec43 2b10 	vmov	d0, r2, r3
 8004648:	f00c ff70 	bl	801152c <sqrt>
 800464c:	ec53 2b10 	vmov	r2, r3, d0
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	f7fc fa70 	bl	8000b38 <__aeabi_d2f>
 8004658:	4603      	mov	r3, r0
 800465a:	60fb      	str	r3, [r7, #12]
    if (length > 0) {
 800465c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004668:	dc00      	bgt.n	800466c <calculate_normal+0x17c>
    	face->normal_v->x /= length;
    	face->normal_v->y /= length;
    	face->normal_v->z /= length;
    }
}
 800466a:	e023      	b.n	80046b4 <calculate_normal+0x1c4>
    	face->normal_v->x /= length;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	edd3 6a00 	vldr	s13, [r3]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	ed97 7a03 	vldr	s14, [r7, #12]
 800467c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004680:	edc3 7a00 	vstr	s15, [r3]
    	face->normal_v->y /= length;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	edd3 6a01 	vldr	s13, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	ed97 7a03 	vldr	s14, [r7, #12]
 8004694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004698:	edc3 7a01 	vstr	s15, [r3, #4]
    	face->normal_v->z /= length;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80046ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <create_icosahedron>:

stl_obj* create_icosahedron(void) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b0e6      	sub	sp, #408	; 0x198
 80046c0:	af00      	add	r7, sp, #0
    // Golden ratio
    const float phi = (1 + sqrt(5)) / 2;
 80046c2:	4bda      	ldr	r3, [pc, #872]	; (8004a2c <create_icosahedron+0x370>)
 80046c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    // Normalizing factor
    const float a = 1 / sqrt(1 + phi * phi);
 80046c8:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 80046cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046d8:	ee17 0a90 	vmov	r0, s15
 80046dc:	f7fb fefc 	bl	80004d8 <__aeabi_f2d>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	ec43 2b10 	vmov	d0, r2, r3
 80046e8:	f00c ff20 	bl	801152c <sqrt>
 80046ec:	ec53 2b10 	vmov	r2, r3, d0
 80046f0:	f04f 0000 	mov.w	r0, #0
 80046f4:	49ce      	ldr	r1, [pc, #824]	; (8004a30 <create_icosahedron+0x374>)
 80046f6:	f7fc f871 	bl	80007dc <__aeabi_ddiv>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	f7fc fa19 	bl	8000b38 <__aeabi_d2f>
 8004706:	4603      	mov	r3, r0
 8004708:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    // Vertices of an icosahedron
    point3d_t vertices[12] = {
        {-a, phi * a, 0}, {a, phi * a, 0}, {-a, -phi * a, 0}, {a, -phi * a, 0},
 800470c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004710:	eef1 7a67 	vneg.f32	s15, s15
    point3d_t vertices[12] = {
 8004714:	edc7 7a3c 	vstr	s15, [r7, #240]	; 0xf0
        {-a, phi * a, 0}, {a, phi * a, 0}, {-a, -phi * a, 0}, {a, -phi * a, 0},
 8004718:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 800471c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004720:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 8004724:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004730:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004734:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        {-a, phi * a, 0}, {a, phi * a, 0}, {-a, -phi * a, 0}, {a, -phi * a, 0},
 8004738:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 800473c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004740:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 8004744:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        {-a, phi * a, 0}, {a, phi * a, 0}, {-a, -phi * a, 0}, {a, -phi * a, 0},
 8004750:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004754:	eef1 7a67 	vneg.f32	s15, s15
    point3d_t vertices[12] = {
 8004758:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
        {-a, phi * a, 0}, {a, phi * a, 0}, {-a, -phi * a, 0}, {a, -phi * a, 0},
 800475c:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8004760:	eeb1 7a67 	vneg.f32	s14, s15
 8004764:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004768:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 800476c:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004778:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800477c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        {-a, phi * a, 0}, {a, phi * a, 0}, {-a, -phi * a, 0}, {a, -phi * a, 0},
 8004780:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8004784:	eeb1 7a67 	vneg.f32	s14, s15
 8004788:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800478c:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 8004790:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        {0, -a, phi * a}, {0, a, phi * a}, {0, -a, -phi * a}, {0, a, -phi * a},
 80047a4:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 80047a8:	eef1 7a67 	vneg.f32	s15, s15
    point3d_t vertices[12] = {
 80047ac:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
        {0, -a, phi * a}, {0, a, phi * a}, {0, -a, -phi * a}, {0, a, -phi * a},
 80047b0:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 80047b4:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 80047b8:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 80047bc:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80047c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80047cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        {0, -a, phi * a}, {0, a, phi * a}, {0, -a, -phi * a}, {0, a, -phi * a},
 80047d0:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 80047d4:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 80047d8:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 80047dc:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        {0, -a, phi * a}, {0, a, phi * a}, {0, -a, -phi * a}, {0, a, -phi * a},
 80047e8:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 80047ec:	eef1 7a67 	vneg.f32	s15, s15
    point3d_t vertices[12] = {
 80047f0:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
        {0, -a, phi * a}, {0, a, phi * a}, {0, -a, -phi * a}, {0, a, -phi * a},
 80047f4:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 80047f8:	eeb1 7a67 	vneg.f32	s14, s15
 80047fc:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004800:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 8004804:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004810:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004814:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        {0, -a, phi * a}, {0, a, phi * a}, {0, -a, -phi * a}, {0, a, -phi * a},
 8004818:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 800481c:	eeb1 7a67 	vneg.f32	s14, s15
 8004820:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004824:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 8004828:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
        {phi * a, 0, -a}, {phi * a, 0, a}, {-phi * a, 0, -a}, {-phi * a, 0, a}
 800482c:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 8004830:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004834:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 8004838:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        {phi * a, 0, -a}, {phi * a, 0, a}, {-phi * a, 0, -a}, {-phi * a, 0, a}
 8004844:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004848:	eef1 7a67 	vneg.f32	s15, s15
    point3d_t vertices[12] = {
 800484c:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
        {phi * a, 0, -a}, {phi * a, 0, a}, {-phi * a, 0, -a}, {-phi * a, 0, a}
 8004850:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 8004854:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004858:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 800485c:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004868:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800486c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        {phi * a, 0, -a}, {phi * a, 0, a}, {-phi * a, 0, -a}, {-phi * a, 0, a}
 8004870:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8004874:	eeb1 7a67 	vneg.f32	s14, s15
 8004878:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800487c:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 8004880:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        {phi * a, 0, -a}, {phi * a, 0, a}, {-phi * a, 0, -a}, {-phi * a, 0, a}
 800488c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8004890:	eef1 7a67 	vneg.f32	s15, s15
    point3d_t vertices[12] = {
 8004894:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
        {phi * a, 0, -a}, {phi * a, 0, a}, {-phi * a, 0, -a}, {-phi * a, 0, a}
 8004898:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 800489c:	eeb1 7a67 	vneg.f32	s14, s15
 80048a0:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 80048a4:	ee67 7a27 	vmul.f32	s15, s14, s15
    point3d_t vertices[12] = {
 80048a8:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80048b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80048b8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    };

    // Indices of the vertices that form the 20 triangular faces
    uint32_t faces_indices[20][3] = {
 80048bc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80048c0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048c4:	4a5b      	ldr	r2, [pc, #364]	; (8004a34 <create_icosahedron+0x378>)
 80048c6:	4618      	mov	r0, r3
 80048c8:	4611      	mov	r1, r2
 80048ca:	23f0      	movs	r3, #240	; 0xf0
 80048cc:	461a      	mov	r2, r3
 80048ce:	f00c fdd3 	bl	8011478 <memcpy>
        {3, 9, 4}, {3, 4, 2}, {3, 2, 6}, {3, 6, 8}, {3, 8, 9},
        {4, 9, 5}, {2, 4, 11}, {6, 2, 10}, {8, 6, 7}, {9, 8, 1}
    };

    // Allocate memory for the STL object
    stl_obj* icosahedron = (stl_obj*)malloc(sizeof(stl_obj));
 80048d2:	2008      	movs	r0, #8
 80048d4:	f00c fb48 	bl	8010f68 <malloc>
 80048d8:	4603      	mov	r3, r0
 80048da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    if (!icosahedron) {
 80048de:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <create_icosahedron+0x22e>
        return NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e118      	b.n	8004b1c <create_icosahedron+0x460>
    }

    // Allocate memory for the faces
    icosahedron->faces = (face_t*)malloc(20 * sizeof(face_t));
 80048ea:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80048ee:	f00c fb3b 	bl	8010f68 <malloc>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80048fa:	601a      	str	r2, [r3, #0]
    if (!icosahedron->faces) {
 80048fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <create_icosahedron+0x256>

        free(icosahedron);
 8004906:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 800490a:	f00c fb35 	bl	8010f78 <free>
        return NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	e104      	b.n	8004b1c <create_icosahedron+0x460>
    }

    icosahedron->noTriangles = 20;
 8004912:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004916:	2214      	movs	r2, #20
 8004918:	605a      	str	r2, [r3, #4]

    // Allocate and assign memory for each face and its vertices
    for (uint32_t i = 0; i < 20; i++) {
 800491a:	2300      	movs	r3, #0
 800491c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8004920:	e0f5      	b.n	8004b0e <create_icosahedron+0x452>
        face_t* face = &icosahedron->faces[i];
 8004922:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	4413      	add	r3, r2
 8004930:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

        face->normal_v = (point3d_t*)malloc(sizeof(point3d_t));
 8004934:	200c      	movs	r0, #12
 8004936:	f00c fb17 	bl	8010f68 <malloc>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004942:	601a      	str	r2, [r3, #0]
        face->p1 = (point3d_t*)malloc(sizeof(point3d_t));
 8004944:	200c      	movs	r0, #12
 8004946:	f00c fb0f 	bl	8010f68 <malloc>
 800494a:	4603      	mov	r3, r0
 800494c:	461a      	mov	r2, r3
 800494e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004952:	605a      	str	r2, [r3, #4]
        face->p2 = (point3d_t*)malloc(sizeof(point3d_t));
 8004954:	200c      	movs	r0, #12
 8004956:	f00c fb07 	bl	8010f68 <malloc>
 800495a:	4603      	mov	r3, r0
 800495c:	461a      	mov	r2, r3
 800495e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004962:	609a      	str	r2, [r3, #8]
        face->p3 = (point3d_t*)malloc(sizeof(point3d_t));
 8004964:	200c      	movs	r0, #12
 8004966:	f00c faff 	bl	8010f68 <malloc>
 800496a:	4603      	mov	r3, r0
 800496c:	461a      	mov	r2, r3
 800496e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004972:	60da      	str	r2, [r3, #12]

        if (!face->normal_v || !face->p1 || !face->p2 || !face->p3) {
 8004974:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00e      	beq.n	800499c <create_icosahedron+0x2e0>
 800497e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <create_icosahedron+0x2e0>
 8004988:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <create_icosahedron+0x2e0>
 8004992:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d14d      	bne.n	8004a38 <create_icosahedron+0x37c>

            // Free previously allocated memory
            for (uint32_t j = 0; j <= i; j++) {
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80049a2:	e030      	b.n	8004a06 <create_icosahedron+0x34a>
                free(icosahedron->faces[j].normal_v);
 80049a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	4413      	add	r3, r2
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f00c fadf 	bl	8010f78 <free>
                free(icosahedron->faces[j].p1);
 80049ba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	4413      	add	r3, r2
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f00c fad4 	bl	8010f78 <free>
                free(icosahedron->faces[j].p2);
 80049d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4413      	add	r3, r2
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f00c fac9 	bl	8010f78 <free>
                free(icosahedron->faces[j].p3);
 80049e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	4413      	add	r3, r2
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f00c fabe 	bl	8010f78 <free>
            for (uint32_t j = 0; j <= i; j++) {
 80049fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a00:	3301      	adds	r3, #1
 8004a02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004a06:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8004a0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d9c8      	bls.n	80049a4 <create_icosahedron+0x2e8>
            }
            free(icosahedron->faces);
 8004a12:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f00c faad 	bl	8010f78 <free>
            free(icosahedron);
 8004a1e:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8004a22:	f00c faa9 	bl	8010f78 <free>
            return NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e078      	b.n	8004b1c <create_icosahedron+0x460>
 8004a2a:	bf00      	nop
 8004a2c:	3fcf1bbd 	.word	0x3fcf1bbd
 8004a30:	3ff00000 	.word	0x3ff00000
 8004a34:	080128bc 	.word	0x080128bc
        }

        face->normal_v->x = face->normal_v->y = face->normal_v->z = 0.0f;  // Setting normal vector to zero for simplicity
 8004a38:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	6093      	str	r3, [r2, #8]
 8004a44:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	6013      	str	r3, [r2, #0]

        *face->p1 = vertices[faces_indices[i][0]];
 8004a58:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004a5c:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8004a60:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a64:	4613      	mov	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004a82:	443b      	add	r3, r7
 8004a84:	f1a3 02a8 	sub.w	r2, r3, #168	; 0xa8
 8004a88:	460b      	mov	r3, r1
 8004a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *face->p2 = vertices[faces_indices[i][1]];
 8004a90:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004a94:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8004a98:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004aae:	6899      	ldr	r1, [r3, #8]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004abc:	443b      	add	r3, r7
 8004abe:	f1a3 02a8 	sub.w	r2, r3, #168	; 0xa8
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *face->p3 = vertices[faces_indices[i][2]];
 8004aca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004ace:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8004ad2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ae8:	68d9      	ldr	r1, [r3, #12]
 8004aea:	4613      	mov	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004af6:	443b      	add	r3, r7
 8004af8:	f1a3 02a8 	sub.w	r2, r3, #168	; 0xa8
 8004afc:	460b      	mov	r3, r1
 8004afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (uint32_t i = 0; i < 20; i++) {
 8004b04:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8004b0e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004b12:	2b13      	cmp	r3, #19
 8004b14:	f67f af05 	bls.w	8004922 <create_icosahedron+0x266>
    }

    return icosahedron;
 8004b18:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop

08004b28 <adjust_luminosity>:


uint32_t adjust_luminosity(uint32_t color, float factor) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	ed87 0a02 	vstr	s0, [r7, #8]

    uint8_t a = (color >> 24) & 0xFF;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0e1b      	lsrs	r3, r3, #24
 8004b38:	75fb      	strb	r3, [r7, #23]
    uint8_t r = (color >> 16) & 0xFF;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	75bb      	strb	r3, [r7, #22]
    uint8_t g = (color >> 8) & 0xFF;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	757b      	strb	r3, [r7, #21]
    uint8_t b = color & 0xFF;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	753b      	strb	r3, [r7, #20]


    r = (uint8_t)(r * factor);
 8004b4a:	7dbb      	ldrb	r3, [r7, #22]
 8004b4c:	ee07 3a90 	vmov	s15, r3
 8004b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b60:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b64:	793b      	ldrb	r3, [r7, #4]
 8004b66:	75bb      	strb	r3, [r7, #22]
    g = (uint8_t)(g * factor);
 8004b68:	7d7b      	ldrb	r3, [r7, #21]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b72:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b7e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b82:	793b      	ldrb	r3, [r7, #4]
 8004b84:	757b      	strb	r3, [r7, #21]
    b = (uint8_t)(b * factor);
 8004b86:	7d3b      	ldrb	r3, [r7, #20]
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ba0:	793b      	ldrb	r3, [r7, #4]
 8004ba2:	753b      	strb	r3, [r7, #20]

    uint32_t new_color = (a << 24) | (r << 16) | (g << 8) | b;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	061a      	lsls	r2, r3, #24
 8004ba8:	7dbb      	ldrb	r3, [r7, #22]
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	431a      	orrs	r2, r3
 8004bae:	7d7b      	ldrb	r3, [r7, #21]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	7d3b      	ldrb	r3, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

    return new_color;
 8004bba:	693b      	ldr	r3, [r7, #16]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <average_z>:

float average_z(face_t face) {
 8004bc8:	b490      	push	{r4, r7}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	463c      	mov	r4, r7
 8004bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (face.p1->z + face.p2->z + face.p3->z) / 3.0f;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8004be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004bf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bf6:	eef0 7a66 	vmov.f32	s15, s13
}
 8004bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc90      	pop	{r4, r7}
 8004c04:	4770      	bx	lr

08004c06 <compare_faces>:
int compare_faces(const void* a, const void* b) {
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
    face2d_with_z_t* faceA = (face2d_with_z_t*)a;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60fb      	str	r3, [r7, #12]
    face2d_with_z_t* faceB = (face2d_with_z_t*)b;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	60bb      	str	r3, [r7, #8]
    if (faceA->average_z < faceB->average_z) return 1; // Sort in descending order
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2c:	d501      	bpl.n	8004c32 <compare_faces+0x2c>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e00e      	b.n	8004c50 <compare_faces+0x4a>
    if (faceA->average_z > faceB->average_z) return -1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	dd02      	ble.n	8004c4e <compare_faces+0x48>
 8004c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c4c:	e000      	b.n	8004c50 <compare_faces+0x4a>
    return 0;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <painterAlgorithm>:

void painterAlgorithm(stl_obj* in_obj, stl_obj2d* out_obj) {
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
    uint32_t num_faces = in_obj->noTriangles;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	613b      	str	r3, [r7, #16]
    face2d_with_z_t* faces_with_z = (face2d_with_z_t*)malloc(sizeof(face2d_with_z_t) * num_faces);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4618      	mov	r0, r3
 8004c72:	f00c f979 	bl	8010f68 <malloc>
 8004c76:	4603      	mov	r3, r0
 8004c78:	60fb      	str	r3, [r7, #12]

    // Create array with faces and their average z
    for (uint32_t i = 0; i < num_faces; i++) {
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	e01c      	b.n	8004cba <painterAlgorithm+0x5e>
        faces_with_z[i].face2d = &out_obj->faces[i];
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	011a      	lsls	r2, r3, #4
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	4403      	add	r3, r0
 8004c90:	440a      	add	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
        faces_with_z[i].average_z = average_z(in_obj->faces[i]);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	4413      	add	r3, r2
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	00d2      	lsls	r2, r2, #3
 8004ca2:	68f9      	ldr	r1, [r7, #12]
 8004ca4:	188c      	adds	r4, r1, r2
 8004ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ca8:	f7ff ff8e 	bl	8004bc8 <average_z>
 8004cac:	eef0 7a40 	vmov.f32	s15, s0
 8004cb0:	edc4 7a01 	vstr	s15, [r4, #4]
    for (uint32_t i = 0; i < num_faces; i++) {
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d3de      	bcc.n	8004c80 <painterAlgorithm+0x24>
    }

    // Sort the array based on the average z values
    qsort(faces_with_z, num_faces, sizeof(face2d_with_z_t), compare_faces);
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <painterAlgorithm+0xf4>)
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	6939      	ldr	r1, [r7, #16]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f00c fa41 	bl	8011150 <qsort>

    // Reorder out_obj->faces according to the sorted order
    face2d_t* sorted_faces = (face2d_t*)malloc(sizeof(face2d_t) * num_faces);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f00c f948 	bl	8010f68 <malloc>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < num_faces; i++) {
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e010      	b.n	8004d04 <painterAlgorithm+0xa8>
        sorted_faces[i] = *faces_with_z[i].face2d;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	6819      	ldr	r1, [r3, #0]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	461c      	mov	r4, r3
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (uint32_t i = 0; i < num_faces; i++) {
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d3ea      	bcc.n	8004ce2 <painterAlgorithm+0x86>
    }
    for (uint32_t i = 0; i < num_faces; i++) {
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e010      	b.n	8004d34 <painterAlgorithm+0xd8>
        out_obj->faces[i] = sorted_faces[i];
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	18d1      	adds	r1, r2, r3
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	4413      	add	r3, r2
 8004d24:	461c      	mov	r4, r3
 8004d26:	460b      	mov	r3, r1
 8004d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (uint32_t i = 0; i < num_faces; i++) {
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3301      	adds	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d3ea      	bcc.n	8004d12 <painterAlgorithm+0xb6>
    }

    free(faces_with_z);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f00c f91b 	bl	8010f78 <free>
    free(sorted_faces);
 8004d42:	68b8      	ldr	r0, [r7, #8]
 8004d44:	f00c f918 	bl	8010f78 <free>
}
 8004d48:	bf00      	nop
 8004d4a:	3724      	adds	r7, #36	; 0x24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd90      	pop	{r4, r7, pc}
 8004d50:	08004c07 	.word	0x08004c07

08004d54 <normalize_vector>:
//void draw();

// Function to normalize a vector
void normalize_vector(point3d_t* vec) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
    float length = vector_length(*vec);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	edd3 6a00 	vldr	s13, [r3]
 8004d62:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d6a:	eeb0 0a66 	vmov.f32	s0, s13
 8004d6e:	eef0 0a47 	vmov.f32	s1, s14
 8004d72:	eeb0 1a67 	vmov.f32	s2, s15
 8004d76:	f7ff f9c1 	bl	80040fc <vector_length>
 8004d7a:	ed87 0a03 	vstr	s0, [r7, #12]

    if (length != 0) { // Prevent division by zero
 8004d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8a:	d01d      	beq.n	8004dc8 <normalize_vector+0x74>
        vec->x /= length;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	edd3 6a00 	vldr	s13, [r3]
 8004d92:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	edc3 7a00 	vstr	s15, [r3]
        vec->y /= length;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	edd3 6a01 	vldr	s13, [r3, #4]
 8004da6:	ed97 7a03 	vldr	s14, [r7, #12]
 8004daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	edc3 7a01 	vstr	s15, [r3, #4]
        vec->z /= length;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	edd3 6a02 	vldr	s13, [r3, #8]
 8004dba:	ed97 7a03 	vldr	s14, [r7, #12]
 8004dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004dd4:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004dd6:	2228      	movs	r2, #40	; 0x28
 8004dd8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004ddc:	2209      	movs	r2, #9
 8004dde:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004de2:	2235      	movs	r2, #53	; 0x35
 8004de4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004de6:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004de8:	220b      	movs	r2, #11
 8004dea:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004dec:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004dee:	f240 121b 	movw	r2, #283	; 0x11b
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004df4:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004df6:	f240 2215 	movw	r2, #533	; 0x215
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004dfe:	f240 121d 	movw	r2, #285	; 0x11d
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e06:	f240 2235 	movw	r2, #565	; 0x235
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4823      	ldr	r0, [pc, #140]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e10:	f000 fba6 	bl	8005560 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004e14:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004e1c:	4b1f      	ldr	r3, [pc, #124]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e1e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004e22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004e24:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004e34:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004e3c:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004e42:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004e48:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e56:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <BSP_LCD_Init+0xd0>)
 8004e58:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004e5a:	4810      	ldr	r0, [pc, #64]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e5c:	f002 ff74 	bl	8007d48 <HAL_LTDC_GetState>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d103      	bne.n	8004e6e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004e66:	2100      	movs	r1, #0
 8004e68:	480c      	ldr	r0, [pc, #48]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e6a:	f000 fa9f 	bl	80053ac <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004e6e:	480b      	ldr	r0, [pc, #44]	; (8004e9c <BSP_LCD_Init+0xcc>)
 8004e70:	f002 fe5c 	bl	8007b2c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004e74:	2201      	movs	r2, #1
 8004e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e7a:	480a      	ldr	r0, [pc, #40]	; (8004ea4 <BSP_LCD_Init+0xd4>)
 8004e7c:	f002 fcf0 	bl	8007860 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004e80:	2201      	movs	r2, #1
 8004e82:	2108      	movs	r1, #8
 8004e84:	4808      	ldr	r0, [pc, #32]	; (8004ea8 <BSP_LCD_Init+0xd8>)
 8004e86:	f002 fceb 	bl	8007860 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004e8a:	f000 fc91 	bl	80057b0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004e8e:	4807      	ldr	r0, [pc, #28]	; (8004eac <BSP_LCD_Init+0xdc>)
 8004e90:	f000 f918 	bl	80050c4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000da0 	.word	0x20000da0
 8004ea0:	40016800 	.word	0x40016800
 8004ea4:	40022000 	.word	0x40022000
 8004ea8:	40022800 	.word	0x40022800
 8004eac:	20000020 	.word	0x20000020

08004eb0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <BSP_LCD_GetXSize+0x20>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a06      	ldr	r2, [pc, #24]	; (8004ed4 <BSP_LCD_GetXSize+0x24>)
 8004eba:	2134      	movs	r1, #52	; 0x34
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3360      	adds	r3, #96	; 0x60
 8004ec4:	681b      	ldr	r3, [r3, #0]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	20000e88 	.word	0x20000e88
 8004ed4:	20000da0 	.word	0x20000da0

08004ed8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <BSP_LCD_GetYSize+0x20>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a06      	ldr	r2, [pc, #24]	; (8004efc <BSP_LCD_GetYSize+0x24>)
 8004ee2:	2134      	movs	r1, #52	; 0x34
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	3364      	adds	r3, #100	; 0x64
 8004eec:	681b      	ldr	r3, [r3, #0]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	20000e88 	.word	0x20000e88
 8004efc:	20000da0 	.word	0x20000da0

08004f00 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b090      	sub	sp, #64	; 0x40
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	6039      	str	r1, [r7, #0]
 8004f0a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004f10:	f7ff ffce 	bl	8004eb0 <BSP_LCD_GetXSize>
 8004f14:	4603      	mov	r3, r0
 8004f16:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004f1c:	f7ff ffdc 	bl	8004ed8 <BSP_LCD_GetYSize>
 8004f20:	4603      	mov	r3, r0
 8004f22:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004f2c:	23ff      	movs	r3, #255	; 0xff
 8004f2e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;//LTDC_BLENDING_FACTOR1_PAxCA;
 8004f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR1_CA;//LTDC_BLENDING_FACTOR2_PAxCA;
 8004f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004f52:	f7ff ffad 	bl	8004eb0 <BSP_LCD_GetXSize>
 8004f56:	4603      	mov	r3, r0
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004f5a:	f7ff ffbd 	bl	8004ed8 <BSP_LCD_GetYSize>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	f107 030c 	add.w	r3, r7, #12
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4813      	ldr	r0, [pc, #76]	; (8004fb8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004f6c:	f002 feae 	bl	8007ccc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	4912      	ldr	r1, [pc, #72]	; (8004fbc <BSP_LCD_LayerDefaultInit+0xbc>)
 8004f74:	4613      	mov	r3, r2
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3304      	adds	r3, #4
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f84:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	490c      	ldr	r1, [pc, #48]	; (8004fbc <BSP_LCD_LayerDefaultInit+0xbc>)
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	3308      	adds	r3, #8
 8004f96:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004f98:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004f9a:	88fa      	ldrh	r2, [r7, #6]
 8004f9c:	4907      	ldr	r1, [pc, #28]	; (8004fbc <BSP_LCD_LayerDefaultInit+0xbc>)
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004fac:	601a      	str	r2, [r3, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	3740      	adds	r7, #64	; 0x40
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000da0 	.word	0x20000da0
 8004fbc:	20000e8c 	.word	0x20000e8c
 8004fc0:	20000020 	.word	0x20000020

08004fc4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004fcc:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <BSP_LCD_SelectLayer+0x1c>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
} 
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000e88 	.word	0x20000e88

08004fe4 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d112      	bne.n	800501c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8004ff6:	4b19      	ldr	r3, [pc, #100]	; (800505c <BSP_LCD_SetLayerVisible+0x78>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	01db      	lsls	r3, r3, #7
 8005000:	4413      	add	r3, r2
 8005002:	3384      	adds	r3, #132	; 0x84
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <BSP_LCD_SetLayerVisible+0x78>)
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	4611      	mov	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	01d2      	lsls	r2, r2, #7
 8005010:	440a      	add	r2, r1
 8005012:	3284      	adds	r2, #132	; 0x84
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e011      	b.n	8005040 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <BSP_LCD_SetLayerVisible+0x78>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	01db      	lsls	r3, r3, #7
 8005026:	4413      	add	r3, r2
 8005028:	3384      	adds	r3, #132	; 0x84
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <BSP_LCD_SetLayerVisible+0x78>)
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	4611      	mov	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	01d2      	lsls	r2, r2, #7
 8005036:	440a      	add	r2, r1
 8005038:	3284      	adds	r2, #132	; 0x84
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <BSP_LCD_SetLayerVisible+0x78>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <BSP_LCD_SetLayerVisible+0x78>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20000da0 	.word	0x20000da0

08005060 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005068:	4b07      	ldr	r3, [pc, #28]	; (8005088 <BSP_LCD_SetTextColor+0x28>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4907      	ldr	r1, [pc, #28]	; (800508c <BSP_LCD_SetTextColor+0x2c>)
 800506e:	4613      	mov	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000e88 	.word	0x20000e88
 800508c:	20000e8c 	.word	0x20000e8c

08005090 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005098:	4b08      	ldr	r3, [pc, #32]	; (80050bc <BSP_LCD_SetBackColor+0x2c>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4908      	ldr	r1, [pc, #32]	; (80050c0 <BSP_LCD_SetBackColor+0x30>)
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	3304      	adds	r3, #4
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000e88 	.word	0x20000e88
 80050c0:	20000e8c 	.word	0x20000e8c

080050c4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <BSP_LCD_SetFont+0x2c>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4908      	ldr	r1, [pc, #32]	; (80050f4 <BSP_LCD_SetFont+0x30>)
 80050d2:	4613      	mov	r3, r2
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	3308      	adds	r3, #8
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000e88 	.word	0x20000e88
 80050f4:	20000e8c 	.word	0x20000e8c

080050f8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80050f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <BSP_LCD_Clear+0x48>)
 8005102:	681c      	ldr	r4, [r3, #0]
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <BSP_LCD_Clear+0x48>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <BSP_LCD_Clear+0x4c>)
 800510a:	2134      	movs	r1, #52	; 0x34
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	335c      	adds	r3, #92	; 0x5c
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461e      	mov	r6, r3
 8005118:	f7ff feca 	bl	8004eb0 <BSP_LCD_GetXSize>
 800511c:	4605      	mov	r5, r0
 800511e:	f7ff fedb 	bl	8004ed8 <BSP_LCD_GetYSize>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	462a      	mov	r2, r5
 8005130:	4631      	mov	r1, r6
 8005132:	4620      	mov	r0, r4
 8005134:	f000 faf0 	bl	8005718 <LL_FillBuffer>
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005140:	20000e88 	.word	0x20000e88
 8005144:	20000da0 	.word	0x20000da0

08005148 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b08b      	sub	sp, #44	; 0x2c
 800514c:	af00      	add	r7, sp, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	4611      	mov	r1, r2
 8005154:	461a      	mov	r2, r3
 8005156:	4623      	mov	r3, r4
 8005158:	80fb      	strh	r3, [r7, #6]
 800515a:	4603      	mov	r3, r0
 800515c:	80bb      	strh	r3, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	807b      	strh	r3, [r7, #2]
 8005162:	4613      	mov	r3, r2
 8005164:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8005166:	2300      	movs	r3, #0
 8005168:	823b      	strh	r3, [r7, #16]
 800516a:	2300      	movs	r3, #0
 800516c:	81fb      	strh	r3, [r7, #14]
 800516e:	2300      	movs	r3, #0
 8005170:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005172:	2300      	movs	r3, #0
 8005174:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005176:	2300      	movs	r3, #0
 8005178:	847b      	strh	r3, [r7, #34]	; 0x22
 800517a:	2300      	movs	r3, #0
 800517c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 800517e:	2300      	movs	r3, #0
 8005180:	83fb      	strh	r3, [r7, #30]
 8005182:	2300      	movs	r3, #0
 8005184:	83bb      	strh	r3, [r7, #28]
 8005186:	2300      	movs	r3, #0
 8005188:	837b      	strh	r3, [r7, #26]
 800518a:	2300      	movs	r3, #0
 800518c:	833b      	strh	r3, [r7, #24]
 800518e:	2300      	movs	r3, #0
 8005190:	82fb      	strh	r3, [r7, #22]
 8005192:	2300      	movs	r3, #0
 8005194:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800519a:	887a      	ldrh	r2, [r7, #2]
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bfb8      	it	lt
 80051a4:	425b      	neglt	r3, r3
 80051a6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80051a8:	883a      	ldrh	r2, [r7, #0]
 80051aa:	88bb      	ldrh	r3, [r7, #4]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	425b      	neglt	r3, r3
 80051b4:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 80051ba:	88bb      	ldrh	r3, [r7, #4]
 80051bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d304      	bcc.n	80051d0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80051c6:	2301      	movs	r3, #1
 80051c8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	843b      	strh	r3, [r7, #32]
 80051ce:	e005      	b.n	80051dc <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80051d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051d4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80051d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051da:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80051dc:	883a      	ldrh	r2, [r7, #0]
 80051de:	88bb      	ldrh	r3, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d304      	bcc.n	80051ee <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80051e4:	2301      	movs	r3, #1
 80051e6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80051e8:	2301      	movs	r3, #1
 80051ea:	83bb      	strh	r3, [r7, #28]
 80051ec:	e005      	b.n	80051fa <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80051ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051f2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80051f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051f8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80051fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80051fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005202:	429a      	cmp	r2, r3
 8005204:	db11      	blt.n	800522a <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8005206:	2300      	movs	r3, #0
 8005208:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800520a:	2300      	movs	r3, #0
 800520c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800520e:	8a3b      	ldrh	r3, [r7, #16]
 8005210:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8005212:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	da00      	bge.n	800521c <BSP_LCD_DrawLine+0xd4>
 800521a:	3301      	adds	r3, #1
 800521c:	105b      	asrs	r3, r3, #1
 800521e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8005224:	8a3b      	ldrh	r3, [r7, #16]
 8005226:	82bb      	strh	r3, [r7, #20]
 8005228:	e010      	b.n	800524c <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800522a:	2300      	movs	r3, #0
 800522c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800522e:	2300      	movs	r3, #0
 8005230:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8005232:	89fb      	ldrh	r3, [r7, #14]
 8005234:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8005236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800523a:	2b00      	cmp	r3, #0
 800523c:	da00      	bge.n	8005240 <BSP_LCD_DrawLine+0xf8>
 800523e:	3301      	adds	r3, #1
 8005240:	105b      	asrs	r3, r3, #1
 8005242:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8005244:	8a3b      	ldrh	r3, [r7, #16]
 8005246:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8005248:	89fb      	ldrh	r3, [r7, #14]
 800524a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800524c:	2300      	movs	r3, #0
 800524e:	827b      	strh	r3, [r7, #18]
 8005250:	e037      	b.n	80052c2 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8005252:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8005254:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005256:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <BSP_LCD_DrawLine+0x190>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4c20      	ldr	r4, [pc, #128]	; (80052dc <BSP_LCD_DrawLine+0x194>)
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4423      	add	r3, r4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	f000 f839 	bl	80052e0 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800526e:	8b3a      	ldrh	r2, [r7, #24]
 8005270:	8afb      	ldrh	r3, [r7, #22]
 8005272:	4413      	add	r3, r2
 8005274:	b29b      	uxth	r3, r3
 8005276:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8005278:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800527c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005280:	429a      	cmp	r2, r3
 8005282:	db0e      	blt.n	80052a2 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8005284:	8b3a      	ldrh	r2, [r7, #24]
 8005286:	8b7b      	ldrh	r3, [r7, #26]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	b29b      	uxth	r3, r3
 800528c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800528e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005290:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005292:	4413      	add	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8005298:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800529a:	8bfb      	ldrh	r3, [r7, #30]
 800529c:	4413      	add	r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80052a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80052a4:	8c3b      	ldrh	r3, [r7, #32]
 80052a6:	4413      	add	r3, r2
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80052ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052ae:	8bbb      	ldrh	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80052b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3301      	adds	r3, #1
 80052be:	b29b      	uxth	r3, r3
 80052c0:	827b      	strh	r3, [r7, #18]
 80052c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80052c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	ddc1      	ble.n	8005252 <BSP_LCD_DrawLine+0x10a>
  }
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	372c      	adds	r7, #44	; 0x2c
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd90      	pop	{r4, r7, pc}
 80052d8:	20000e88 	.word	0x20000e88
 80052dc:	20000e8c 	.word	0x20000e8c

080052e0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80052e0:	b5b0      	push	{r4, r5, r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	603a      	str	r2, [r7, #0]
 80052ea:	80fb      	strh	r3, [r7, #6]
 80052ec:	460b      	mov	r3, r1
 80052ee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80052f0:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <BSP_LCD_DrawPixel+0x88>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <BSP_LCD_DrawPixel+0x8c>)
 80052f6:	2134      	movs	r1, #52	; 0x34
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	4413      	add	r3, r2
 80052fe:	3348      	adds	r3, #72	; 0x48
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d116      	bne.n	8005334 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <BSP_LCD_DrawPixel+0x88>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a18      	ldr	r2, [pc, #96]	; (800536c <BSP_LCD_DrawPixel+0x8c>)
 800530c:	2134      	movs	r1, #52	; 0x34
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	4413      	add	r3, r2
 8005314:	335c      	adds	r3, #92	; 0x5c
 8005316:	681c      	ldr	r4, [r3, #0]
 8005318:	88bd      	ldrh	r5, [r7, #4]
 800531a:	f7ff fdc9 	bl	8004eb0 <BSP_LCD_GetXSize>
 800531e:	4603      	mov	r3, r0
 8005320:	fb03 f205 	mul.w	r2, r3, r5
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	4413      	add	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4423      	add	r3, r4
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	b292      	uxth	r2, r2
 8005330:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8005332:	e015      	b.n	8005360 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <BSP_LCD_DrawPixel+0x88>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a0c      	ldr	r2, [pc, #48]	; (800536c <BSP_LCD_DrawPixel+0x8c>)
 800533a:	2134      	movs	r1, #52	; 0x34
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4413      	add	r3, r2
 8005342:	335c      	adds	r3, #92	; 0x5c
 8005344:	681c      	ldr	r4, [r3, #0]
 8005346:	88bd      	ldrh	r5, [r7, #4]
 8005348:	f7ff fdb2 	bl	8004eb0 <BSP_LCD_GetXSize>
 800534c:	4603      	mov	r3, r0
 800534e:	fb03 f205 	mul.w	r2, r3, r5
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4423      	add	r3, r4
 800535a:	461a      	mov	r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6013      	str	r3, [r2, #0]
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bdb0      	pop	{r4, r5, r7, pc}
 8005368:	20000e88 	.word	0x20000e88
 800536c:	20000da0 	.word	0x20000da0

08005370 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <BSP_LCD_DisplayOn+0x30>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <BSP_LCD_DisplayOn+0x30>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005384:	2201      	movs	r2, #1
 8005386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800538a:	4806      	ldr	r0, [pc, #24]	; (80053a4 <BSP_LCD_DisplayOn+0x34>)
 800538c:	f002 fa68 	bl	8007860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005390:	2201      	movs	r2, #1
 8005392:	2108      	movs	r1, #8
 8005394:	4804      	ldr	r0, [pc, #16]	; (80053a8 <BSP_LCD_DisplayOn+0x38>)
 8005396:	f002 fa63 	bl	8007860 <HAL_GPIO_WritePin>
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000da0 	.word	0x20000da0
 80053a4:	40022000 	.word	0x40022000
 80053a8:	40022800 	.word	0x40022800

080053ac <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b090      	sub	sp, #64	; 0x40
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80053b6:	4b64      	ldr	r3, [pc, #400]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	4a63      	ldr	r2, [pc, #396]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c0:	6453      	str	r3, [r2, #68]	; 0x44
 80053c2:	4b61      	ldr	r3, [pc, #388]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80053ce:	4b5e      	ldr	r3, [pc, #376]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	4a5d      	ldr	r2, [pc, #372]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053d8:	6313      	str	r3, [r2, #48]	; 0x30
 80053da:	4b5b      	ldr	r3, [pc, #364]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053e6:	4b58      	ldr	r3, [pc, #352]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	4a57      	ldr	r2, [pc, #348]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053ec:	f043 0310 	orr.w	r3, r3, #16
 80053f0:	6313      	str	r3, [r2, #48]	; 0x30
 80053f2:	4b55      	ldr	r3, [pc, #340]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80053fe:	4b52      	ldr	r3, [pc, #328]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	4a51      	ldr	r2, [pc, #324]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005408:	6313      	str	r3, [r2, #48]	; 0x30
 800540a:	4b4f      	ldr	r3, [pc, #316]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005416:	4b4c      	ldr	r3, [pc, #304]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4a4b      	ldr	r2, [pc, #300]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 800541c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005420:	6313      	str	r3, [r2, #48]	; 0x30
 8005422:	4b49      	ldr	r3, [pc, #292]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800542e:	4b46      	ldr	r3, [pc, #280]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	4a45      	ldr	r2, [pc, #276]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005438:	6313      	str	r3, [r2, #48]	; 0x30
 800543a:	4b43      	ldr	r3, [pc, #268]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005446:	4b40      	ldr	r3, [pc, #256]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	4a3f      	ldr	r2, [pc, #252]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 800544c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005450:	6313      	str	r3, [r2, #48]	; 0x30
 8005452:	4b3d      	ldr	r3, [pc, #244]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800545e:	4b3a      	ldr	r3, [pc, #232]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	4a39      	ldr	r2, [pc, #228]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005468:	6313      	str	r3, [r2, #48]	; 0x30
 800546a:	4b37      	ldr	r3, [pc, #220]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005476:	4b34      	ldr	r3, [pc, #208]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	4a33      	ldr	r2, [pc, #204]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 800547c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005480:	6313      	str	r3, [r2, #48]	; 0x30
 8005482:	4b31      	ldr	r3, [pc, #196]	; (8005548 <BSP_LCD_MspInit+0x19c>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800548e:	2310      	movs	r3, #16
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005492:	2302      	movs	r3, #2
 8005494:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005496:	2300      	movs	r3, #0
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800549a:	2302      	movs	r3, #2
 800549c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800549e:	230e      	movs	r3, #14
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80054a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054a6:	4619      	mov	r1, r3
 80054a8:	4828      	ldr	r0, [pc, #160]	; (800554c <BSP_LCD_MspInit+0x1a0>)
 80054aa:	f002 f815 	bl	80074d8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80054ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054b4:	2302      	movs	r3, #2
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80054b8:	2309      	movs	r3, #9
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80054bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054c0:	4619      	mov	r1, r3
 80054c2:	4823      	ldr	r0, [pc, #140]	; (8005550 <BSP_LCD_MspInit+0x1a4>)
 80054c4:	f002 f808 	bl	80074d8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80054c8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054ce:	2302      	movs	r3, #2
 80054d0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80054d2:	230e      	movs	r3, #14
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80054d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054da:	4619      	mov	r1, r3
 80054dc:	481d      	ldr	r0, [pc, #116]	; (8005554 <BSP_LCD_MspInit+0x1a8>)
 80054de:	f001 fffb 	bl	80074d8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80054e2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054e8:	2302      	movs	r3, #2
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80054ec:	230e      	movs	r3, #14
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80054f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054f4:	4619      	mov	r1, r3
 80054f6:	4818      	ldr	r0, [pc, #96]	; (8005558 <BSP_LCD_MspInit+0x1ac>)
 80054f8:	f001 ffee 	bl	80074d8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80054fc:	23f7      	movs	r3, #247	; 0xf7
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005500:	2302      	movs	r3, #2
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005504:	230e      	movs	r3, #14
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800550c:	4619      	mov	r1, r3
 800550e:	4813      	ldr	r0, [pc, #76]	; (800555c <BSP_LCD_MspInit+0x1b0>)
 8005510:	f001 ffe2 	bl	80074d8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800551a:	2301      	movs	r3, #1
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800551e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005522:	4619      	mov	r1, r3
 8005524:	480b      	ldr	r0, [pc, #44]	; (8005554 <BSP_LCD_MspInit+0x1a8>)
 8005526:	f001 ffd7 	bl	80074d8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800552a:	2308      	movs	r3, #8
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800552e:	2301      	movs	r3, #1
 8005530:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005536:	4619      	mov	r1, r3
 8005538:	4808      	ldr	r0, [pc, #32]	; (800555c <BSP_LCD_MspInit+0x1b0>)
 800553a:	f001 ffcd 	bl	80074d8 <HAL_GPIO_Init>
}
 800553e:	bf00      	nop
 8005540:	3740      	adds	r7, #64	; 0x40
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	40021000 	.word	0x40021000
 8005550:	40021800 	.word	0x40021800
 8005554:	40022000 	.word	0x40022000
 8005558:	40022400 	.word	0x40022400
 800555c:	40022800 	.word	0x40022800

08005560 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <BSP_LCD_ClockConfig+0x34>)
 800556c:	2208      	movs	r2, #8
 800556e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005570:	4b08      	ldr	r3, [pc, #32]	; (8005594 <BSP_LCD_ClockConfig+0x34>)
 8005572:	22c0      	movs	r2, #192	; 0xc0
 8005574:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <BSP_LCD_ClockConfig+0x34>)
 8005578:	2205      	movs	r2, #5
 800557a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <BSP_LCD_ClockConfig+0x34>)
 800557e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005584:	4803      	ldr	r0, [pc, #12]	; (8005594 <BSP_LCD_ClockConfig+0x34>)
 8005586:	f003 fb65 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000ea4 	.word	0x20000ea4

08005598 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b08b      	sub	sp, #44	; 0x2c
 800559c:	af00      	add	r7, sp, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	4623      	mov	r3, r4
 80055a8:	80fb      	strh	r3, [r7, #6]
 80055aa:	4603      	mov	r3, r0
 80055ac:	80bb      	strh	r3, [r7, #4]
 80055ae:	460b      	mov	r3, r1
 80055b0:	807b      	strh	r3, [r7, #2]
 80055b2:	4613      	mov	r3, r2
 80055b4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80055b6:	2300      	movs	r3, #0
 80055b8:	823b      	strh	r3, [r7, #16]
 80055ba:	2300      	movs	r3, #0
 80055bc:	81fb      	strh	r3, [r7, #14]
 80055be:	2300      	movs	r3, #0
 80055c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055c2:	2300      	movs	r3, #0
 80055c4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055c6:	2300      	movs	r3, #0
 80055c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80055ca:	2300      	movs	r3, #0
 80055cc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 80055ce:	2300      	movs	r3, #0
 80055d0:	83fb      	strh	r3, [r7, #30]
 80055d2:	2300      	movs	r3, #0
 80055d4:	83bb      	strh	r3, [r7, #28]
 80055d6:	2300      	movs	r3, #0
 80055d8:	837b      	strh	r3, [r7, #26]
 80055da:	2300      	movs	r3, #0
 80055dc:	833b      	strh	r3, [r7, #24]
 80055de:	2300      	movs	r3, #0
 80055e0:	82fb      	strh	r3, [r7, #22]
 80055e2:	2300      	movs	r3, #0
 80055e4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80055ea:	88ba      	ldrh	r2, [r7, #4]
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfb8      	it	lt
 80055f4:	425b      	neglt	r3, r3
 80055f6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80055f8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80055fa:	883b      	ldrh	r3, [r7, #0]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bfb8      	it	lt
 8005602:	425b      	neglt	r3, r3
 8005604:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800560a:	883b      	ldrh	r3, [r7, #0]
 800560c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800560e:	88ba      	ldrh	r2, [r7, #4]
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	429a      	cmp	r2, r3
 8005614:	d304      	bcc.n	8005620 <FillTriangle+0x88>
  {
    xinc1 = 1;
 8005616:	2301      	movs	r3, #1
 8005618:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	843b      	strh	r3, [r7, #32]
 800561e:	e005      	b.n	800562c <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8005620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005624:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8005626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800562a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800562c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800562e:	883b      	ldrh	r3, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d304      	bcc.n	800563e <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8005634:	2301      	movs	r3, #1
 8005636:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8005638:	2301      	movs	r3, #1
 800563a:	83bb      	strh	r3, [r7, #28]
 800563c:	e005      	b.n	800564a <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800563e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005642:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8005644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005648:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800564a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800564e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005652:	429a      	cmp	r2, r3
 8005654:	db11      	blt.n	800567a <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8005656:	2300      	movs	r3, #0
 8005658:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800565a:	2300      	movs	r3, #0
 800565c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800565e:	8a3b      	ldrh	r3, [r7, #16]
 8005660:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8005662:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	da00      	bge.n	800566c <FillTriangle+0xd4>
 800566a:	3301      	adds	r3, #1
 800566c:	105b      	asrs	r3, r3, #1
 800566e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8005670:	89fb      	ldrh	r3, [r7, #14]
 8005672:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8005674:	8a3b      	ldrh	r3, [r7, #16]
 8005676:	82bb      	strh	r3, [r7, #20]
 8005678:	e010      	b.n	800569c <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800567a:	2300      	movs	r3, #0
 800567c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800567e:	2300      	movs	r3, #0
 8005680:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8005686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800568a:	2b00      	cmp	r3, #0
 800568c:	da00      	bge.n	8005690 <FillTriangle+0xf8>
 800568e:	3301      	adds	r3, #1
 8005690:	105b      	asrs	r3, r3, #1
 8005692:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8005694:	8a3b      	ldrh	r3, [r7, #16]
 8005696:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8005698:	89fb      	ldrh	r3, [r7, #14]
 800569a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800569c:	2300      	movs	r3, #0
 800569e:	827b      	strh	r3, [r7, #18]
 80056a0:	e02f      	b.n	8005702 <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80056a2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80056a4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80056a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056a8:	887a      	ldrh	r2, [r7, #2]
 80056aa:	f7ff fd4d 	bl	8005148 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80056ae:	8b3a      	ldrh	r2, [r7, #24]
 80056b0:	8afb      	ldrh	r3, [r7, #22]
 80056b2:	4413      	add	r3, r2
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80056b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80056bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	db0e      	blt.n	80056e2 <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 80056c4:	8b3a      	ldrh	r2, [r7, #24]
 80056c6:	8b7b      	ldrh	r3, [r7, #26]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80056ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056d2:	4413      	add	r3, r2
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80056d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056da:	8bfb      	ldrh	r3, [r7, #30]
 80056dc:	4413      	add	r3, r2
 80056de:	b29b      	uxth	r3, r3
 80056e0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80056e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056e4:	8c3b      	ldrh	r3, [r7, #32]
 80056e6:	4413      	add	r3, r2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80056ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056ee:	8bbb      	ldrh	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80056f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3301      	adds	r3, #1
 80056fe:	b29b      	uxth	r3, r3
 8005700:	827b      	strh	r3, [r7, #18]
 8005702:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005706:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800570a:	429a      	cmp	r2, r3
 800570c:	ddc9      	ble.n	80056a2 <FillTriangle+0x10a>
  } 
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	372c      	adds	r7, #44	; 0x2c
 8005714:	46bd      	mov	sp, r7
 8005716:	bd90      	pop	{r4, r7, pc}

08005718 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005726:	4b1e      	ldr	r3, [pc, #120]	; (80057a0 <LL_FillBuffer+0x88>)
 8005728:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800572c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800572e:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <LL_FillBuffer+0x8c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <LL_FillBuffer+0x90>)
 8005734:	2134      	movs	r1, #52	; 0x34
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	3348      	adds	r3, #72	; 0x48
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d103      	bne.n	800574c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <LL_FillBuffer+0x88>)
 8005746:	2202      	movs	r2, #2
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	e002      	b.n	8005752 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <LL_FillBuffer+0x88>)
 800574e:	2200      	movs	r2, #0
 8005750:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005752:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <LL_FillBuffer+0x88>)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005758:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <LL_FillBuffer+0x88>)
 800575a:	4a14      	ldr	r2, [pc, #80]	; (80057ac <LL_FillBuffer+0x94>)
 800575c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800575e:	4810      	ldr	r0, [pc, #64]	; (80057a0 <LL_FillBuffer+0x88>)
 8005760:	f001 f908 	bl	8006974 <HAL_DMA2D_Init>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d115      	bne.n	8005796 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	480c      	ldr	r0, [pc, #48]	; (80057a0 <LL_FillBuffer+0x88>)
 800576e:	f001 fa5f 	bl	8006c30 <HAL_DMA2D_ConfigLayer>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10e      	bne.n	8005796 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69f9      	ldr	r1, [r7, #28]
 8005782:	4807      	ldr	r0, [pc, #28]	; (80057a0 <LL_FillBuffer+0x88>)
 8005784:	f001 f940 	bl	8006a08 <HAL_DMA2D_Start>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800578e:	210a      	movs	r1, #10
 8005790:	4803      	ldr	r0, [pc, #12]	; (80057a0 <LL_FillBuffer+0x88>)
 8005792:	f001 f964 	bl	8006a5e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000e48 	.word	0x20000e48
 80057a4:	20000e88 	.word	0x20000e88
 80057a8:	20000da0 	.word	0x20000da0
 80057ac:	4002b000 	.word	0x4002b000

080057b0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80057b4:	4b29      	ldr	r3, [pc, #164]	; (800585c <BSP_SDRAM_Init+0xac>)
 80057b6:	4a2a      	ldr	r2, [pc, #168]	; (8005860 <BSP_SDRAM_Init+0xb0>)
 80057b8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <BSP_SDRAM_Init+0xb4>)
 80057bc:	2202      	movs	r2, #2
 80057be:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80057c0:	4b28      	ldr	r3, [pc, #160]	; (8005864 <BSP_SDRAM_Init+0xb4>)
 80057c2:	2207      	movs	r2, #7
 80057c4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80057c6:	4b27      	ldr	r3, [pc, #156]	; (8005864 <BSP_SDRAM_Init+0xb4>)
 80057c8:	2204      	movs	r2, #4
 80057ca:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80057cc:	4b25      	ldr	r3, [pc, #148]	; (8005864 <BSP_SDRAM_Init+0xb4>)
 80057ce:	2207      	movs	r2, #7
 80057d0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80057d2:	4b24      	ldr	r3, [pc, #144]	; (8005864 <BSP_SDRAM_Init+0xb4>)
 80057d4:	2202      	movs	r2, #2
 80057d6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80057d8:	4b22      	ldr	r3, [pc, #136]	; (8005864 <BSP_SDRAM_Init+0xb4>)
 80057da:	2202      	movs	r2, #2
 80057dc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <BSP_SDRAM_Init+0xb4>)
 80057e0:	2202      	movs	r2, #2
 80057e2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <BSP_SDRAM_Init+0xac>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80057ea:	4b1c      	ldr	r3, [pc, #112]	; (800585c <BSP_SDRAM_Init+0xac>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80057f0:	4b1a      	ldr	r3, [pc, #104]	; (800585c <BSP_SDRAM_Init+0xac>)
 80057f2:	2204      	movs	r2, #4
 80057f4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80057f6:	4b19      	ldr	r3, [pc, #100]	; (800585c <BSP_SDRAM_Init+0xac>)
 80057f8:	2210      	movs	r2, #16
 80057fa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80057fc:	4b17      	ldr	r3, [pc, #92]	; (800585c <BSP_SDRAM_Init+0xac>)
 80057fe:	2240      	movs	r2, #64	; 0x40
 8005800:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005802:	4b16      	ldr	r3, [pc, #88]	; (800585c <BSP_SDRAM_Init+0xac>)
 8005804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005808:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800580a:	4b14      	ldr	r3, [pc, #80]	; (800585c <BSP_SDRAM_Init+0xac>)
 800580c:	2200      	movs	r2, #0
 800580e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005810:	4b12      	ldr	r3, [pc, #72]	; (800585c <BSP_SDRAM_Init+0xac>)
 8005812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005816:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005818:	4b10      	ldr	r3, [pc, #64]	; (800585c <BSP_SDRAM_Init+0xac>)
 800581a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800581e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005820:	4b0e      	ldr	r3, [pc, #56]	; (800585c <BSP_SDRAM_Init+0xac>)
 8005822:	2200      	movs	r2, #0
 8005824:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005826:	2100      	movs	r1, #0
 8005828:	480c      	ldr	r0, [pc, #48]	; (800585c <BSP_SDRAM_Init+0xac>)
 800582a:	f000 f87f 	bl	800592c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800582e:	490d      	ldr	r1, [pc, #52]	; (8005864 <BSP_SDRAM_Init+0xb4>)
 8005830:	480a      	ldr	r0, [pc, #40]	; (800585c <BSP_SDRAM_Init+0xac>)
 8005832:	f005 fff6 	bl	800b822 <HAL_SDRAM_Init>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <BSP_SDRAM_Init+0xb8>)
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	e002      	b.n	800584a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <BSP_SDRAM_Init+0xb8>)
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800584a:	f240 6003 	movw	r0, #1539	; 0x603
 800584e:	f000 f80d 	bl	800586c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <BSP_SDRAM_Init+0xb8>)
 8005854:	781b      	ldrb	r3, [r3, #0]
}
 8005856:	4618      	mov	r0, r3
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000f28 	.word	0x20000f28
 8005860:	a0000140 	.word	0xa0000140
 8005864:	20000f5c 	.word	0x20000f5c
 8005868:	20000028 	.word	0x20000028

0800586c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005878:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800587e:	4b29      	ldr	r3, [pc, #164]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005880:	2210      	movs	r2, #16
 8005882:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005884:	4b27      	ldr	r3, [pc, #156]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005886:	2201      	movs	r2, #1
 8005888:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800588a:	4b26      	ldr	r3, [pc, #152]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800588c:	2200      	movs	r2, #0
 800588e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005894:	4923      	ldr	r1, [pc, #140]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005896:	4824      	ldr	r0, [pc, #144]	; (8005928 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005898:	f005 fff7 	bl	800b88a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800589c:	2001      	movs	r0, #1
 800589e:	f000 f96b 	bl	8005b78 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80058a2:	4b20      	ldr	r3, [pc, #128]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058a4:	2202      	movs	r2, #2
 80058a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80058a8:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058aa:	2210      	movs	r2, #16
 80058ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80058ae:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80058b4:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80058ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058be:	4919      	ldr	r1, [pc, #100]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058c0:	4819      	ldr	r0, [pc, #100]	; (8005928 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80058c2:	f005 ffe2 	bl	800b88a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80058c6:	4b17      	ldr	r3, [pc, #92]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058c8:	2203      	movs	r2, #3
 80058ca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80058cc:	4b15      	ldr	r3, [pc, #84]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058ce:	2210      	movs	r2, #16
 80058d0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80058d2:	4b14      	ldr	r3, [pc, #80]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058d4:	2208      	movs	r2, #8
 80058d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058da:	2200      	movs	r2, #0
 80058dc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80058de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e2:	4910      	ldr	r1, [pc, #64]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058e4:	4810      	ldr	r0, [pc, #64]	; (8005928 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80058e6:	f005 ffd0 	bl	800b88a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80058ea:	f44f 7308 	mov.w	r3, #544	; 0x220
 80058ee:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058f2:	2204      	movs	r2, #4
 80058f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058f8:	2210      	movs	r2, #16
 80058fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80058fc:	4b09      	ldr	r3, [pc, #36]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058fe:	2201      	movs	r2, #1
 8005900:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a07      	ldr	r2, [pc, #28]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005906:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590c:	4905      	ldr	r1, [pc, #20]	; (8005924 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800590e:	4806      	ldr	r0, [pc, #24]	; (8005928 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005910:	f005 ffbb 	bl	800b88a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4804      	ldr	r0, [pc, #16]	; (8005928 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005918:	f005 ffec 	bl	800b8f4 <HAL_SDRAM_ProgramRefreshRate>
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000f78 	.word	0x20000f78
 8005928:	20000f28 	.word	0x20000f28

0800592c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800592c:	b580      	push	{r7, lr}
 800592e:	b090      	sub	sp, #64	; 0x40
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005936:	4b70      	ldr	r3, [pc, #448]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	4a6f      	ldr	r2, [pc, #444]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	6393      	str	r3, [r2, #56]	; 0x38
 8005942:	4b6d      	ldr	r3, [pc, #436]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800594e:	4b6a      	ldr	r3, [pc, #424]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	4a69      	ldr	r2, [pc, #420]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005958:	6313      	str	r3, [r2, #48]	; 0x30
 800595a:	4b67      	ldr	r3, [pc, #412]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005966:	4b64      	ldr	r3, [pc, #400]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	4a63      	ldr	r2, [pc, #396]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 800596c:	f043 0304 	orr.w	r3, r3, #4
 8005970:	6313      	str	r3, [r2, #48]	; 0x30
 8005972:	4b61      	ldr	r3, [pc, #388]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800597e:	4b5e      	ldr	r3, [pc, #376]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	4a5d      	ldr	r2, [pc, #372]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005984:	f043 0308 	orr.w	r3, r3, #8
 8005988:	6313      	str	r3, [r2, #48]	; 0x30
 800598a:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005996:	4b58      	ldr	r3, [pc, #352]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	4a57      	ldr	r2, [pc, #348]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 800599c:	f043 0310 	orr.w	r3, r3, #16
 80059a0:	6313      	str	r3, [r2, #48]	; 0x30
 80059a2:	4b55      	ldr	r3, [pc, #340]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80059ae:	4b52      	ldr	r3, [pc, #328]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	4a51      	ldr	r2, [pc, #324]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059b4:	f043 0320 	orr.w	r3, r3, #32
 80059b8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ba:	4b4f      	ldr	r3, [pc, #316]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80059c6:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	4a4b      	ldr	r2, [pc, #300]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d0:	6313      	str	r3, [r2, #48]	; 0x30
 80059d2:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80059de:	4b46      	ldr	r3, [pc, #280]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	4a45      	ldr	r2, [pc, #276]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ea:	4b43      	ldr	r3, [pc, #268]	; (8005af8 <BSP_SDRAM_MspInit+0x1cc>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80059f6:	2302      	movs	r3, #2
 80059f8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80059fa:	2301      	movs	r3, #1
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80059fe:	2302      	movs	r3, #2
 8005a00:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005a02:	230c      	movs	r3, #12
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005a06:	2308      	movs	r3, #8
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a0e:	4619      	mov	r1, r3
 8005a10:	483a      	ldr	r0, [pc, #232]	; (8005afc <BSP_SDRAM_MspInit+0x1d0>)
 8005a12:	f001 fd61 	bl	80074d8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005a16:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a20:	4619      	mov	r1, r3
 8005a22:	4837      	ldr	r0, [pc, #220]	; (8005b00 <BSP_SDRAM_MspInit+0x1d4>)
 8005a24:	f001 fd58 	bl	80074d8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005a28:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a32:	4619      	mov	r1, r3
 8005a34:	4833      	ldr	r0, [pc, #204]	; (8005b04 <BSP_SDRAM_MspInit+0x1d8>)
 8005a36:	f001 fd4f 	bl	80074d8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005a3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a44:	4619      	mov	r1, r3
 8005a46:	4830      	ldr	r0, [pc, #192]	; (8005b08 <BSP_SDRAM_MspInit+0x1dc>)
 8005a48:	f001 fd46 	bl	80074d8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005a4c:	f248 1333 	movw	r3, #33075	; 0x8133
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a56:	4619      	mov	r1, r3
 8005a58:	482c      	ldr	r0, [pc, #176]	; (8005b0c <BSP_SDRAM_MspInit+0x1e0>)
 8005a5a:	f001 fd3d 	bl	80074d8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005a5e:	2328      	movs	r3, #40	; 0x28
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a66:	4619      	mov	r1, r3
 8005a68:	4829      	ldr	r0, [pc, #164]	; (8005b10 <BSP_SDRAM_MspInit+0x1e4>)
 8005a6a:	f001 fd35 	bl	80074d8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005a6e:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005a76:	2280      	movs	r2, #128	; 0x80
 8005a78:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005a7a:	4b26      	ldr	r3, [pc, #152]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a80:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005a82:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a88:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a90:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a98:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005a9a:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005aa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005aa6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005aae:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005ab4:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005aba:	4b16      	ldr	r3, [pc, #88]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005ac0:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005ac2:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <BSP_SDRAM_MspInit+0x1ec>)
 8005ac4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
 8005acc:	4a11      	ldr	r2, [pc, #68]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005ad2:	4810      	ldr	r0, [pc, #64]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005ad4:	f000 fd82 	bl	80065dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005ad8:	480e      	ldr	r0, [pc, #56]	; (8005b14 <BSP_SDRAM_MspInit+0x1e8>)
 8005ada:	f000 fcd1 	bl	8006480 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005ade:	2200      	movs	r2, #0
 8005ae0:	210f      	movs	r1, #15
 8005ae2:	2038      	movs	r0, #56	; 0x38
 8005ae4:	f000 fbb8 	bl	8006258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005ae8:	2038      	movs	r0, #56	; 0x38
 8005aea:	f000 fbd1 	bl	8006290 <HAL_NVIC_EnableIRQ>
}
 8005aee:	bf00      	nop
 8005af0:	3740      	adds	r7, #64	; 0x40
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40023800 	.word	0x40023800
 8005afc:	40020800 	.word	0x40020800
 8005b00:	40020c00 	.word	0x40020c00
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40021400 	.word	0x40021400
 8005b0c:	40021800 	.word	0x40021800
 8005b10:	40021c00 	.word	0x40021c00
 8005b14:	20000f88 	.word	0x20000f88
 8005b18:	40026410 	.word	0x40026410

08005b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b20:	2003      	movs	r0, #3
 8005b22:	f000 fb8e 	bl	8006242 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b26:	2000      	movs	r0, #0
 8005b28:	f7fd ff74 	bl	8003a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b2c:	f7fc ff80 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <HAL_IncTick+0x20>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <HAL_IncTick+0x24>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4413      	add	r3, r2
 8005b48:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <HAL_IncTick+0x24>)
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000030 	.word	0x20000030
 8005b5c:	20000fe8 	.word	0x20000fe8

08005b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return uwTick;
 8005b64:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <HAL_GetTick+0x14>)
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000fe8 	.word	0x20000fe8

08005b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b80:	f7ff ffee 	bl	8005b60 <HAL_GetTick>
 8005b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b90:	d005      	beq.n	8005b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <HAL_Delay+0x44>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b9e:	bf00      	nop
 8005ba0:	f7ff ffde 	bl	8005b60 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d8f7      	bhi.n	8005ba0 <HAL_Delay+0x28>
  {
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000030 	.word	0x20000030

08005bc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e031      	b.n	8005c3a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fc ff4e 	bl	8002a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d116      	bne.n	8005c2c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c02:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <HAL_ADC_Init+0x84>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	f043 0202 	orr.w	r2, r3, #2
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f970 	bl	8005ef4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
 8005c2a:	e001      	b.n	8005c30 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	ffffeefd 	.word	0xffffeefd

08005c48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x1c>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e136      	b.n	8005ed2 <HAL_ADC_ConfigChannel+0x28a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b09      	cmp	r3, #9
 8005c72:	d93a      	bls.n	8005cea <HAL_ADC_ConfigChannel+0xa2>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7c:	d035      	beq.n	8005cea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68d9      	ldr	r1, [r3, #12]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	4413      	add	r3, r2
 8005c92:	3b1e      	subs	r3, #30
 8005c94:	2207      	movs	r2, #7
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	43da      	mvns	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	400a      	ands	r2, r1
 8005ca2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a8d      	ldr	r2, [pc, #564]	; (8005ee0 <HAL_ADC_ConfigChannel+0x298>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d10a      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68d9      	ldr	r1, [r3, #12]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	061a      	lsls	r2, r3, #24
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cc2:	e035      	b.n	8005d30 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68d9      	ldr	r1, [r3, #12]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4403      	add	r3, r0
 8005cdc:	3b1e      	subs	r3, #30
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ce8:	e022      	b.n	8005d30 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6919      	ldr	r1, [r3, #16]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	2207      	movs	r2, #7
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	43da      	mvns	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	400a      	ands	r2, r1
 8005d0c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6919      	ldr	r1, [r3, #16]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	4618      	mov	r0, r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	4403      	add	r3, r0
 8005d26:	409a      	lsls	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b06      	cmp	r3, #6
 8005d36:	d824      	bhi.n	8005d82 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	3b05      	subs	r3, #5
 8005d4a:	221f      	movs	r2, #31
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	43da      	mvns	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	400a      	ands	r2, r1
 8005d58:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4618      	mov	r0, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	3b05      	subs	r3, #5
 8005d74:	fa00 f203 	lsl.w	r2, r0, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8005d80:	e04c      	b.n	8005e1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d824      	bhi.n	8005dd4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	3b23      	subs	r3, #35	; 0x23
 8005d9c:	221f      	movs	r2, #31
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43da      	mvns	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	400a      	ands	r2, r1
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4618      	mov	r0, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3b23      	subs	r3, #35	; 0x23
 8005dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8005dd2:	e023      	b.n	8005e1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	3b41      	subs	r3, #65	; 0x41
 8005de6:	221f      	movs	r2, #31
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43da      	mvns	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	400a      	ands	r2, r1
 8005df4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	4618      	mov	r0, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3b41      	subs	r3, #65	; 0x41
 8005e10:	fa00 f203 	lsl.w	r2, r0, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a30      	ldr	r2, [pc, #192]	; (8005ee4 <HAL_ADC_ConfigChannel+0x29c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d10a      	bne.n	8005e3c <HAL_ADC_ConfigChannel+0x1f4>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e2e:	d105      	bne.n	8005e3c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005e30:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	4a2c      	ldr	r2, [pc, #176]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e36:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005e3a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a28      	ldr	r2, [pc, #160]	; (8005ee4 <HAL_ADC_ConfigChannel+0x29c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d10f      	bne.n	8005e66 <HAL_ADC_ConfigChannel+0x21e>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b12      	cmp	r3, #18
 8005e4c:	d10b      	bne.n	8005e66 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005e4e:	4b26      	ldr	r3, [pc, #152]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e58:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4a22      	ldr	r2, [pc, #136]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_ADC_ConfigChannel+0x29c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d12b      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0x280>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_ADC_ConfigChannel+0x298>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <HAL_ADC_ConfigChannel+0x23a>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b11      	cmp	r3, #17
 8005e80:	d122      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005e82:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005e8c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005e8e:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e98:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <HAL_ADC_ConfigChannel+0x298>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d111      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ea4:	4b11      	ldr	r3, [pc, #68]	; (8005eec <HAL_ADC_ConfigChannel+0x2a4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a11      	ldr	r2, [pc, #68]	; (8005ef0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	0c9a      	lsrs	r2, r3, #18
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005eba:	e002      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f9      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	10000012 	.word	0x10000012
 8005ee4:	40012000 	.word	0x40012000
 8005ee8:	40012300 	.word	0x40012300
 8005eec:	2000001c 	.word	0x2000001c
 8005ef0:	431bde83 	.word	0x431bde83

08005ef4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005efc:	4b78      	ldr	r3, [pc, #480]	; (80060e0 <ADC_Init+0x1ec>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	4a77      	ldr	r2, [pc, #476]	; (80060e0 <ADC_Init+0x1ec>)
 8005f02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005f06:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005f08:	4b75      	ldr	r3, [pc, #468]	; (80060e0 <ADC_Init+0x1ec>)
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4973      	ldr	r1, [pc, #460]	; (80060e0 <ADC_Init+0x1ec>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6859      	ldr	r1, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	021a      	lsls	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6859      	ldr	r1, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6899      	ldr	r1, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <ADC_Init+0x1f0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d022      	beq.n	8005fce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6899      	ldr	r1, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6899      	ldr	r1, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	e00f      	b.n	8005fee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0202 	bic.w	r2, r2, #2
 8005ffc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6899      	ldr	r1, [r3, #8]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	005a      	lsls	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800602a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800603a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	3b01      	subs	r3, #1
 8006048:	035a      	lsls	r2, r3, #13
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
 8006052:	e007      	b.n	8006064 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006062:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	3b01      	subs	r3, #1
 8006080:	051a      	lsls	r2, r3, #20
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6899      	ldr	r1, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060a6:	025a      	lsls	r2, r3, #9
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6899      	ldr	r1, [r3, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	029a      	lsls	r2, r3, #10
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40012300 	.word	0x40012300
 80060e4:	0f000001 	.word	0x0f000001

080060e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060f8:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <__NVIC_SetPriorityGrouping+0x40>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006104:	4013      	ands	r3, r2
 8006106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <__NVIC_SetPriorityGrouping+0x44>)
 8006112:	4313      	orrs	r3, r2
 8006114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006116:	4a04      	ldr	r2, [pc, #16]	; (8006128 <__NVIC_SetPriorityGrouping+0x40>)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	60d3      	str	r3, [r2, #12]
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	e000ed00 	.word	0xe000ed00
 800612c:	05fa0000 	.word	0x05fa0000

08006130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <__NVIC_GetPriorityGrouping+0x18>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	f003 0307 	and.w	r3, r3, #7
}
 800613e:	4618      	mov	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	e000ed00 	.word	0xe000ed00

0800614c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615a:	2b00      	cmp	r3, #0
 800615c:	db0b      	blt.n	8006176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	f003 021f 	and.w	r2, r3, #31
 8006164:	4907      	ldr	r1, [pc, #28]	; (8006184 <__NVIC_EnableIRQ+0x38>)
 8006166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	2001      	movs	r0, #1
 800616e:	fa00 f202 	lsl.w	r2, r0, r2
 8006172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	e000e100 	.word	0xe000e100

08006188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	6039      	str	r1, [r7, #0]
 8006192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006198:	2b00      	cmp	r3, #0
 800619a:	db0a      	blt.n	80061b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	490c      	ldr	r1, [pc, #48]	; (80061d4 <__NVIC_SetPriority+0x4c>)
 80061a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a6:	0112      	lsls	r2, r2, #4
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	440b      	add	r3, r1
 80061ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061b0:	e00a      	b.n	80061c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	4908      	ldr	r1, [pc, #32]	; (80061d8 <__NVIC_SetPriority+0x50>)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	3b04      	subs	r3, #4
 80061c0:	0112      	lsls	r2, r2, #4
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	440b      	add	r3, r1
 80061c6:	761a      	strb	r2, [r3, #24]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	e000e100 	.word	0xe000e100
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061dc:	b480      	push	{r7}
 80061de:	b089      	sub	sp, #36	; 0x24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f1c3 0307 	rsb	r3, r3, #7
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	bf28      	it	cs
 80061fa:	2304      	movcs	r3, #4
 80061fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	3304      	adds	r3, #4
 8006202:	2b06      	cmp	r3, #6
 8006204:	d902      	bls.n	800620c <NVIC_EncodePriority+0x30>
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	3b03      	subs	r3, #3
 800620a:	e000      	b.n	800620e <NVIC_EncodePriority+0x32>
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	43da      	mvns	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	401a      	ands	r2, r3
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	fa01 f303 	lsl.w	r3, r1, r3
 800622e:	43d9      	mvns	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006234:	4313      	orrs	r3, r2
         );
}
 8006236:	4618      	mov	r0, r3
 8006238:	3724      	adds	r7, #36	; 0x24
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff ff4c 	bl	80060e8 <__NVIC_SetPriorityGrouping>
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800626a:	f7ff ff61 	bl	8006130 <__NVIC_GetPriorityGrouping>
 800626e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	6978      	ldr	r0, [r7, #20]
 8006276:	f7ff ffb1 	bl	80061dc <NVIC_EncodePriority>
 800627a:	4602      	mov	r2, r0
 800627c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff ff80 	bl	8006188 <__NVIC_SetPriority>
}
 8006288:	bf00      	nop
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800629a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff ff54 	bl	800614c <__NVIC_EnableIRQ>
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e054      	b.n	8006368 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	7f5b      	ldrb	r3, [r3, #29]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d105      	bne.n	80062d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fc fc30 	bl	8002b34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	791b      	ldrb	r3, [r3, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10c      	bne.n	80062fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a22      	ldr	r2, [pc, #136]	; (8006370 <HAL_CRC_Init+0xc4>)
 80062e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0218 	bic.w	r2, r2, #24
 80062f8:	609a      	str	r2, [r3, #8]
 80062fa:	e00c      	b.n	8006316 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6899      	ldr	r1, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	461a      	mov	r2, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f834 	bl	8006374 <HAL_CRCEx_Polynomial_Set>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e028      	b.n	8006368 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	795b      	ldrb	r3, [r3, #5]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006326:	611a      	str	r2, [r3, #16]
 8006328:	e004      	b.n	8006334 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6912      	ldr	r2, [r2, #16]
 8006332:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695a      	ldr	r2, [r3, #20]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	04c11db7 	.word	0x04c11db7

08006374 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006384:	231f      	movs	r3, #31
 8006386:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006388:	bf00      	nop
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1e5a      	subs	r2, r3, #1
 800638e:	613a      	str	r2, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_CRCEx_Polynomial_Set+0x34>
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b18      	cmp	r3, #24
 80063ac:	d846      	bhi.n	800643c <HAL_CRCEx_Polynomial_Set+0xc8>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	08006443 	.word	0x08006443
 80063b8:	0800643d 	.word	0x0800643d
 80063bc:	0800643d 	.word	0x0800643d
 80063c0:	0800643d 	.word	0x0800643d
 80063c4:	0800643d 	.word	0x0800643d
 80063c8:	0800643d 	.word	0x0800643d
 80063cc:	0800643d 	.word	0x0800643d
 80063d0:	0800643d 	.word	0x0800643d
 80063d4:	08006431 	.word	0x08006431
 80063d8:	0800643d 	.word	0x0800643d
 80063dc:	0800643d 	.word	0x0800643d
 80063e0:	0800643d 	.word	0x0800643d
 80063e4:	0800643d 	.word	0x0800643d
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	0800643d 	.word	0x0800643d
 80063f4:	08006425 	.word	0x08006425
 80063f8:	0800643d 	.word	0x0800643d
 80063fc:	0800643d 	.word	0x0800643d
 8006400:	0800643d 	.word	0x0800643d
 8006404:	0800643d 	.word	0x0800643d
 8006408:	0800643d 	.word	0x0800643d
 800640c:	0800643d 	.word	0x0800643d
 8006410:	0800643d 	.word	0x0800643d
 8006414:	08006419 	.word	0x08006419
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b06      	cmp	r3, #6
 800641c:	d913      	bls.n	8006446 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006422:	e010      	b.n	8006446 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b07      	cmp	r3, #7
 8006428:	d90f      	bls.n	800644a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800642e:	e00c      	b.n	800644a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b0f      	cmp	r3, #15
 8006434:	d90b      	bls.n	800644e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800643a:	e008      	b.n	800644e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	e006      	b.n	8006450 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006442:	bf00      	nop
 8006444:	e004      	b.n	8006450 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006446:	bf00      	nop
 8006448:	e002      	b.n	8006450 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800644a:	bf00      	nop
 800644c:	e000      	b.n	8006450 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800644e:	bf00      	nop
  }
  if (status == HAL_OK)
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f023 0118 	bic.w	r1, r3, #24
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
}
 8006474:	4618      	mov	r0, r3
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800648c:	f7ff fb68 	bl	8005b60 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e099      	b.n	80065d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0201 	bic.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064bc:	e00f      	b.n	80064de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064be:	f7ff fb4f 	bl	8005b60 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d908      	bls.n	80064de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2203      	movs	r2, #3
 80064d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e078      	b.n	80065d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e8      	bne.n	80064be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4b38      	ldr	r3, [pc, #224]	; (80065d8 <HAL_DMA_Init+0x158>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800650a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	2b04      	cmp	r3, #4
 8006536:	d107      	bne.n	8006548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	4313      	orrs	r3, r2
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2b04      	cmp	r3, #4
 8006570:	d117      	bne.n	80065a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00e      	beq.n	80065a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f979 	bl	800687c <DMA_CheckFifoParam>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2240      	movs	r2, #64	; 0x40
 8006594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800659e:	2301      	movs	r3, #1
 80065a0:	e016      	b.n	80065d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f930 	bl	8006810 <DMA_CalcBaseAndBitshift>
 80065b0:	4603      	mov	r3, r0
 80065b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	223f      	movs	r2, #63	; 0x3f
 80065ba:	409a      	lsls	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	f010803f 	.word	0xf010803f

080065dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e050      	b.n	8006690 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d101      	bne.n	80065fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
 80065fc:	e048      	b.n	8006690 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2200      	movs	r2, #0
 800661c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2221      	movs	r2, #33	; 0x21
 800663c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8e6 	bl	8006810 <DMA_CalcBaseAndBitshift>
 8006644:	4603      	mov	r3, r0
 8006646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664c:	223f      	movs	r2, #63	; 0x3f
 800664e:	409a      	lsls	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_DMA_Start_IT+0x26>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e048      	b.n	8006750 <HAL_DMA_Start_IT+0xb8>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d137      	bne.n	8006742 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2202      	movs	r2, #2
 80066d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f864 	bl	80067b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f0:	223f      	movs	r2, #63	; 0x3f
 80066f2:	409a      	lsls	r2, r3
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0216 	orr.w	r2, r2, #22
 8006706:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006716:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0208 	orr.w	r2, r2, #8
 800672e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	e005      	b.n	800674e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800674a:	2302      	movs	r3, #2
 800674c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800674e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d004      	beq.n	8006776 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2280      	movs	r2, #128	; 0x80
 8006770:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e00c      	b.n	8006790 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2205      	movs	r2, #5
 800677a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d108      	bne.n	80067f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067f2:	e007      	b.n	8006804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	3b10      	subs	r3, #16
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <DMA_CalcBaseAndBitshift+0x60>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800682a:	4a12      	ldr	r2, [pc, #72]	; (8006874 <DMA_CalcBaseAndBitshift+0x64>)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b03      	cmp	r3, #3
 800683c:	d908      	bls.n	8006850 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <DMA_CalcBaseAndBitshift+0x68>)
 8006846:	4013      	ands	r3, r2
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	659a      	str	r2, [r3, #88]	; 0x58
 800684e:	e006      	b.n	800685e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	4b08      	ldr	r3, [pc, #32]	; (8006878 <DMA_CalcBaseAndBitshift+0x68>)
 8006858:	4013      	ands	r3, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	aaaaaaab 	.word	0xaaaaaaab
 8006874:	08014494 	.word	0x08014494
 8006878:	fffffc00 	.word	0xfffffc00

0800687c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11f      	bne.n	80068d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d856      	bhi.n	800694a <DMA_CheckFifoParam+0xce>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <DMA_CheckFifoParam+0x28>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c7 	.word	0x080068c7
 80068ac:	080068b5 	.word	0x080068b5
 80068b0:	0800694b 	.word	0x0800694b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d046      	beq.n	800694e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c4:	e043      	b.n	800694e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068ce:	d140      	bne.n	8006952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d4:	e03d      	b.n	8006952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068de:	d121      	bne.n	8006924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d837      	bhi.n	8006956 <DMA_CheckFifoParam+0xda>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <DMA_CheckFifoParam+0x70>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	08006903 	.word	0x08006903
 80068f4:	080068fd 	.word	0x080068fd
 80068f8:	08006915 	.word	0x08006915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006900:	e030      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d025      	beq.n	800695a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006912:	e022      	b.n	800695a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800691c:	d11f      	bne.n	800695e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006922:	e01c      	b.n	800695e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d903      	bls.n	8006932 <DMA_CheckFifoParam+0xb6>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d003      	beq.n	8006938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006930:	e018      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]
      break;
 8006936:	e015      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e00b      	b.n	8006962 <DMA_CheckFifoParam+0xe6>
      break;
 800694a:	bf00      	nop
 800694c:	e00a      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 800694e:	bf00      	nop
 8006950:	e008      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006952:	bf00      	nop
 8006954:	e006      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006956:	bf00      	nop
 8006958:	e004      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 800695a:	bf00      	nop
 800695c:	e002      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;   
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006962:	bf00      	nop
    }
  } 
  
  return status; 
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop

08006974 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e039      	b.n	80069fa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fc f8ea 	bl	8002b74 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c4:	f023 0107 	bic.w	r1, r3, #7
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069da:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <HAL_DMA2D_Init+0x90>)
 80069dc:	4013      	ands	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68d1      	ldr	r1, [r2, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	430b      	orrs	r3, r1
 80069e8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	ffffc000 	.word	0xffffc000

08006a08 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_DMA2D_Start+0x1c>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e018      	b.n	8006a56 <HAL_DMA2D_Start+0x4e>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 f988 	bl	8006d54 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d056      	beq.n	8006b28 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a7a:	f7ff f871 	bl	8005b60 <HAL_GetTick>
 8006a7e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a80:	e04b      	b.n	8006b1a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d023      	beq.n	8006adc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa2:	f043 0202 	orr.w	r2, r3, #2
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	f043 0201 	orr.w	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2204      	movs	r2, #4
 8006acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0a5      	b.n	8006c28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ae2:	d01a      	beq.n	8006b1a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ae4:	f7ff f83c 	bl	8005b60 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d302      	bcc.n	8006afa <HAL_DMA2D_PollForTransfer+0x9c>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10f      	bne.n	8006b1a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2203      	movs	r2, #3
 8006b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e086      	b.n	8006c28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0ac      	beq.n	8006a82 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d061      	beq.n	8006c0e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b4a:	f7ff f809 	bl	8005b60 <HAL_GetTick>
 8006b4e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b50:	e056      	b.n	8006c00 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02e      	beq.n	8006bc2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	f043 0204 	orr.w	r2, r3, #4
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	f043 0202 	orr.w	r2, r3, #2
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	f043 0201 	orr.w	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2229      	movs	r2, #41	; 0x29
 8006bac:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e032      	b.n	8006c28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc8:	d01a      	beq.n	8006c00 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bca:	f7fe ffc9 	bl	8005b60 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <HAL_DMA2D_PollForTransfer+0x182>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10f      	bne.n	8006c00 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be4:	f043 0220 	orr.w	r2, r3, #32
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2203      	movs	r2, #3
 8006bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e013      	b.n	8006c28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0a1      	beq.n	8006b52 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2212      	movs	r2, #18
 8006c14:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_DMA2D_ConfigLayer+0x20>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e079      	b.n	8006d44 <HAL_DMA2D_ConfigLayer+0x114>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	3318      	adds	r3, #24
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006c7a:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <HAL_DMA2D_ConfigLayer+0x120>)
 8006c7c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b0a      	cmp	r3, #10
 8006c84:	d003      	beq.n	8006c8e <HAL_DMA2D_ConfigLayer+0x5e>
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d107      	bne.n	8006c9e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	e005      	b.n	8006caa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	061b      	lsls	r3, r3, #24
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d120      	bne.n	8006cf2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	ea02 0103 	and.w	r1, r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b0a      	cmp	r3, #10
 8006cd8:	d003      	beq.n	8006ce2 <HAL_DMA2D_ConfigLayer+0xb2>
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b09      	cmp	r3, #9
 8006ce0:	d127      	bne.n	8006d32 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28
 8006cf0:	e01f      	b.n	8006d32 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69da      	ldr	r2, [r3, #28]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	ea02 0103 	and.w	r1, r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b0a      	cmp	r3, #10
 8006d1a:	d003      	beq.n	8006d24 <HAL_DMA2D_ConfigLayer+0xf4>
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b09      	cmp	r3, #9
 8006d22:	d106      	bne.n	8006d32 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006d30:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	371c      	adds	r7, #28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	ff03000f 	.word	0xff03000f

08006d54 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b08b      	sub	sp, #44	; 0x2c
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d68:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	041a      	lsls	r2, r3, #16
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	431a      	orrs	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d8c:	d174      	bne.n	8006e78 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d94:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d9c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006da4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d108      	bne.n	8006dc6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc4:	e053      	b.n	8006e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d106      	bne.n	8006ddc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dda:	e048      	b.n	8006e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d111      	bne.n	8006e08 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	0cdb      	lsrs	r3, r3, #19
 8006de8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	0a9b      	lsrs	r3, r3, #10
 8006dee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	08db      	lsrs	r3, r3, #3
 8006df4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	02db      	lsls	r3, r3, #11
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
 8006e06:	e032      	b.n	8006e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d117      	bne.n	8006e40 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	0fdb      	lsrs	r3, r3, #31
 8006e14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	0cdb      	lsrs	r3, r3, #19
 8006e1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	0adb      	lsrs	r3, r3, #11
 8006e20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	08db      	lsrs	r3, r3, #3
 8006e26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	029b      	lsls	r3, r3, #10
 8006e30:	431a      	orrs	r2, r3
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	03db      	lsls	r3, r3, #15
 8006e36:	4313      	orrs	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	e016      	b.n	8006e6e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	0f1b      	lsrs	r3, r3, #28
 8006e44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	0d1b      	lsrs	r3, r3, #20
 8006e4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	0b1b      	lsrs	r3, r3, #12
 8006e50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	091b      	lsrs	r3, r3, #4
 8006e56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	011a      	lsls	r2, r3, #4
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	431a      	orrs	r2, r3
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	031b      	lsls	r3, r3, #12
 8006e66:	4313      	orrs	r3, r2
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006e76:	e003      	b.n	8006e80 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	60da      	str	r2, [r3, #12]
}
 8006e80:	bf00      	nop
 8006e82:	372c      	adds	r7, #44	; 0x2c
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e06a      	b.n	8006f74 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2223      	movs	r2, #35	; 0x23
 8006eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7fb fe7f 	bl	8002bb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eb6:	4b31      	ldr	r3, [pc, #196]	; (8006f7c <HAL_ETH_Init+0xf0>)
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eba:	4a30      	ldr	r2, [pc, #192]	; (8006f7c <HAL_ETH_Init+0xf0>)
 8006ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ec2:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <HAL_ETH_Init+0xf0>)
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eca:	60bb      	str	r3, [r7, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006ece:	4b2c      	ldr	r3, [pc, #176]	; (8006f80 <HAL_ETH_Init+0xf4>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4a2b      	ldr	r2, [pc, #172]	; (8006f80 <HAL_ETH_Init+0xf4>)
 8006ed4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ed8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006eda:	4b29      	ldr	r3, [pc, #164]	; (8006f80 <HAL_ETH_Init+0xf4>)
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	4927      	ldr	r1, [pc, #156]	; (8006f80 <HAL_ETH_Init+0xf4>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <HAL_ETH_Init+0xf4>)
 8006eea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6812      	ldr	r2, [r2, #0]
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f04:	f7fe fe2c 	bl	8005b60 <HAL_GetTick>
 8006f08:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006f0a:	e011      	b.n	8006f30 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006f0c:	f7fe fe28 	bl	8005b60 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006f1a:	d909      	bls.n	8006f30 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	22e0      	movs	r2, #224	; 0xe0
 8006f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e021      	b.n	8006f74 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e4      	bne.n	8006f0c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f958 	bl	80071f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f9ff 	bl	800734c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fa55 	bl	80073fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f9bd 	bl	80072dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	40013800 	.word	0x40013800

08006f84 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4b51      	ldr	r3, [pc, #324]	; (80070e0 <ETH_SetMACConfig+0x15c>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	7c1b      	ldrb	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <ETH_SetMACConfig+0x28>
 8006fa6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006faa:	e000      	b.n	8006fae <ETH_SetMACConfig+0x2a>
 8006fac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	7c5b      	ldrb	r3, [r3, #17]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <ETH_SetMACConfig+0x38>
 8006fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006fba:	e000      	b.n	8006fbe <ETH_SetMACConfig+0x3a>
 8006fbc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006fbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006fc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	7fdb      	ldrb	r3, [r3, #31]
 8006fca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006fcc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006fd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	7f92      	ldrb	r2, [r2, #30]
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	d102      	bne.n	8006fe2 <ETH_SetMACConfig+0x5e>
 8006fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fe0:	e000      	b.n	8006fe4 <ETH_SetMACConfig+0x60>
 8006fe2:	2200      	movs	r2, #0
                        macconf->Speed |
 8006fe4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	7f1b      	ldrb	r3, [r3, #28]
 8006fea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006fec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006ff2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	791b      	ldrb	r3, [r3, #4]
 8006ff8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006ffa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007002:	2a00      	cmp	r2, #0
 8007004:	d102      	bne.n	800700c <ETH_SetMACConfig+0x88>
 8007006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700a:	e000      	b.n	800700e <ETH_SetMACConfig+0x8a>
 800700c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800700e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	7bdb      	ldrb	r3, [r3, #15]
 8007014:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007016:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800701c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007024:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007026:	4313      	orrs	r3, r2
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800703e:	2001      	movs	r0, #1
 8007040:	f7fe fd9a 	bl	8005b78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	f64f 7341 	movw	r3, #65345	; 0xff41
 800705a:	4013      	ands	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007062:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800706a:	2a00      	cmp	r2, #0
 800706c:	d101      	bne.n	8007072 <ETH_SetMACConfig+0xee>
 800706e:	2280      	movs	r2, #128	; 0x80
 8007070:	e000      	b.n	8007074 <ETH_SetMACConfig+0xf0>
 8007072:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007074:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800707a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8007082:	2a01      	cmp	r2, #1
 8007084:	d101      	bne.n	800708a <ETH_SetMACConfig+0x106>
 8007086:	2208      	movs	r2, #8
 8007088:	e000      	b.n	800708c <ETH_SetMACConfig+0x108>
 800708a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800708c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8007094:	2a01      	cmp	r2, #1
 8007096:	d101      	bne.n	800709c <ETH_SetMACConfig+0x118>
 8007098:	2204      	movs	r2, #4
 800709a:	e000      	b.n	800709e <ETH_SetMACConfig+0x11a>
 800709c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800709e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80070a6:	2a01      	cmp	r2, #1
 80070a8:	d101      	bne.n	80070ae <ETH_SetMACConfig+0x12a>
 80070aa:	2202      	movs	r2, #2
 80070ac:	e000      	b.n	80070b0 <ETH_SetMACConfig+0x12c>
 80070ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80070b0:	4313      	orrs	r3, r2
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80070c8:	2001      	movs	r0, #1
 80070ca:	f7fe fd55 	bl	8005b78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	619a      	str	r2, [r3, #24]
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	ff20810f 	.word	0xff20810f

080070e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4b3d      	ldr	r3, [pc, #244]	; (80071f4 <ETH_SetDMAConfig+0x110>)
 80070fe:	4013      	ands	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	7b1b      	ldrb	r3, [r3, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <ETH_SetDMAConfig+0x2c>
 800710a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800710e:	e000      	b.n	8007112 <ETH_SetDMAConfig+0x2e>
 8007110:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	7b5b      	ldrb	r3, [r3, #13]
 8007116:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007118:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	7f52      	ldrb	r2, [r2, #29]
 800711e:	2a00      	cmp	r2, #0
 8007120:	d102      	bne.n	8007128 <ETH_SetDMAConfig+0x44>
 8007122:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007126:	e000      	b.n	800712a <ETH_SetDMAConfig+0x46>
 8007128:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800712a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	7b9b      	ldrb	r3, [r3, #14]
 8007130:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007132:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007138:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	7f1b      	ldrb	r3, [r3, #28]
 800713e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007140:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	7f9b      	ldrb	r3, [r3, #30]
 8007146:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007148:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800714e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007156:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007158:	4313      	orrs	r3, r2
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007168:	461a      	mov	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800717a:	2001      	movs	r0, #1
 800717c:	f7fe fcfc 	bl	8005b78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007188:	461a      	mov	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	791b      	ldrb	r3, [r3, #4]
 8007192:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007198:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800719e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80071a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80071ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80071ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80071b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80071bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6812      	ldr	r2, [r2, #0]
 80071c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80071d8:	2001      	movs	r0, #1
 80071da:	f7fe fccd 	bl	8005b78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	461a      	mov	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6013      	str	r3, [r2, #0]
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	f8de3f23 	.word	0xf8de3f23

080071f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b0a6      	sub	sp, #152	; 0x98
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007200:	2301      	movs	r3, #1
 8007202:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800720c:	2300      	movs	r3, #0
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007210:	2300      	movs	r3, #0
 8007212:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800721c:	2300      	movs	r3, #0
 800721e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800722e:	2300      	movs	r3, #0
 8007230:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007234:	2300      	movs	r3, #0
 8007236:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007238:	2300      	movs	r3, #0
 800723a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800723e:	2300      	movs	r3, #0
 8007240:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007242:	2300      	movs	r3, #0
 8007244:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007248:	2300      	movs	r3, #0
 800724a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800724e:	2300      	movs	r3, #0
 8007250:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007254:	2300      	movs	r3, #0
 8007256:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800725a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800725e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007264:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007266:	2300      	movs	r3, #0
 8007268:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800726c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff fe86 	bl	8006f84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007278:	2301      	movs	r3, #1
 800727a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800727c:	2301      	movs	r3, #1
 800727e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007286:	2301      	movs	r3, #1
 8007288:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800728e:	2300      	movs	r3, #0
 8007290:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007294:	2300      	movs	r3, #0
 8007296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800729a:	2300      	movs	r3, #0
 800729c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80072a4:	2301      	movs	r3, #1
 80072a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80072a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80072ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80072b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ff08 	bl	80070e4 <ETH_SetDMAConfig>
}
 80072d4:	bf00      	nop
 80072d6:	3798      	adds	r7, #152	; 0x98
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3305      	adds	r3, #5
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	3204      	adds	r2, #4
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	4b11      	ldr	r3, [pc, #68]	; (8007344 <ETH_MACAddressConfig+0x68>)
 80072fe:	4413      	add	r3, r2
 8007300:	461a      	mov	r2, r3
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3303      	adds	r3, #3
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	061a      	lsls	r2, r3, #24
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3302      	adds	r3, #2
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3301      	adds	r3, #1
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	4313      	orrs	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	7812      	ldrb	r2, [r2, #0]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <ETH_MACAddressConfig+0x6c>)
 800732e:	4413      	add	r3, r2
 8007330:	461a      	mov	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	6013      	str	r3, [r2, #0]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40028040 	.word	0x40028040
 8007348:	40028044 	.word	0x40028044

0800734c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e03e      	b.n	80073d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68d9      	ldr	r1, [r3, #12]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	440b      	add	r3, r1
 800736a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2200      	movs	r2, #0
 8007376:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	3206      	adds	r2, #6
 800738c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d80c      	bhi.n	80073bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68d9      	ldr	r1, [r3, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	440b      	add	r3, r1
 80073b4:	461a      	mov	r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	e004      	b.n	80073c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	461a      	mov	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d9bd      	bls.n	800735a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f0:	611a      	str	r2, [r3, #16]
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e046      	b.n	800749a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6919      	ldr	r1, [r3, #16]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	440b      	add	r3, r1
 800741c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2200      	movs	r2, #0
 800743a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2200      	movs	r2, #0
 8007440:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007448:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8007450:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	3212      	adds	r2, #18
 8007466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d80c      	bhi.n	800748a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6919      	ldr	r1, [r3, #16]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	4613      	mov	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	440b      	add	r3, r1
 8007482:	461a      	mov	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	60da      	str	r2, [r3, #12]
 8007488:	e004      	b.n	8007494 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	461a      	mov	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b03      	cmp	r3, #3
 800749e:	d9b5      	bls.n	800740c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ca:	60da      	str	r2, [r3, #12]
}
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80074ea:	2300      	movs	r3, #0
 80074ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	e175      	b.n	80077e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80074f8:	2201      	movs	r2, #1
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4013      	ands	r3, r2
 800750a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	429a      	cmp	r2, r3
 8007512:	f040 8164 	bne.w	80077de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b01      	cmp	r3, #1
 8007520:	d005      	beq.n	800752e <HAL_GPIO_Init+0x56>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d130      	bne.n	8007590 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	2203      	movs	r2, #3
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43db      	mvns	r3, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	4013      	ands	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007564:	2201      	movs	r2, #1
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	43db      	mvns	r3, r3
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	4013      	ands	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	091b      	lsrs	r3, r3, #4
 800757a:	f003 0201 	and.w	r2, r3, #1
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4313      	orrs	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f003 0303 	and.w	r3, r3, #3
 8007598:	2b03      	cmp	r3, #3
 800759a:	d017      	beq.n	80075cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	2203      	movs	r2, #3
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	43db      	mvns	r3, r3
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	4013      	ands	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	fa02 f303 	lsl.w	r3, r2, r3
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d123      	bne.n	8007620 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	08da      	lsrs	r2, r3, #3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3208      	adds	r2, #8
 80075e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	220f      	movs	r2, #15
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	43db      	mvns	r3, r3
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	4013      	ands	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	4313      	orrs	r3, r2
 8007610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	08da      	lsrs	r2, r3, #3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3208      	adds	r2, #8
 800761a:	69b9      	ldr	r1, [r7, #24]
 800761c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	2203      	movs	r2, #3
 800762c:	fa02 f303 	lsl.w	r3, r2, r3
 8007630:	43db      	mvns	r3, r3
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	4013      	ands	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 0203 	and.w	r2, r3, #3
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	fa02 f303 	lsl.w	r3, r2, r3
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	4313      	orrs	r3, r2
 800764c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80be 	beq.w	80077de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007662:	4b66      	ldr	r3, [pc, #408]	; (80077fc <HAL_GPIO_Init+0x324>)
 8007664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007666:	4a65      	ldr	r2, [pc, #404]	; (80077fc <HAL_GPIO_Init+0x324>)
 8007668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800766c:	6453      	str	r3, [r2, #68]	; 0x44
 800766e:	4b63      	ldr	r3, [pc, #396]	; (80077fc <HAL_GPIO_Init+0x324>)
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800767a:	4a61      	ldr	r2, [pc, #388]	; (8007800 <HAL_GPIO_Init+0x328>)
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	089b      	lsrs	r3, r3, #2
 8007680:	3302      	adds	r3, #2
 8007682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007686:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	220f      	movs	r2, #15
 8007692:	fa02 f303 	lsl.w	r3, r2, r3
 8007696:	43db      	mvns	r3, r3
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	4013      	ands	r3, r2
 800769c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a58      	ldr	r2, [pc, #352]	; (8007804 <HAL_GPIO_Init+0x32c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d037      	beq.n	8007716 <HAL_GPIO_Init+0x23e>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a57      	ldr	r2, [pc, #348]	; (8007808 <HAL_GPIO_Init+0x330>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d031      	beq.n	8007712 <HAL_GPIO_Init+0x23a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a56      	ldr	r2, [pc, #344]	; (800780c <HAL_GPIO_Init+0x334>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d02b      	beq.n	800770e <HAL_GPIO_Init+0x236>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a55      	ldr	r2, [pc, #340]	; (8007810 <HAL_GPIO_Init+0x338>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d025      	beq.n	800770a <HAL_GPIO_Init+0x232>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a54      	ldr	r2, [pc, #336]	; (8007814 <HAL_GPIO_Init+0x33c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01f      	beq.n	8007706 <HAL_GPIO_Init+0x22e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a53      	ldr	r2, [pc, #332]	; (8007818 <HAL_GPIO_Init+0x340>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d019      	beq.n	8007702 <HAL_GPIO_Init+0x22a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a52      	ldr	r2, [pc, #328]	; (800781c <HAL_GPIO_Init+0x344>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d013      	beq.n	80076fe <HAL_GPIO_Init+0x226>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a51      	ldr	r2, [pc, #324]	; (8007820 <HAL_GPIO_Init+0x348>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00d      	beq.n	80076fa <HAL_GPIO_Init+0x222>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a50      	ldr	r2, [pc, #320]	; (8007824 <HAL_GPIO_Init+0x34c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d007      	beq.n	80076f6 <HAL_GPIO_Init+0x21e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a4f      	ldr	r2, [pc, #316]	; (8007828 <HAL_GPIO_Init+0x350>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d101      	bne.n	80076f2 <HAL_GPIO_Init+0x21a>
 80076ee:	2309      	movs	r3, #9
 80076f0:	e012      	b.n	8007718 <HAL_GPIO_Init+0x240>
 80076f2:	230a      	movs	r3, #10
 80076f4:	e010      	b.n	8007718 <HAL_GPIO_Init+0x240>
 80076f6:	2308      	movs	r3, #8
 80076f8:	e00e      	b.n	8007718 <HAL_GPIO_Init+0x240>
 80076fa:	2307      	movs	r3, #7
 80076fc:	e00c      	b.n	8007718 <HAL_GPIO_Init+0x240>
 80076fe:	2306      	movs	r3, #6
 8007700:	e00a      	b.n	8007718 <HAL_GPIO_Init+0x240>
 8007702:	2305      	movs	r3, #5
 8007704:	e008      	b.n	8007718 <HAL_GPIO_Init+0x240>
 8007706:	2304      	movs	r3, #4
 8007708:	e006      	b.n	8007718 <HAL_GPIO_Init+0x240>
 800770a:	2303      	movs	r3, #3
 800770c:	e004      	b.n	8007718 <HAL_GPIO_Init+0x240>
 800770e:	2302      	movs	r3, #2
 8007710:	e002      	b.n	8007718 <HAL_GPIO_Init+0x240>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <HAL_GPIO_Init+0x240>
 8007716:	2300      	movs	r3, #0
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	f002 0203 	and.w	r2, r2, #3
 800771e:	0092      	lsls	r2, r2, #2
 8007720:	4093      	lsls	r3, r2
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	4313      	orrs	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007728:	4935      	ldr	r1, [pc, #212]	; (8007800 <HAL_GPIO_Init+0x328>)
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	089b      	lsrs	r3, r3, #2
 800772e:	3302      	adds	r3, #2
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007736:	4b3d      	ldr	r3, [pc, #244]	; (800782c <HAL_GPIO_Init+0x354>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	43db      	mvns	r3, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4013      	ands	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	4313      	orrs	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800775a:	4a34      	ldr	r2, [pc, #208]	; (800782c <HAL_GPIO_Init+0x354>)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007760:	4b32      	ldr	r3, [pc, #200]	; (800782c <HAL_GPIO_Init+0x354>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	43db      	mvns	r3, r3
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	4013      	ands	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007784:	4a29      	ldr	r2, [pc, #164]	; (800782c <HAL_GPIO_Init+0x354>)
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800778a:	4b28      	ldr	r3, [pc, #160]	; (800782c <HAL_GPIO_Init+0x354>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	43db      	mvns	r3, r3
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	4013      	ands	r3, r2
 8007798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077ae:	4a1f      	ldr	r2, [pc, #124]	; (800782c <HAL_GPIO_Init+0x354>)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077b4:	4b1d      	ldr	r3, [pc, #116]	; (800782c <HAL_GPIO_Init+0x354>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	43db      	mvns	r3, r3
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	4013      	ands	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077d8:	4a14      	ldr	r2, [pc, #80]	; (800782c <HAL_GPIO_Init+0x354>)
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	3301      	adds	r3, #1
 80077e2:	61fb      	str	r3, [r7, #28]
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	f67f ae86 	bls.w	80074f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	3724      	adds	r7, #36	; 0x24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40023800 	.word	0x40023800
 8007800:	40013800 	.word	0x40013800
 8007804:	40020000 	.word	0x40020000
 8007808:	40020400 	.word	0x40020400
 800780c:	40020800 	.word	0x40020800
 8007810:	40020c00 	.word	0x40020c00
 8007814:	40021000 	.word	0x40021000
 8007818:	40021400 	.word	0x40021400
 800781c:	40021800 	.word	0x40021800
 8007820:	40021c00 	.word	0x40021c00
 8007824:	40022000 	.word	0x40022000
 8007828:	40022400 	.word	0x40022400
 800782c:	40013c00 	.word	0x40013c00

08007830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	887b      	ldrh	r3, [r7, #2]
 8007842:	4013      	ands	r3, r2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007848:	2301      	movs	r3, #1
 800784a:	73fb      	strb	r3, [r7, #15]
 800784c:	e001      	b.n	8007852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007852:	7bfb      	ldrb	r3, [r7, #15]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	807b      	strh	r3, [r7, #2]
 800786c:	4613      	mov	r3, r2
 800786e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007870:	787b      	ldrb	r3, [r7, #1]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007876:	887a      	ldrh	r2, [r7, #2]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800787c:	e003      	b.n	8007886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800787e:	887b      	ldrh	r3, [r7, #2]
 8007880:	041a      	lsls	r2, r3, #16
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	619a      	str	r2, [r3, #24]
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
	...

08007894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800789e:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078a0:	695a      	ldr	r2, [r3, #20]
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	4013      	ands	r3, r2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d006      	beq.n	80078b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80078aa:	4a05      	ldr	r2, [pc, #20]	; (80078c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078ac:	88fb      	ldrh	r3, [r7, #6]
 80078ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f806 	bl	80078c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	40013c00 	.word	0x40013c00

080078c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e07f      	b.n	80079ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fb f9ee 	bl	8002ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2224      	movs	r2, #36	; 0x24
 800790c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0201 	bic.w	r2, r2, #1
 800791e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800792c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800793c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d107      	bne.n	8007956 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	e006      	b.n	8007964 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007962:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d104      	bne.n	8007976 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <HAL_I2C_Init+0x11c>)
 8007982:	430b      	orrs	r3, r1
 8007984:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007994:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69d9      	ldr	r1, [r3, #28]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1a      	ldr	r2, [r3, #32]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	02008000 	.word	0x02008000

080079fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	d138      	bne.n	8007a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e032      	b.n	8007a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2224      	movs	r2, #36	; 0x24
 8007a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6819      	ldr	r1, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0201 	orr.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	e000      	b.n	8007a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a84:	2302      	movs	r3, #2
  }
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b085      	sub	sp, #20
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d139      	bne.n	8007b1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e033      	b.n	8007b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2224      	movs	r2, #36	; 0x24
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0201 	bic.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ae4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e000      	b.n	8007b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b1c:	2302      	movs	r3, #2
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
	...

08007b2c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e0bf      	b.n	8007cbe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fb f96e 	bl	8002e34 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699a      	ldr	r2, [r3, #24]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007b6e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6999      	ldr	r1, [r3, #24]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b84:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6899      	ldr	r1, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b4a      	ldr	r3, [pc, #296]	; (8007cc8 <HAL_LTDC_Init+0x19c>)
 8007ba0:	400b      	ands	r3, r1
 8007ba2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6899      	ldr	r1, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68d9      	ldr	r1, [r3, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	4b3e      	ldr	r3, [pc, #248]	; (8007cc8 <HAL_LTDC_Init+0x19c>)
 8007bce:	400b      	ands	r3, r1
 8007bd0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68d9      	ldr	r1, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1a      	ldr	r2, [r3, #32]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6919      	ldr	r1, [r3, #16]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b33      	ldr	r3, [pc, #204]	; (8007cc8 <HAL_LTDC_Init+0x19c>)
 8007bfc:	400b      	ands	r3, r1
 8007bfe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	041b      	lsls	r3, r3, #16
 8007c06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6919      	ldr	r1, [r3, #16]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6959      	ldr	r1, [r3, #20]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4b27      	ldr	r3, [pc, #156]	; (8007cc8 <HAL_LTDC_Init+0x19c>)
 8007c2a:	400b      	ands	r3, r1
 8007c2c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6959      	ldr	r1, [r3, #20]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0206 	orr.w	r2, r2, #6
 8007c9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	f000f800 	.word	0xf000f800

08007ccc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007ccc:	b5b0      	push	{r4, r5, r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_LTDC_ConfigLayer+0x1a>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e02c      	b.n	8007d40 <HAL_LTDC_ConfigLayer+0x74>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2134      	movs	r1, #52	; 0x34
 8007cfc:	fb01 f303 	mul.w	r3, r1, r3
 8007d00:	4413      	add	r3, r2
 8007d02:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	4614      	mov	r4, r2
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f81f 	bl	8007d64 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bdb0      	pop	{r4, r5, r7, pc}

08007d48 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007d56:	b2db      	uxtb	r3, r3
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b089      	sub	sp, #36	; 0x24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	0c1b      	lsrs	r3, r3, #16
 8007d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d80:	4413      	add	r3, r2
 8007d82:	041b      	lsls	r3, r3, #16
 8007d84:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	01db      	lsls	r3, r3, #7
 8007d90:	4413      	add	r3, r2
 8007d92:	3384      	adds	r3, #132	; 0x84
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	01d2      	lsls	r2, r2, #7
 8007da0:	440a      	add	r2, r1
 8007da2:	3284      	adds	r2, #132	; 0x84
 8007da4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007da8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	0c1b      	lsrs	r3, r3, #16
 8007db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dba:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007dbc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	01db      	lsls	r3, r3, #7
 8007dc8:	440b      	add	r3, r1
 8007dca:	3384      	adds	r3, #132	; 0x84
 8007dcc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dd2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007de2:	4413      	add	r3, r2
 8007de4:	041b      	lsls	r3, r3, #16
 8007de6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	01db      	lsls	r3, r3, #7
 8007df2:	4413      	add	r3, r2
 8007df4:	3384      	adds	r3, #132	; 0x84
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	6812      	ldr	r2, [r2, #0]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	01d2      	lsls	r2, r2, #7
 8007e02:	440a      	add	r2, r1
 8007e04:	3284      	adds	r2, #132	; 0x84
 8007e06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e1a:	4413      	add	r3, r2
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4619      	mov	r1, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	01db      	lsls	r3, r3, #7
 8007e28:	440b      	add	r3, r1
 8007e2a:	3384      	adds	r3, #132	; 0x84
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	01db      	lsls	r3, r3, #7
 8007e3e:	4413      	add	r3, r2
 8007e40:	3384      	adds	r3, #132	; 0x84
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	01d2      	lsls	r2, r2, #7
 8007e4e:	440a      	add	r2, r1
 8007e50:	3284      	adds	r2, #132	; 0x84
 8007e52:	f023 0307 	bic.w	r3, r3, #7
 8007e56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	01db      	lsls	r3, r3, #7
 8007e62:	4413      	add	r3, r2
 8007e64:	3384      	adds	r3, #132	; 0x84
 8007e66:	461a      	mov	r2, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007e7e:	041b      	lsls	r3, r3, #16
 8007e80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	061b      	lsls	r3, r3, #24
 8007e88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	01db      	lsls	r3, r3, #7
 8007e94:	4413      	add	r3, r2
 8007e96:	3384      	adds	r3, #132	; 0x84
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	01db      	lsls	r3, r3, #7
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3384      	adds	r3, #132	; 0x84
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	01db      	lsls	r3, r3, #7
 8007ec8:	440b      	add	r3, r1
 8007eca:	3384      	adds	r3, #132	; 0x84
 8007ecc:	4619      	mov	r1, r3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	01db      	lsls	r3, r3, #7
 8007ede:	4413      	add	r3, r2
 8007ee0:	3384      	adds	r3, #132	; 0x84
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	01d2      	lsls	r2, r2, #7
 8007eee:	440a      	add	r2, r1
 8007ef0:	3284      	adds	r2, #132	; 0x84
 8007ef2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ef6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	01db      	lsls	r3, r3, #7
 8007f02:	4413      	add	r3, r2
 8007f04:	3384      	adds	r3, #132	; 0x84
 8007f06:	461a      	mov	r2, r3
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	01db      	lsls	r3, r3, #7
 8007f18:	4413      	add	r3, r2
 8007f1a:	3384      	adds	r3, #132	; 0x84
 8007f1c:	69da      	ldr	r2, [r3, #28]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4619      	mov	r1, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	01db      	lsls	r3, r3, #7
 8007f28:	440b      	add	r3, r1
 8007f2a:	3384      	adds	r3, #132	; 0x84
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4b58      	ldr	r3, [pc, #352]	; (8008090 <LTDC_SetConfig+0x32c>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	68f9      	ldr	r1, [r7, #12]
 8007f3e:	6809      	ldr	r1, [r1, #0]
 8007f40:	4608      	mov	r0, r1
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	01c9      	lsls	r1, r1, #7
 8007f46:	4401      	add	r1, r0
 8007f48:	3184      	adds	r1, #132	; 0x84
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	01db      	lsls	r3, r3, #7
 8007f58:	4413      	add	r3, r2
 8007f5a:	3384      	adds	r3, #132	; 0x84
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	01db      	lsls	r3, r3, #7
 8007f68:	4413      	add	r3, r2
 8007f6a:	3384      	adds	r3, #132	; 0x84
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	01db      	lsls	r3, r3, #7
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3384      	adds	r3, #132	; 0x84
 8007f80:	461a      	mov	r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007f90:	2304      	movs	r3, #4
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	e01b      	b.n	8007fce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d102      	bne.n	8007fa4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	61fb      	str	r3, [r7, #28]
 8007fa2:	e014      	b.n	8007fce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d00b      	beq.n	8007fc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d007      	beq.n	8007fc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d003      	beq.n	8007fc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007fc0:	2b07      	cmp	r3, #7
 8007fc2:	d102      	bne.n	8007fca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	e001      	b.n	8007fce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	01db      	lsls	r3, r3, #7
 8007fd8:	4413      	add	r3, r2
 8007fda:	3384      	adds	r3, #132	; 0x84
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	01d2      	lsls	r2, r2, #7
 8007fe8:	440a      	add	r2, r1
 8007fea:	3284      	adds	r2, #132	; 0x84
 8007fec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007ff0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	fb02 f303 	mul.w	r3, r2, r3
 8007ffc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	6859      	ldr	r1, [r3, #4]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	1acb      	subs	r3, r1, r3
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	fb01 f303 	mul.w	r3, r1, r3
 800800e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008010:	68f9      	ldr	r1, [r7, #12]
 8008012:	6809      	ldr	r1, [r1, #0]
 8008014:	4608      	mov	r0, r1
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	01c9      	lsls	r1, r1, #7
 800801a:	4401      	add	r1, r0
 800801c:	3184      	adds	r1, #132	; 0x84
 800801e:	4313      	orrs	r3, r2
 8008020:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	01db      	lsls	r3, r3, #7
 800802c:	4413      	add	r3, r2
 800802e:	3384      	adds	r3, #132	; 0x84
 8008030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4619      	mov	r1, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	01db      	lsls	r3, r3, #7
 800803c:	440b      	add	r3, r1
 800803e:	3384      	adds	r3, #132	; 0x84
 8008040:	4619      	mov	r1, r3
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <LTDC_SetConfig+0x330>)
 8008044:	4013      	ands	r3, r2
 8008046:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	01db      	lsls	r3, r3, #7
 8008052:	4413      	add	r3, r2
 8008054:	3384      	adds	r3, #132	; 0x84
 8008056:	461a      	mov	r2, r3
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	01db      	lsls	r3, r3, #7
 8008068:	4413      	add	r3, r2
 800806a:	3384      	adds	r3, #132	; 0x84
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	6812      	ldr	r2, [r2, #0]
 8008072:	4611      	mov	r1, r2
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	01d2      	lsls	r2, r2, #7
 8008078:	440a      	add	r2, r1
 800807a:	3284      	adds	r2, #132	; 0x84
 800807c:	f043 0301 	orr.w	r3, r3, #1
 8008080:	6013      	str	r3, [r2, #0]
}
 8008082:	bf00      	nop
 8008084:	3724      	adds	r7, #36	; 0x24
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	fffff8f8 	.word	0xfffff8f8
 8008094:	fffff800 	.word	0xfffff800

08008098 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a04      	ldr	r2, [pc, #16]	; (80080b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a6:	6013      	str	r3, [r2, #0]
}
 80080a8:	bf00      	nop
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40007000 	.word	0x40007000

080080b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80080c2:	4b23      	ldr	r3, [pc, #140]	; (8008150 <HAL_PWREx_EnableOverDrive+0x98>)
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	4a22      	ldr	r2, [pc, #136]	; (8008150 <HAL_PWREx_EnableOverDrive+0x98>)
 80080c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080cc:	6413      	str	r3, [r2, #64]	; 0x40
 80080ce:	4b20      	ldr	r3, [pc, #128]	; (8008150 <HAL_PWREx_EnableOverDrive+0x98>)
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80080da:	4b1e      	ldr	r3, [pc, #120]	; (8008154 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080e6:	f7fd fd3b 	bl	8005b60 <HAL_GetTick>
 80080ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080ec:	e009      	b.n	8008102 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080ee:	f7fd fd37 	bl	8005b60 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080fc:	d901      	bls.n	8008102 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e022      	b.n	8008148 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008102:	4b14      	ldr	r3, [pc, #80]	; (8008154 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800810a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800810e:	d1ee      	bne.n	80080ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008110:	4b10      	ldr	r3, [pc, #64]	; (8008154 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a0f      	ldr	r2, [pc, #60]	; (8008154 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800811a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800811c:	f7fd fd20 	bl	8005b60 <HAL_GetTick>
 8008120:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008122:	e009      	b.n	8008138 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008124:	f7fd fd1c 	bl	8005b60 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008132:	d901      	bls.n	8008138 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e007      	b.n	8008148 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_PWREx_EnableOverDrive+0x9c>)
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008144:	d1ee      	bne.n	8008124 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40023800 	.word	0x40023800
 8008154:	40007000 	.word	0x40007000

08008158 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af02      	add	r7, sp, #8
 800815e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008160:	f7fd fcfe 	bl	8005b60 <HAL_GetTick>
 8008164:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e067      	b.n	8008240 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10b      	bne.n	8008194 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7fa ff15 	bl	8002fb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800818a:	f241 3188 	movw	r1, #5000	; 0x1388
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f85e 	bl	8008250 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	021a      	lsls	r2, r3, #8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	2120      	movs	r1, #32
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f856 	bl	800826c <QSPI_WaitFlagStateUntilTimeout>
 80081c0:	4603      	mov	r3, r0
 80081c2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80081c4:	7afb      	ldrb	r3, [r7, #11]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d135      	bne.n	8008236 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <HAL_QSPI_Init+0xf0>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6852      	ldr	r2, [r2, #4]
 80081d8:	0611      	lsls	r1, r2, #24
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	68d2      	ldr	r2, [r2, #12]
 80081de:	4311      	orrs	r1, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	69d2      	ldr	r2, [r2, #28]
 80081e4:	4311      	orrs	r1, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6a12      	ldr	r2, [r2, #32]
 80081ea:	4311      	orrs	r1, r2
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6812      	ldr	r2, [r2, #0]
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <HAL_QSPI_Init+0xf4>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6912      	ldr	r2, [r2, #16]
 8008202:	0411      	lsls	r1, r2, #16
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6952      	ldr	r2, [r2, #20]
 8008208:	4311      	orrs	r1, r2
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6992      	ldr	r2, [r2, #24]
 800820e:	4311      	orrs	r1, r2
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6812      	ldr	r2, [r2, #0]
 8008214:	430b      	orrs	r3, r1
 8008216:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800823e:	7afb      	ldrb	r3, [r7, #11]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	00ffff2f 	.word	0x00ffff2f
 800824c:	ffe0f8fe 	.word	0xffe0f8fe

08008250 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	4613      	mov	r3, r2
 800827a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800827c:	e01a      	b.n	80082b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008284:	d016      	beq.n	80082b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008286:	f7fd fc6b 	bl	8005b60 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	429a      	cmp	r2, r3
 8008294:	d302      	bcc.n	800829c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10b      	bne.n	80082b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2204      	movs	r2, #4
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a8:	f043 0201 	orr.w	r2, r3, #1
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e00e      	b.n	80082d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4013      	ands	r3, r2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bf14      	ite	ne
 80082c2:	2301      	movne	r3, #1
 80082c4:	2300      	moveq	r3, #0
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d1d6      	bne.n	800827e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80082e4:	2300      	movs	r3, #0
 80082e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e291      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 8087 	beq.w	800840e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008300:	4b96      	ldr	r3, [pc, #600]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f003 030c 	and.w	r3, r3, #12
 8008308:	2b04      	cmp	r3, #4
 800830a:	d00c      	beq.n	8008326 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800830c:	4b93      	ldr	r3, [pc, #588]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 030c 	and.w	r3, r3, #12
 8008314:	2b08      	cmp	r3, #8
 8008316:	d112      	bne.n	800833e <HAL_RCC_OscConfig+0x62>
 8008318:	4b90      	ldr	r3, [pc, #576]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008324:	d10b      	bne.n	800833e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008326:	4b8d      	ldr	r3, [pc, #564]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d06c      	beq.n	800840c <HAL_RCC_OscConfig+0x130>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d168      	bne.n	800840c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e26b      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008346:	d106      	bne.n	8008356 <HAL_RCC_OscConfig+0x7a>
 8008348:	4b84      	ldr	r3, [pc, #528]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a83      	ldr	r2, [pc, #524]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800834e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	e02e      	b.n	80083b4 <HAL_RCC_OscConfig+0xd8>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10c      	bne.n	8008378 <HAL_RCC_OscConfig+0x9c>
 800835e:	4b7f      	ldr	r3, [pc, #508]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a7e      	ldr	r2, [pc, #504]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	4b7c      	ldr	r3, [pc, #496]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a7b      	ldr	r2, [pc, #492]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008374:	6013      	str	r3, [r2, #0]
 8008376:	e01d      	b.n	80083b4 <HAL_RCC_OscConfig+0xd8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008380:	d10c      	bne.n	800839c <HAL_RCC_OscConfig+0xc0>
 8008382:	4b76      	ldr	r3, [pc, #472]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a75      	ldr	r2, [pc, #468]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	4b73      	ldr	r3, [pc, #460]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a72      	ldr	r2, [pc, #456]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e00b      	b.n	80083b4 <HAL_RCC_OscConfig+0xd8>
 800839c:	4b6f      	ldr	r3, [pc, #444]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a6e      	ldr	r2, [pc, #440]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80083a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	4b6c      	ldr	r3, [pc, #432]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a6b      	ldr	r2, [pc, #428]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80083ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d013      	beq.n	80083e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083bc:	f7fd fbd0 	bl	8005b60 <HAL_GetTick>
 80083c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083c4:	f7fd fbcc 	bl	8005b60 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b64      	cmp	r3, #100	; 0x64
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e21f      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083d6:	4b61      	ldr	r3, [pc, #388]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f0      	beq.n	80083c4 <HAL_RCC_OscConfig+0xe8>
 80083e2:	e014      	b.n	800840e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fd fbbc 	bl	8005b60 <HAL_GetTick>
 80083e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083ec:	f7fd fbb8 	bl	8005b60 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b64      	cmp	r3, #100	; 0x64
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e20b      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083fe:	4b57      	ldr	r3, [pc, #348]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f0      	bne.n	80083ec <HAL_RCC_OscConfig+0x110>
 800840a:	e000      	b.n	800840e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800840c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d069      	beq.n	80084ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800841a:	4b50      	ldr	r3, [pc, #320]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 030c 	and.w	r3, r3, #12
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008426:	4b4d      	ldr	r3, [pc, #308]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 030c 	and.w	r3, r3, #12
 800842e:	2b08      	cmp	r3, #8
 8008430:	d11c      	bne.n	800846c <HAL_RCC_OscConfig+0x190>
 8008432:	4b4a      	ldr	r3, [pc, #296]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d116      	bne.n	800846c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800843e:	4b47      	ldr	r3, [pc, #284]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <HAL_RCC_OscConfig+0x17a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d001      	beq.n	8008456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e1df      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008456:	4b41      	ldr	r3, [pc, #260]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	493d      	ldr	r1, [pc, #244]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008466:	4313      	orrs	r3, r2
 8008468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800846a:	e040      	b.n	80084ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d023      	beq.n	80084bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008474:	4b39      	ldr	r3, [pc, #228]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a38      	ldr	r2, [pc, #224]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800847a:	f043 0301 	orr.w	r3, r3, #1
 800847e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008480:	f7fd fb6e 	bl	8005b60 <HAL_GetTick>
 8008484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008486:	e008      	b.n	800849a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008488:	f7fd fb6a 	bl	8005b60 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b02      	cmp	r3, #2
 8008494:	d901      	bls.n	800849a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e1bd      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800849a:	4b30      	ldr	r3, [pc, #192]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f0      	beq.n	8008488 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a6:	4b2d      	ldr	r3, [pc, #180]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	4929      	ldr	r1, [pc, #164]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	600b      	str	r3, [r1, #0]
 80084ba:	e018      	b.n	80084ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084bc:	4b27      	ldr	r3, [pc, #156]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a26      	ldr	r2, [pc, #152]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c8:	f7fd fb4a 	bl	8005b60 <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084d0:	f7fd fb46 	bl	8005b60 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e199      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084e2:	4b1e      	ldr	r3, [pc, #120]	; (800855c <HAL_RCC_OscConfig+0x280>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f0      	bne.n	80084d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d038      	beq.n	800856c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d019      	beq.n	8008536 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008502:	4b16      	ldr	r3, [pc, #88]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008506:	4a15      	ldr	r2, [pc, #84]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008508:	f043 0301 	orr.w	r3, r3, #1
 800850c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800850e:	f7fd fb27 	bl	8005b60 <HAL_GetTick>
 8008512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008514:	e008      	b.n	8008528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008516:	f7fd fb23 	bl	8005b60 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d901      	bls.n	8008528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e176      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008528:	4b0c      	ldr	r3, [pc, #48]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800852a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0f0      	beq.n	8008516 <HAL_RCC_OscConfig+0x23a>
 8008534:	e01a      	b.n	800856c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <HAL_RCC_OscConfig+0x280>)
 8008538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800853a:	4a08      	ldr	r2, [pc, #32]	; (800855c <HAL_RCC_OscConfig+0x280>)
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008542:	f7fd fb0d 	bl	8005b60 <HAL_GetTick>
 8008546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008548:	e00a      	b.n	8008560 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800854a:	f7fd fb09 	bl	8005b60 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	2b02      	cmp	r3, #2
 8008556:	d903      	bls.n	8008560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e15c      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
 800855c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008560:	4b91      	ldr	r3, [pc, #580]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1ee      	bne.n	800854a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 80a4 	beq.w	80086c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800857a:	4b8b      	ldr	r3, [pc, #556]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10d      	bne.n	80085a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008586:	4b88      	ldr	r3, [pc, #544]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	4a87      	ldr	r2, [pc, #540]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800858c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008590:	6413      	str	r3, [r2, #64]	; 0x40
 8008592:	4b85      	ldr	r3, [pc, #532]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859a:	60bb      	str	r3, [r7, #8]
 800859c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800859e:	2301      	movs	r3, #1
 80085a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085a2:	4b82      	ldr	r3, [pc, #520]	; (80087ac <HAL_RCC_OscConfig+0x4d0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d118      	bne.n	80085e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80085ae:	4b7f      	ldr	r3, [pc, #508]	; (80087ac <HAL_RCC_OscConfig+0x4d0>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a7e      	ldr	r2, [pc, #504]	; (80087ac <HAL_RCC_OscConfig+0x4d0>)
 80085b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085ba:	f7fd fad1 	bl	8005b60 <HAL_GetTick>
 80085be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085c2:	f7fd facd 	bl	8005b60 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b64      	cmp	r3, #100	; 0x64
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e120      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085d4:	4b75      	ldr	r3, [pc, #468]	; (80087ac <HAL_RCC_OscConfig+0x4d0>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0f0      	beq.n	80085c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d106      	bne.n	80085f6 <HAL_RCC_OscConfig+0x31a>
 80085e8:	4b6f      	ldr	r3, [pc, #444]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ec:	4a6e      	ldr	r2, [pc, #440]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	6713      	str	r3, [r2, #112]	; 0x70
 80085f4:	e02d      	b.n	8008652 <HAL_RCC_OscConfig+0x376>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10c      	bne.n	8008618 <HAL_RCC_OscConfig+0x33c>
 80085fe:	4b6a      	ldr	r3, [pc, #424]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008602:	4a69      	ldr	r2, [pc, #420]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	6713      	str	r3, [r2, #112]	; 0x70
 800860a:	4b67      	ldr	r3, [pc, #412]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800860c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860e:	4a66      	ldr	r2, [pc, #408]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008610:	f023 0304 	bic.w	r3, r3, #4
 8008614:	6713      	str	r3, [r2, #112]	; 0x70
 8008616:	e01c      	b.n	8008652 <HAL_RCC_OscConfig+0x376>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b05      	cmp	r3, #5
 800861e:	d10c      	bne.n	800863a <HAL_RCC_OscConfig+0x35e>
 8008620:	4b61      	ldr	r3, [pc, #388]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008624:	4a60      	ldr	r2, [pc, #384]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008626:	f043 0304 	orr.w	r3, r3, #4
 800862a:	6713      	str	r3, [r2, #112]	; 0x70
 800862c:	4b5e      	ldr	r3, [pc, #376]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800862e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008630:	4a5d      	ldr	r2, [pc, #372]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008632:	f043 0301 	orr.w	r3, r3, #1
 8008636:	6713      	str	r3, [r2, #112]	; 0x70
 8008638:	e00b      	b.n	8008652 <HAL_RCC_OscConfig+0x376>
 800863a:	4b5b      	ldr	r3, [pc, #364]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800863c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863e:	4a5a      	ldr	r2, [pc, #360]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008640:	f023 0301 	bic.w	r3, r3, #1
 8008644:	6713      	str	r3, [r2, #112]	; 0x70
 8008646:	4b58      	ldr	r3, [pc, #352]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864a:	4a57      	ldr	r2, [pc, #348]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800864c:	f023 0304 	bic.w	r3, r3, #4
 8008650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d015      	beq.n	8008686 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800865a:	f7fd fa81 	bl	8005b60 <HAL_GetTick>
 800865e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008660:	e00a      	b.n	8008678 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008662:	f7fd fa7d 	bl	8005b60 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008670:	4293      	cmp	r3, r2
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e0ce      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008678:	4b4b      	ldr	r3, [pc, #300]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800867a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0ee      	beq.n	8008662 <HAL_RCC_OscConfig+0x386>
 8008684:	e014      	b.n	80086b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008686:	f7fd fa6b 	bl	8005b60 <HAL_GetTick>
 800868a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800868c:	e00a      	b.n	80086a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800868e:	f7fd fa67 	bl	8005b60 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	f241 3288 	movw	r2, #5000	; 0x1388
 800869c:	4293      	cmp	r3, r2
 800869e:	d901      	bls.n	80086a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e0b8      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086a4:	4b40      	ldr	r3, [pc, #256]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 80086a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1ee      	bne.n	800868e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d105      	bne.n	80086c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086b6:	4b3c      	ldr	r3, [pc, #240]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	4a3b      	ldr	r2, [pc, #236]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 80086bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 80a4 	beq.w	8008814 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086cc:	4b36      	ldr	r3, [pc, #216]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 030c 	and.w	r3, r3, #12
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d06b      	beq.n	80087b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d149      	bne.n	8008774 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086e0:	4b31      	ldr	r3, [pc, #196]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a30      	ldr	r2, [pc, #192]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 80086e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ec:	f7fd fa38 	bl	8005b60 <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086f2:	e008      	b.n	8008706 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086f4:	f7fd fa34 	bl	8005b60 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d901      	bls.n	8008706 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e087      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008706:	4b28      	ldr	r3, [pc, #160]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f0      	bne.n	80086f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	69da      	ldr	r2, [r3, #28]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	019b      	lsls	r3, r3, #6
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	3b01      	subs	r3, #1
 800872c:	041b      	lsls	r3, r3, #16
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008734:	061b      	lsls	r3, r3, #24
 8008736:	4313      	orrs	r3, r2
 8008738:	4a1b      	ldr	r2, [pc, #108]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800873a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800873e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008740:	4b19      	ldr	r3, [pc, #100]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a18      	ldr	r2, [pc, #96]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800874a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874c:	f7fd fa08 	bl	8005b60 <HAL_GetTick>
 8008750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008754:	f7fd fa04 	bl	8005b60 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e057      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f0      	beq.n	8008754 <HAL_RCC_OscConfig+0x478>
 8008772:	e04f      	b.n	8008814 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a0b      	ldr	r2, [pc, #44]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800877a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800877e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008780:	f7fd f9ee 	bl	8005b60 <HAL_GetTick>
 8008784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008786:	e008      	b.n	800879a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008788:	f7fd f9ea 	bl	8005b60 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b02      	cmp	r3, #2
 8008794:	d901      	bls.n	800879a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e03d      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800879a:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <HAL_RCC_OscConfig+0x4cc>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f0      	bne.n	8008788 <HAL_RCC_OscConfig+0x4ac>
 80087a6:	e035      	b.n	8008814 <HAL_RCC_OscConfig+0x538>
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80087b0:	4b1b      	ldr	r3, [pc, #108]	; (8008820 <HAL_RCC_OscConfig+0x544>)
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d028      	beq.n	8008810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d121      	bne.n	8008810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d11a      	bne.n	8008810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087e0:	4013      	ands	r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d111      	bne.n	8008810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	085b      	lsrs	r3, r3, #1
 80087f8:	3b01      	subs	r3, #1
 80087fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d107      	bne.n	8008810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800880c:	429a      	cmp	r2, r3
 800880e:	d001      	beq.n	8008814 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e000      	b.n	8008816 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	40023800 	.word	0x40023800

08008824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e0d0      	b.n	80089de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800883c:	4b6a      	ldr	r3, [pc, #424]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d910      	bls.n	800886c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800884a:	4b67      	ldr	r3, [pc, #412]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f023 020f 	bic.w	r2, r3, #15
 8008852:	4965      	ldr	r1, [pc, #404]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	4313      	orrs	r3, r2
 8008858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800885a:	4b63      	ldr	r3, [pc, #396]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 030f 	and.w	r3, r3, #15
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	429a      	cmp	r2, r3
 8008866:	d001      	beq.n	800886c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e0b8      	b.n	80089de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d020      	beq.n	80088ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008884:	4b59      	ldr	r3, [pc, #356]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	4a58      	ldr	r2, [pc, #352]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 800888a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800888e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d005      	beq.n	80088a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800889c:	4b53      	ldr	r3, [pc, #332]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	4a52      	ldr	r2, [pc, #328]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80088a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088a8:	4b50      	ldr	r3, [pc, #320]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	494d      	ldr	r1, [pc, #308]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d040      	beq.n	8008948 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d107      	bne.n	80088de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ce:	4b47      	ldr	r3, [pc, #284]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d115      	bne.n	8008906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e07f      	b.n	80089de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d107      	bne.n	80088f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088e6:	4b41      	ldr	r3, [pc, #260]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d109      	bne.n	8008906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e073      	b.n	80089de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088f6:	4b3d      	ldr	r3, [pc, #244]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e06b      	b.n	80089de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008906:	4b39      	ldr	r3, [pc, #228]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f023 0203 	bic.w	r2, r3, #3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	4936      	ldr	r1, [pc, #216]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 8008914:	4313      	orrs	r3, r2
 8008916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008918:	f7fd f922 	bl	8005b60 <HAL_GetTick>
 800891c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800891e:	e00a      	b.n	8008936 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008920:	f7fd f91e 	bl	8005b60 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	f241 3288 	movw	r2, #5000	; 0x1388
 800892e:	4293      	cmp	r3, r2
 8008930:	d901      	bls.n	8008936 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e053      	b.n	80089de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008936:	4b2d      	ldr	r3, [pc, #180]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f003 020c 	and.w	r2, r3, #12
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	429a      	cmp	r2, r3
 8008946:	d1eb      	bne.n	8008920 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008948:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 030f 	and.w	r3, r3, #15
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d210      	bcs.n	8008978 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008956:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f023 020f 	bic.w	r2, r3, #15
 800895e:	4922      	ldr	r1, [pc, #136]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	4313      	orrs	r3, r2
 8008964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008966:	4b20      	ldr	r3, [pc, #128]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 030f 	and.w	r3, r3, #15
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d001      	beq.n	8008978 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e032      	b.n	80089de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0304 	and.w	r3, r3, #4
 8008980:	2b00      	cmp	r3, #0
 8008982:	d008      	beq.n	8008996 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008984:	4b19      	ldr	r3, [pc, #100]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	4916      	ldr	r1, [pc, #88]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 8008992:	4313      	orrs	r3, r2
 8008994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0308 	and.w	r3, r3, #8
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d009      	beq.n	80089b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80089a2:	4b12      	ldr	r3, [pc, #72]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	490e      	ldr	r1, [pc, #56]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80089b6:	f000 f821 	bl	80089fc <HAL_RCC_GetSysClockFreq>
 80089ba:	4602      	mov	r2, r0
 80089bc:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	091b      	lsrs	r3, r3, #4
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	490a      	ldr	r1, [pc, #40]	; (80089f0 <HAL_RCC_ClockConfig+0x1cc>)
 80089c8:	5ccb      	ldrb	r3, [r1, r3]
 80089ca:	fa22 f303 	lsr.w	r3, r2, r3
 80089ce:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <HAL_RCC_ClockConfig+0x1d0>)
 80089d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80089d2:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <HAL_RCC_ClockConfig+0x1d4>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fb f81c 	bl	8003a14 <HAL_InitTick>

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40023c00 	.word	0x40023c00
 80089ec:	40023800 	.word	0x40023800
 80089f0:	080129c4 	.word	0x080129c4
 80089f4:	2000001c 	.word	0x2000001c
 80089f8:	2000002c 	.word	0x2000002c

080089fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a00:	b090      	sub	sp, #64	; 0x40
 8008a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	637b      	str	r3, [r7, #52]	; 0x34
 8008a08:	2300      	movs	r3, #0
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a14:	4b59      	ldr	r3, [pc, #356]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f003 030c 	and.w	r3, r3, #12
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d00d      	beq.n	8008a3c <HAL_RCC_GetSysClockFreq+0x40>
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	f200 80a1 	bhi.w	8008b68 <HAL_RCC_GetSysClockFreq+0x16c>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <HAL_RCC_GetSysClockFreq+0x34>
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d003      	beq.n	8008a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8008a2e:	e09b      	b.n	8008b68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a30:	4b53      	ldr	r3, [pc, #332]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a34:	e09b      	b.n	8008b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a36:	4b53      	ldr	r3, [pc, #332]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a3a:	e098      	b.n	8008b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a3c:	4b4f      	ldr	r3, [pc, #316]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008a46:	4b4d      	ldr	r3, [pc, #308]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d028      	beq.n	8008aa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a52:	4b4a      	ldr	r3, [pc, #296]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	099b      	lsrs	r3, r3, #6
 8008a58:	2200      	movs	r2, #0
 8008a5a:	623b      	str	r3, [r7, #32]
 8008a5c:	627a      	str	r2, [r7, #36]	; 0x24
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008a64:	2100      	movs	r1, #0
 8008a66:	4b47      	ldr	r3, [pc, #284]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a68:	fb03 f201 	mul.w	r2, r3, r1
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	fb00 f303 	mul.w	r3, r0, r3
 8008a72:	4413      	add	r3, r2
 8008a74:	4a43      	ldr	r2, [pc, #268]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a76:	fba0 1202 	umull	r1, r2, r0, r2
 8008a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a7c:	460a      	mov	r2, r1
 8008a7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a82:	4413      	add	r3, r2
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	2200      	movs	r2, #0
 8008a8a:	61bb      	str	r3, [r7, #24]
 8008a8c:	61fa      	str	r2, [r7, #28]
 8008a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008a96:	f7f8 f89f 	bl	8000bd8 <__aeabi_uldivmod>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa2:	e053      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aa4:	4b35      	ldr	r3, [pc, #212]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	099b      	lsrs	r3, r3, #6
 8008aaa:	2200      	movs	r2, #0
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	617a      	str	r2, [r7, #20]
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008ab6:	f04f 0b00 	mov.w	fp, #0
 8008aba:	4652      	mov	r2, sl
 8008abc:	465b      	mov	r3, fp
 8008abe:	f04f 0000 	mov.w	r0, #0
 8008ac2:	f04f 0100 	mov.w	r1, #0
 8008ac6:	0159      	lsls	r1, r3, #5
 8008ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008acc:	0150      	lsls	r0, r2, #5
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	ebb2 080a 	subs.w	r8, r2, sl
 8008ad6:	eb63 090b 	sbc.w	r9, r3, fp
 8008ada:	f04f 0200 	mov.w	r2, #0
 8008ade:	f04f 0300 	mov.w	r3, #0
 8008ae2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008ae6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008aea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008aee:	ebb2 0408 	subs.w	r4, r2, r8
 8008af2:	eb63 0509 	sbc.w	r5, r3, r9
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	00eb      	lsls	r3, r5, #3
 8008b00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b04:	00e2      	lsls	r2, r4, #3
 8008b06:	4614      	mov	r4, r2
 8008b08:	461d      	mov	r5, r3
 8008b0a:	eb14 030a 	adds.w	r3, r4, sl
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	eb45 030b 	adc.w	r3, r5, fp
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b22:	4629      	mov	r1, r5
 8008b24:	028b      	lsls	r3, r1, #10
 8008b26:	4621      	mov	r1, r4
 8008b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	028a      	lsls	r2, r1, #10
 8008b30:	4610      	mov	r0, r2
 8008b32:	4619      	mov	r1, r3
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	2200      	movs	r2, #0
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	60fa      	str	r2, [r7, #12]
 8008b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b40:	f7f8 f84a 	bl	8000bd8 <__aeabi_uldivmod>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4613      	mov	r3, r2
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	0c1b      	lsrs	r3, r3, #16
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	3301      	adds	r3, #1
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b66:	e002      	b.n	8008b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8008b6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3740      	adds	r7, #64	; 0x40
 8008b74:	46bd      	mov	sp, r7
 8008b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	00f42400 	.word	0x00f42400
 8008b84:	017d7840 	.word	0x017d7840

08008b88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b8c:	4b03      	ldr	r3, [pc, #12]	; (8008b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	2000001c 	.word	0x2000001c

08008ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ba4:	f7ff fff0 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	0a9b      	lsrs	r3, r3, #10
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	4903      	ldr	r1, [pc, #12]	; (8008bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bb6:	5ccb      	ldrb	r3, [r1, r3]
 8008bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40023800 	.word	0x40023800
 8008bc4:	080129d4 	.word	0x080129d4

08008bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008bcc:	f7ff ffdc 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	0b5b      	lsrs	r3, r3, #13
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	4903      	ldr	r1, [pc, #12]	; (8008bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bde:	5ccb      	ldrb	r3, [r1, r3]
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	40023800 	.word	0x40023800
 8008bec:	080129d4 	.word	0x080129d4

08008bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	220f      	movs	r2, #15
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c00:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <HAL_RCC_GetClockConfig+0x5c>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f003 0203 	and.w	r2, r3, #3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <HAL_RCC_GetClockConfig+0x5c>)
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <HAL_RCC_GetClockConfig+0x5c>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008c24:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <HAL_RCC_GetClockConfig+0x5c>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	08db      	lsrs	r3, r3, #3
 8008c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c32:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <HAL_RCC_GetClockConfig+0x60>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 020f 	and.w	r2, r3, #15
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	601a      	str	r2, [r3, #0]
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40023800 	.word	0x40023800
 8008c50:	40023c00 	.word	0x40023c00

08008c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d012      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c7c:	4b69      	ldr	r3, [pc, #420]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	4a68      	ldr	r2, [pc, #416]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c86:	6093      	str	r3, [r2, #8]
 8008c88:	4b66      	ldr	r3, [pc, #408]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	4964      	ldr	r1, [pc, #400]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d017      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008cae:	4b5d      	ldr	r3, [pc, #372]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	4959      	ldr	r1, [pc, #356]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ccc:	d101      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d017      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008cea:	4b4e      	ldr	r3, [pc, #312]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	494a      	ldr	r1, [pc, #296]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d08:	d101      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008d16:	2301      	movs	r3, #1
 8008d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008d26:	2301      	movs	r3, #1
 8008d28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 808b 	beq.w	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d38:	4b3a      	ldr	r3, [pc, #232]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3c:	4a39      	ldr	r2, [pc, #228]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d42:	6413      	str	r3, [r2, #64]	; 0x40
 8008d44:	4b37      	ldr	r3, [pc, #220]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d4c:	60bb      	str	r3, [r7, #8]
 8008d4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d50:	4b35      	ldr	r3, [pc, #212]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a34      	ldr	r2, [pc, #208]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5c:	f7fc ff00 	bl	8005b60 <HAL_GetTick>
 8008d60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d62:	e008      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d64:	f7fc fefc 	bl	8005b60 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b64      	cmp	r3, #100	; 0x64
 8008d70:	d901      	bls.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e357      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d76:	4b2c      	ldr	r3, [pc, #176]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f0      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d82:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d035      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d02e      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008da0:	4b20      	ldr	r3, [pc, #128]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008daa:	4b1e      	ldr	r3, [pc, #120]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	4a1d      	ldr	r2, [pc, #116]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008db6:	4b1b      	ldr	r3, [pc, #108]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dba:	4a1a      	ldr	r2, [pc, #104]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008dc2:	4a18      	ldr	r2, [pc, #96]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008dc8:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d114      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd4:	f7fc fec4 	bl	8005b60 <HAL_GetTick>
 8008dd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dda:	e00a      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ddc:	f7fc fec0 	bl	8005b60 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d901      	bls.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e319      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df2:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0ee      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e0a:	d111      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008e1a:	400b      	ands	r3, r1
 8008e1c:	4901      	ldr	r1, [pc, #4]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
 8008e22:	e00b      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008e24:	40023800 	.word	0x40023800
 8008e28:	40007000 	.word	0x40007000
 8008e2c:	0ffffcff 	.word	0x0ffffcff
 8008e30:	4baa      	ldr	r3, [pc, #680]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4aa9      	ldr	r2, [pc, #676]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e3a:	6093      	str	r3, [r2, #8]
 8008e3c:	4ba7      	ldr	r3, [pc, #668]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e48:	49a4      	ldr	r1, [pc, #656]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0310 	and.w	r3, r3, #16
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d010      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e5a:	4ba0      	ldr	r3, [pc, #640]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e60:	4a9e      	ldr	r2, [pc, #632]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008e6a:	4b9c      	ldr	r3, [pc, #624]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	4999      	ldr	r1, [pc, #612]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00a      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e88:	4b94      	ldr	r3, [pc, #592]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e96:	4991      	ldr	r1, [pc, #580]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008eaa:	4b8c      	ldr	r3, [pc, #560]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eb8:	4988      	ldr	r1, [pc, #544]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ecc:	4b83      	ldr	r3, [pc, #524]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eda:	4980      	ldr	r1, [pc, #512]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008eee:	4b7b      	ldr	r3, [pc, #492]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efc:	4977      	ldr	r1, [pc, #476]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f10:	4b72      	ldr	r3, [pc, #456]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f16:	f023 0203 	bic.w	r2, r3, #3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f1e:	496f      	ldr	r1, [pc, #444]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f32:	4b6a      	ldr	r3, [pc, #424]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f38:	f023 020c 	bic.w	r2, r3, #12
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f40:	4966      	ldr	r1, [pc, #408]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f54:	4b61      	ldr	r3, [pc, #388]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f62:	495e      	ldr	r1, [pc, #376]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f76:	4b59      	ldr	r3, [pc, #356]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f84:	4955      	ldr	r1, [pc, #340]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f98:	4b50      	ldr	r3, [pc, #320]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	494d      	ldr	r1, [pc, #308]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008fba:	4b48      	ldr	r3, [pc, #288]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc8:	4944      	ldr	r1, [pc, #272]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008fdc:	4b3f      	ldr	r3, [pc, #252]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	493c      	ldr	r1, [pc, #240]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008ffe:	4b37      	ldr	r3, [pc, #220]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800900c:	4933      	ldr	r1, [pc, #204]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800900e:	4313      	orrs	r3, r2
 8009010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009020:	4b2e      	ldr	r3, [pc, #184]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009026:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902e:	492b      	ldr	r1, [pc, #172]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009030:	4313      	orrs	r3, r2
 8009032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d011      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009042:	4b26      	ldr	r3, [pc, #152]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009048:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009050:	4922      	ldr	r1, [pc, #136]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009052:	4313      	orrs	r3, r2
 8009054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800905c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009060:	d101      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009072:	2301      	movs	r3, #1
 8009074:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009082:	4b16      	ldr	r3, [pc, #88]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009088:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009090:	4912      	ldr	r1, [pc, #72]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80090a4:	4b0d      	ldr	r3, [pc, #52]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090b4:	4909      	ldr	r1, [pc, #36]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d006      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 80d9 	beq.w	8009282 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80090d0:	4b02      	ldr	r3, [pc, #8]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a01      	ldr	r2, [pc, #4]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090da:	e001      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80090dc:	40023800 	.word	0x40023800
 80090e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e2:	f7fc fd3d 	bl	8005b60 <HAL_GetTick>
 80090e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090e8:	e008      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80090ea:	f7fc fd39 	bl	8005b60 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b64      	cmp	r3, #100	; 0x64
 80090f6:	d901      	bls.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e194      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090fc:	4b6c      	ldr	r3, [pc, #432]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1f0      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d021      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11d      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800911c:	4b64      	ldr	r3, [pc, #400]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800911e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800912a:	4b61      	ldr	r3, [pc, #388]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800912c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009130:	0e1b      	lsrs	r3, r3, #24
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	019a      	lsls	r2, r3, #6
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	041b      	lsls	r3, r3, #16
 8009142:	431a      	orrs	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	061b      	lsls	r3, r3, #24
 8009148:	431a      	orrs	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	071b      	lsls	r3, r3, #28
 8009150:	4957      	ldr	r1, [pc, #348]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009152:	4313      	orrs	r3, r2
 8009154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800916c:	d00a      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009176:	2b00      	cmp	r3, #0
 8009178:	d02e      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009182:	d129      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009184:	4b4a      	ldr	r3, [pc, #296]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800918a:	0c1b      	lsrs	r3, r3, #16
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009192:	4b47      	ldr	r3, [pc, #284]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009198:	0f1b      	lsrs	r3, r3, #28
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	019a      	lsls	r2, r3, #6
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	041b      	lsls	r3, r3, #16
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	061b      	lsls	r3, r3, #24
 80091b2:	431a      	orrs	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	071b      	lsls	r3, r3, #28
 80091b8:	493d      	ldr	r1, [pc, #244]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80091c0:	4b3b      	ldr	r3, [pc, #236]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c6:	f023 021f 	bic.w	r2, r3, #31
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	3b01      	subs	r3, #1
 80091d0:	4937      	ldr	r1, [pc, #220]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01d      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80091e4:	4b32      	ldr	r3, [pc, #200]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ea:	0e1b      	lsrs	r3, r3, #24
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80091f2:	4b2f      	ldr	r3, [pc, #188]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f8:	0f1b      	lsrs	r3, r3, #28
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	019a      	lsls	r2, r3, #6
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	431a      	orrs	r2, r3
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	061b      	lsls	r3, r3, #24
 8009212:	431a      	orrs	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	071b      	lsls	r3, r3, #28
 8009218:	4925      	ldr	r1, [pc, #148]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800921a:	4313      	orrs	r3, r2
 800921c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d011      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	019a      	lsls	r2, r3, #6
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	061b      	lsls	r3, r3, #24
 8009240:	431a      	orrs	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	071b      	lsls	r3, r3, #28
 8009248:	4919      	ldr	r1, [pc, #100]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a16      	ldr	r2, [pc, #88]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800925a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800925c:	f7fc fc80 	bl	8005b60 <HAL_GetTick>
 8009260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009262:	e008      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009264:	f7fc fc7c 	bl	8005b60 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	2b64      	cmp	r3, #100	; 0x64
 8009270:	d901      	bls.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e0d7      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009276:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0f0      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	2b01      	cmp	r3, #1
 8009286:	f040 80cd 	bne.w	8009424 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800928a:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a08      	ldr	r2, [pc, #32]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009296:	f7fc fc63 	bl	8005b60 <HAL_GetTick>
 800929a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800929c:	e00a      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800929e:	f7fc fc5f 	bl	8005b60 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b64      	cmp	r3, #100	; 0x64
 80092aa:	d903      	bls.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e0ba      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80092b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092b4:	4b5e      	ldr	r3, [pc, #376]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c0:	d0ed      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d02e      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d12a      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80092ea:	4b51      	ldr	r3, [pc, #324]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f0:	0c1b      	lsrs	r3, r3, #16
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092f8:	4b4d      	ldr	r3, [pc, #308]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fe:	0f1b      	lsrs	r3, r3, #28
 8009300:	f003 0307 	and.w	r3, r3, #7
 8009304:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	019a      	lsls	r2, r3, #6
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	041b      	lsls	r3, r3, #16
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	061b      	lsls	r3, r3, #24
 8009318:	431a      	orrs	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	071b      	lsls	r3, r3, #28
 800931e:	4944      	ldr	r1, [pc, #272]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009320:	4313      	orrs	r3, r2
 8009322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009326:	4b42      	ldr	r3, [pc, #264]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	3b01      	subs	r3, #1
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	493d      	ldr	r1, [pc, #244]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d022      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009354:	d11d      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009356:	4b36      	ldr	r3, [pc, #216]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935c:	0e1b      	lsrs	r3, r3, #24
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009364:	4b32      	ldr	r3, [pc, #200]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800936a:	0f1b      	lsrs	r3, r3, #28
 800936c:	f003 0307 	and.w	r3, r3, #7
 8009370:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	019a      	lsls	r2, r3, #6
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	041b      	lsls	r3, r3, #16
 800937e:	431a      	orrs	r2, r3
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	061b      	lsls	r3, r3, #24
 8009384:	431a      	orrs	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	071b      	lsls	r3, r3, #28
 800938a:	4929      	ldr	r1, [pc, #164]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800938c:	4313      	orrs	r3, r2
 800938e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d028      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800939e:	4b24      	ldr	r3, [pc, #144]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a4:	0e1b      	lsrs	r3, r3, #24
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80093ac:	4b20      	ldr	r3, [pc, #128]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	019a      	lsls	r2, r3, #6
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	041b      	lsls	r3, r3, #16
 80093c4:	431a      	orrs	r2, r3
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	69db      	ldr	r3, [r3, #28]
 80093d0:	071b      	lsls	r3, r3, #28
 80093d2:	4917      	ldr	r1, [pc, #92]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80093da:	4b15      	ldr	r3, [pc, #84]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	4911      	ldr	r1, [pc, #68]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80093f0:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a0e      	ldr	r2, [pc, #56]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fc:	f7fc fbb0 	bl	8005b60 <HAL_GetTick>
 8009400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009402:	e008      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009404:	f7fc fbac 	bl	8005b60 <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	2b64      	cmp	r3, #100	; 0x64
 8009410:	d901      	bls.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e007      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009416:	4b06      	ldr	r3, [pc, #24]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800941e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009422:	d1ef      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	40023800 	.word	0x40023800

08009434 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009452:	f040 808d 	bne.w	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009456:	4b93      	ldr	r3, [pc, #588]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009464:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800946c:	d07c      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009474:	d87b      	bhi.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009482:	d039      	beq.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009484:	e073      	b.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009486:	4b87      	ldr	r3, [pc, #540]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d108      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009492:	4b84      	ldr	r3, [pc, #528]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800949a:	4a83      	ldr	r2, [pc, #524]	; (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800949c:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a0:	613b      	str	r3, [r7, #16]
 80094a2:	e007      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80094a4:	4b7f      	ldr	r3, [pc, #508]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ac:	4a7f      	ldr	r2, [pc, #508]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80094b4:	4b7b      	ldr	r3, [pc, #492]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80094b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ba:	0e1b      	lsrs	r3, r3, #24
 80094bc:	f003 030f 	and.w	r3, r3, #15
 80094c0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80094c2:	4b78      	ldr	r3, [pc, #480]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80094c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c8:	099b      	lsrs	r3, r3, #6
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	fb03 f202 	mul.w	r2, r3, r2
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094da:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80094dc:	4b71      	ldr	r3, [pc, #452]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80094de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	f003 031f 	and.w	r3, r3, #31
 80094e8:	3301      	adds	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f4:	617b      	str	r3, [r7, #20]
        break;
 80094f6:	e03b      	b.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80094f8:	4b6a      	ldr	r3, [pc, #424]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d108      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009504:	4b67      	ldr	r3, [pc, #412]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800950c:	4a66      	ldr	r2, [pc, #408]	; (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800950e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	e007      	b.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009516:	4b63      	ldr	r3, [pc, #396]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800951e:	4a63      	ldr	r2, [pc, #396]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009520:	fbb2 f3f3 	udiv	r3, r2, r3
 8009524:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009526:	4b5f      	ldr	r3, [pc, #380]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800952c:	0e1b      	lsrs	r3, r3, #24
 800952e:	f003 030f 	and.w	r3, r3, #15
 8009532:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009534:	4b5b      	ldr	r3, [pc, #364]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800953a:	099b      	lsrs	r3, r3, #6
 800953c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	fb03 f202 	mul.w	r2, r3, r2
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	fbb2 f3f3 	udiv	r3, r2, r3
 800954c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800954e:	4b55      	ldr	r3, [pc, #340]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009554:	f003 031f 	and.w	r3, r3, #31
 8009558:	3301      	adds	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	fbb2 f3f3 	udiv	r3, r2, r3
 8009564:	617b      	str	r3, [r7, #20]
        break;
 8009566:	e003      	b.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009568:	4b51      	ldr	r3, [pc, #324]	; (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800956a:	617b      	str	r3, [r7, #20]
        break;
 800956c:	e000      	b.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800956e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009576:	f040 808d 	bne.w	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800957a:	4b4a      	ldr	r3, [pc, #296]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800957c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009580:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009588:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009590:	d07c      	beq.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009598:	d87b      	bhi.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095a6:	d039      	beq.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80095a8:	e073      	b.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80095aa:	4b3e      	ldr	r3, [pc, #248]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d108      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80095b6:	4b3b      	ldr	r3, [pc, #236]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095be:	4a3a      	ldr	r2, [pc, #232]	; (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80095c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095c4:	613b      	str	r3, [r7, #16]
 80095c6:	e007      	b.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80095c8:	4b36      	ldr	r3, [pc, #216]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095d0:	4a36      	ldr	r2, [pc, #216]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80095d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80095d8:	4b32      	ldr	r3, [pc, #200]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095de:	0e1b      	lsrs	r3, r3, #24
 80095e0:	f003 030f 	and.w	r3, r3, #15
 80095e4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80095e6:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ec:	099b      	lsrs	r3, r3, #6
 80095ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	fb03 f202 	mul.w	r2, r3, r2
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009600:	4b28      	ldr	r3, [pc, #160]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009606:	0a1b      	lsrs	r3, r3, #8
 8009608:	f003 031f 	and.w	r3, r3, #31
 800960c:	3301      	adds	r3, #1
 800960e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	fbb2 f3f3 	udiv	r3, r2, r3
 8009618:	617b      	str	r3, [r7, #20]
        break;
 800961a:	e03b      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800961c:	4b21      	ldr	r3, [pc, #132]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d108      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009628:	4b1e      	ldr	r3, [pc, #120]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009630:	4a1d      	ldr	r2, [pc, #116]	; (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009632:	fbb2 f3f3 	udiv	r3, r2, r3
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	e007      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800963a:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009642:	4a1a      	ldr	r2, [pc, #104]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009644:	fbb2 f3f3 	udiv	r3, r2, r3
 8009648:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800964a:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800964c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009650:	0e1b      	lsrs	r3, r3, #24
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009658:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800965a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800965e:	099b      	lsrs	r3, r3, #6
 8009660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	fb03 f202 	mul.w	r2, r3, r2
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009670:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009672:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009678:	f003 031f 	and.w	r3, r3, #31
 800967c:	3301      	adds	r3, #1
 800967e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	fbb2 f3f3 	udiv	r3, r2, r3
 8009688:	617b      	str	r3, [r7, #20]
        break;
 800968a:	e003      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800968c:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800968e:	617b      	str	r3, [r7, #20]
        break;
 8009690:	e000      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8009692:	bf00      	nop
      }
    }
  }

  return frequency;
 8009694:	697b      	ldr	r3, [r7, #20]
}
 8009696:	4618      	mov	r0, r3
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	40023800 	.word	0x40023800
 80096a8:	00f42400 	.word	0x00f42400
 80096ac:	017d7840 	.word	0x017d7840
 80096b0:	00bb8000 	.word	0x00bb8000

080096b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e071      	b.n	80097ae <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	7f5b      	ldrb	r3, [r3, #29]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7f9 fcfa 	bl	80030d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f003 0310 	and.w	r3, r3, #16
 80096f0:	2b10      	cmp	r3, #16
 80096f2:	d053      	beq.n	800979c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	22ca      	movs	r2, #202	; 0xca
 80096fa:	625a      	str	r2, [r3, #36]	; 0x24
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2253      	movs	r2, #83	; 0x53
 8009702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fac9 	bl	8009c9c <RTC_EnterInitMode>
 800970a:	4603      	mov	r3, r0
 800970c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d12a      	bne.n	800976a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6899      	ldr	r1, [r3, #8]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	4b26      	ldr	r3, [pc, #152]	; (80097b8 <HAL_RTC_Init+0x104>)
 8009720:	400b      	ands	r3, r1
 8009722:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6899      	ldr	r1, [r3, #8]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	431a      	orrs	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	431a      	orrs	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	430a      	orrs	r2, r1
 8009740:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	68d2      	ldr	r2, [r2, #12]
 800974a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6919      	ldr	r1, [r3, #16]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	041a      	lsls	r2, r3, #16
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fad2 	bl	8009d0a <RTC_ExitInitMode>
 8009766:	4603      	mov	r3, r0
 8009768:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d110      	bne.n	8009792 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0208 	bic.w	r2, r2, #8
 800977e:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699a      	ldr	r2, [r3, #24]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	22ff      	movs	r2, #255	; 0xff
 8009798:	625a      	str	r2, [r3, #36]	; 0x24
 800979a:	e001      	b.n	80097a0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	ff8fffbf 	.word	0xff8fffbf

080097bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	7f1b      	ldrb	r3, [r3, #28]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d101      	bne.n	80097d8 <HAL_RTC_SetTime+0x1c>
 80097d4:	2302      	movs	r3, #2
 80097d6:	e085      	b.n	80098e4 <HAL_RTC_SetTime+0x128>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2201      	movs	r2, #1
 80097dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2202      	movs	r2, #2
 80097e2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d126      	bne.n	8009838 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 faa6 	bl	8009d54 <RTC_ByteToBcd2>
 8009808:	4603      	mov	r3, r0
 800980a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	785b      	ldrb	r3, [r3, #1]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 fa9f 	bl	8009d54 <RTC_ByteToBcd2>
 8009816:	4603      	mov	r3, r0
 8009818:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800981a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	789b      	ldrb	r3, [r3, #2]
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fa97 	bl	8009d54 <RTC_ByteToBcd2>
 8009826:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009828:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	78db      	ldrb	r3, [r3, #3]
 8009830:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009832:	4313      	orrs	r3, r2
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	e018      	b.n	800986a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	d102      	bne.n	800984c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2200      	movs	r2, #0
 800984a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	785b      	ldrb	r3, [r3, #1]
 8009856:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009858:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800985e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	78db      	ldrb	r3, [r3, #3]
 8009864:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009866:	4313      	orrs	r3, r2
 8009868:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	22ca      	movs	r2, #202	; 0xca
 8009870:	625a      	str	r2, [r3, #36]	; 0x24
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2253      	movs	r2, #83	; 0x53
 8009878:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 fa0e 	bl	8009c9c <RTC_EnterInitMode>
 8009880:	4603      	mov	r3, r0
 8009882:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009884:	7cfb      	ldrb	r3, [r7, #19]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d11e      	bne.n	80098c8 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	6979      	ldr	r1, [r7, #20]
 8009890:	4b16      	ldr	r3, [pc, #88]	; (80098ec <HAL_RTC_SetTime+0x130>)
 8009892:	400b      	ands	r3, r1
 8009894:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6899      	ldr	r1, [r3, #8]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	68da      	ldr	r2, [r3, #12]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	431a      	orrs	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fa23 	bl	8009d0a <RTC_ExitInitMode>
 80098c4:	4603      	mov	r3, r0
 80098c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80098c8:	7cfb      	ldrb	r3, [r7, #19]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2201      	movs	r2, #1
 80098d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	22ff      	movs	r2, #255	; 0xff
 80098da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	771a      	strb	r2, [r3, #28]

  return status;
 80098e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	371c      	adds	r7, #28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd90      	pop	{r4, r7, pc}
 80098ec:	007f7f7f 	.word	0x007f7f7f

080098f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80098f0:	b590      	push	{r4, r7, lr}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	7f1b      	ldrb	r3, [r3, #28]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_RTC_SetDate+0x1c>
 8009908:	2302      	movs	r3, #2
 800990a:	e06f      	b.n	80099ec <HAL_RTC_SetDate+0xfc>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2201      	movs	r2, #1
 8009910:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2202      	movs	r2, #2
 8009916:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10e      	bne.n	800993c <HAL_RTC_SetDate+0x4c>
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	f003 0310 	and.w	r3, r3, #16
 8009926:	2b00      	cmp	r3, #0
 8009928:	d008      	beq.n	800993c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	f023 0310 	bic.w	r3, r3, #16
 8009932:	b2db      	uxtb	r3, r3
 8009934:	330a      	adds	r3, #10
 8009936:	b2da      	uxtb	r2, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d11c      	bne.n	800997c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	78db      	ldrb	r3, [r3, #3]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fa04 	bl	8009d54 <RTC_ByteToBcd2>
 800994c:	4603      	mov	r3, r0
 800994e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	785b      	ldrb	r3, [r3, #1]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 f9fd 	bl	8009d54 <RTC_ByteToBcd2>
 800995a:	4603      	mov	r3, r0
 800995c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800995e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	789b      	ldrb	r3, [r3, #2]
 8009964:	4618      	mov	r0, r3
 8009966:	f000 f9f5 	bl	8009d54 <RTC_ByteToBcd2>
 800996a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800996c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009976:	4313      	orrs	r3, r2
 8009978:	617b      	str	r3, [r7, #20]
 800997a:	e00e      	b.n	800999a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	78db      	ldrb	r3, [r3, #3]
 8009980:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009988:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800998e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	22ca      	movs	r2, #202	; 0xca
 80099a0:	625a      	str	r2, [r3, #36]	; 0x24
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2253      	movs	r2, #83	; 0x53
 80099a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 f976 	bl	8009c9c <RTC_EnterInitMode>
 80099b0:	4603      	mov	r3, r0
 80099b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80099b4:	7cfb      	ldrb	r3, [r7, #19]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10a      	bne.n	80099d0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	6979      	ldr	r1, [r7, #20]
 80099c0:	4b0c      	ldr	r3, [pc, #48]	; (80099f4 <HAL_RTC_SetDate+0x104>)
 80099c2:	400b      	ands	r3, r1
 80099c4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 f99f 	bl	8009d0a <RTC_ExitInitMode>
 80099cc:	4603      	mov	r3, r0
 80099ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80099d0:	7cfb      	ldrb	r3, [r7, #19]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	22ff      	movs	r2, #255	; 0xff
 80099e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	771a      	strb	r2, [r3, #28]

  return status;
 80099ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	371c      	adds	r7, #28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd90      	pop	{r4, r7, pc}
 80099f4:	00ffff3f 	.word	0x00ffff3f

080099f8 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80099f8:	b590      	push	{r4, r7, lr}
 80099fa:	b089      	sub	sp, #36	; 0x24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	7f1b      	ldrb	r3, [r3, #28]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d101      	bne.n	8009a1c <HAL_RTC_SetAlarm+0x24>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	e113      	b.n	8009c44 <HAL_RTC_SetAlarm+0x24c>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2202      	movs	r2, #2
 8009a26:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d137      	bne.n	8009a9e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d102      	bne.n	8009a42 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f984 	bl	8009d54 <RTC_ByteToBcd2>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 f97d 	bl	8009d54 <RTC_ByteToBcd2>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009a5e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	789b      	ldrb	r3, [r3, #2]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 f975 	bl	8009d54 <RTC_ByteToBcd2>
 8009a6a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a6c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	78db      	ldrb	r3, [r3, #3]
 8009a74:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009a76:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 f967 	bl	8009d54 <RTC_ByteToBcd2>
 8009a86:	4603      	mov	r3, r0
 8009a88:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009a8a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009a92:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	61fb      	str	r3, [r7, #28]
 8009a9c:	e023      	b.n	8009ae6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	785b      	ldrb	r3, [r3, #1]
 8009abc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009abe:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009ac4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	78db      	ldrb	r3, [r3, #3]
 8009aca:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009acc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ad4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009ad6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009adc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009aee:	4313      	orrs	r3, r2
 8009af0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	22ca      	movs	r2, #202	; 0xca
 8009af8:	625a      	str	r2, [r3, #36]	; 0x24
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2253      	movs	r2, #83	; 0x53
 8009b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b0a:	d148      	bne.n	8009b9e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689a      	ldr	r2, [r3, #8]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b1a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	689a      	ldr	r2, [r3, #8]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b2a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009b3c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b3e:	f7fc f80f 	bl	8005b60 <HAL_GetTick>
 8009b42:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009b44:	e013      	b.n	8009b6e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b46:	f7fc f80b 	bl	8005b60 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b54:	d90b      	bls.n	8009b6e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	22ff      	movs	r2, #255	; 0xff
 8009b5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2203      	movs	r2, #3
 8009b62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e06a      	b.n	8009c44 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d0e4      	beq.n	8009b46 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b9a:	609a      	str	r2, [r3, #8]
 8009b9c:	e047      	b.n	8009c2e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689a      	ldr	r2, [r3, #8]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009bac:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689a      	ldr	r2, [r3, #8]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bbc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009bce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bd0:	f7fb ffc6 	bl	8005b60 <HAL_GetTick>
 8009bd4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009bd6:	e013      	b.n	8009c00 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009bd8:	f7fb ffc2 	bl	8005b60 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009be6:	d90b      	bls.n	8009c00 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	22ff      	movs	r2, #255	; 0xff
 8009bee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2203      	movs	r2, #3
 8009bf4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e021      	b.n	8009c44 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f003 0302 	and.w	r3, r3, #2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0e4      	beq.n	8009bd8 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	22ff      	movs	r2, #255	; 0xff
 8009c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3724      	adds	r7, #36	; 0x24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd90      	pop	{r4, r7, pc}

08009c4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68da      	ldr	r2, [r3, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009c66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c68:	f7fb ff7a 	bl	8005b60 <HAL_GetTick>
 8009c6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c6e:	e009      	b.n	8009c84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c70:	f7fb ff76 	bl	8005b60 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c7e:	d901      	bls.n	8009c84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e007      	b.n	8009c94 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f003 0320 	and.w	r3, r3, #32
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0ee      	beq.n	8009c70 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d122      	bne.n	8009d00 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68da      	ldr	r2, [r3, #12]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009cc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009cca:	f7fb ff49 	bl	8005b60 <HAL_GetTick>
 8009cce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009cd0:	e00c      	b.n	8009cec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cd2:	f7fb ff45 	bl	8005b60 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ce0:	d904      	bls.n	8009cec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2204      	movs	r2, #4
 8009ce6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <RTC_EnterInitMode+0x64>
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d1e8      	bne.n	8009cd2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ff89 	bl	8009c4c <HAL_RTC_WaitForSynchro>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d004      	beq.n	8009d4a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2204      	movs	r2, #4
 8009d44:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009d62:	e005      	b.n	8009d70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	3301      	adds	r3, #1
 8009d68:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009d6a:	79fb      	ldrb	r3, [r7, #7]
 8009d6c:	3b0a      	subs	r3, #10
 8009d6e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	2b09      	cmp	r3, #9
 8009d74:	d8f6      	bhi.n	8009d64 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	b2db      	uxtb	r3, r3
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	7f1b      	ldrb	r3, [r3, #28]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d101      	bne.n	8009dac <HAL_RTCEx_SetTimeStamp+0x1c>
 8009da8:	2302      	movs	r3, #2
 8009daa:	e050      	b.n	8009e4e <HAL_RTCEx_SetTimeStamp+0xbe>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2201      	movs	r2, #1
 8009db0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2202      	movs	r2, #2
 8009db6:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 0206 	bic.w	r2, r2, #6
 8009dc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	4b1f      	ldr	r3, [pc, #124]	; (8009e5c <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	22ca      	movs	r2, #202	; 0xca
 8009df2:	625a      	str	r2, [r3, #36]	; 0x24
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2253      	movs	r2, #83	; 0x53
 8009dfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8009e14:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8009e26:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689a      	ldr	r2, [r3, #8]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e36:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	22ff      	movs	r2, #255	; 0xff
 8009e3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2201      	movs	r2, #1
 8009e44:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	fffff7f7 	.word	0xfffff7f7

08009e60 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e156      	b.n	800a12c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d106      	bne.n	8009e98 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f7f9 fd54 	bl	8003940 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f95b 	bl	800a15c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d00c      	beq.n	8009ec8 <HAL_SAI_Init+0x68>
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d80d      	bhi.n	8009ece <HAL_SAI_Init+0x6e>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <HAL_SAI_Init+0x5c>
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d003      	beq.n	8009ec2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009eba:	e008      	b.n	8009ece <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
      break;
 8009ec0:	e006      	b.n	8009ed0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009ec2:	2310      	movs	r3, #16
 8009ec4:	61fb      	str	r3, [r7, #28]
      break;
 8009ec6:	e003      	b.n	8009ed0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009ec8:	2320      	movs	r3, #32
 8009eca:	61fb      	str	r3, [r7, #28]
      break;
 8009ecc:	e000      	b.n	8009ed0 <HAL_SAI_Init+0x70>
      break;
 8009ece:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d81e      	bhi.n	8009f16 <HAL_SAI_Init+0xb6>
 8009ed8:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <HAL_SAI_Init+0x80>)
 8009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ede:	bf00      	nop
 8009ee0:	08009ef1 	.word	0x08009ef1
 8009ee4:	08009ef7 	.word	0x08009ef7
 8009ee8:	08009eff 	.word	0x08009eff
 8009eec:	08009f07 	.word	0x08009f07
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	617b      	str	r3, [r7, #20]
    }
    break;
 8009ef4:	e010      	b.n	8009f18 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009efa:	617b      	str	r3, [r7, #20]
    }
    break;
 8009efc:	e00c      	b.n	8009f18 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f02:	617b      	str	r3, [r7, #20]
    }
    break;
 8009f04:	e008      	b.n	8009f18 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f0a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	f043 0301 	orr.w	r3, r3, #1
 8009f12:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009f14:	e000      	b.n	8009f18 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009f16:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a85      	ldr	r2, [pc, #532]	; (800a134 <HAL_SAI_Init+0x2d4>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d004      	beq.n	8009f2c <HAL_SAI_Init+0xcc>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a84      	ldr	r2, [pc, #528]	; (800a138 <HAL_SAI_Init+0x2d8>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d103      	bne.n	8009f34 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009f2c:	4a83      	ldr	r2, [pc, #524]	; (800a13c <HAL_SAI_Init+0x2dc>)
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	e002      	b.n	8009f3a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009f34:	4a82      	ldr	r2, [pc, #520]	; (800a140 <HAL_SAI_Init+0x2e0>)
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d04c      	beq.n	8009fdc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a7a      	ldr	r2, [pc, #488]	; (800a134 <HAL_SAI_Init+0x2d4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d004      	beq.n	8009f5a <HAL_SAI_Init+0xfa>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a78      	ldr	r2, [pc, #480]	; (800a138 <HAL_SAI_Init+0x2d8>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d104      	bne.n	8009f64 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009f5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009f5e:	f7ff fa69 	bl	8009434 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f62:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a76      	ldr	r2, [pc, #472]	; (800a144 <HAL_SAI_Init+0x2e4>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d004      	beq.n	8009f78 <HAL_SAI_Init+0x118>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a75      	ldr	r2, [pc, #468]	; (800a148 <HAL_SAI_Init+0x2e8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d104      	bne.n	8009f82 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009f78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009f7c:	f7ff fa5a 	bl	8009434 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f80:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	025b      	lsls	r3, r3, #9
 8009f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f98:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4a6b      	ldr	r2, [pc, #428]	; (800a14c <HAL_SAI_Init+0x2ec>)
 8009f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa2:	08da      	lsrs	r2, r3, #3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009fa8:	68f9      	ldr	r1, [r7, #12]
 8009faa:	4b68      	ldr	r3, [pc, #416]	; (800a14c <HAL_SAI_Init+0x2ec>)
 8009fac:	fba3 2301 	umull	r2, r3, r3, r1
 8009fb0:	08da      	lsrs	r2, r3, #3
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	1aca      	subs	r2, r1, r3
 8009fbc:	2a08      	cmp	r2, #8
 8009fbe:	d904      	bls.n	8009fca <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d104      	bne.n	8009fdc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	085a      	lsrs	r2, r3, #1
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <HAL_SAI_Init+0x18c>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d109      	bne.n	800a000 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_SAI_Init+0x198>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e001      	b.n	8009ffc <HAL_SAI_Init+0x19c>
 8009ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	e008      	b.n	800a012 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a004:	2b01      	cmp	r3, #1
 800a006:	d102      	bne.n	800a00e <HAL_SAI_Init+0x1ae>
 800a008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a00c:	e000      	b.n	800a010 <HAL_SAI_Init+0x1b0>
 800a00e:	2300      	movs	r3, #0
 800a010:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6819      	ldr	r1, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	4b4c      	ldr	r3, [pc, #304]	; (800a150 <HAL_SAI_Init+0x2f0>)
 800a01e:	400b      	ands	r3, r1
 800a020:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6819      	ldr	r1, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a030:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a036:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03c:	431a      	orrs	r2, r3
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a04a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a056:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	051b      	lsls	r3, r3, #20
 800a05e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6859      	ldr	r1, [r3, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	4b38      	ldr	r3, [pc, #224]	; (800a154 <HAL_SAI_Init+0x2f4>)
 800a074:	400b      	ands	r3, r1
 800a076:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6859      	ldr	r1, [r3, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699a      	ldr	r2, [r3, #24]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	431a      	orrs	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6899      	ldr	r1, [r3, #8]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	4b2d      	ldr	r3, [pc, #180]	; (800a158 <HAL_SAI_Init+0x2f8>)
 800a0a2:	400b      	ands	r3, r1
 800a0a4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6899      	ldr	r1, [r3, #8]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a0b6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a0bc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a0c2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a0cc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68d9      	ldr	r1, [r3, #12]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a0e4:	400b      	ands	r3, r1
 800a0e6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68d9      	ldr	r1, [r3, #12]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0fc:	041b      	lsls	r3, r3, #16
 800a0fe:	431a      	orrs	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a104:	3b01      	subs	r3, #1
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3720      	adds	r7, #32
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	40015804 	.word	0x40015804
 800a138:	40015824 	.word	0x40015824
 800a13c:	40015800 	.word	0x40015800
 800a140:	40015c00 	.word	0x40015c00
 800a144:	40015c04 	.word	0x40015c04
 800a148:	40015c24 	.word	0x40015c24
 800a14c:	cccccccd 	.word	0xcccccccd
 800a150:	ff05c010 	.word	0xff05c010
 800a154:	ffff1ff0 	.word	0xffff1ff0
 800a158:	fff88000 	.word	0xfff88000

0800a15c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a164:	4b17      	ldr	r3, [pc, #92]	; (800a1c4 <SAI_Disable+0x68>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a17      	ldr	r2, [pc, #92]	; (800a1c8 <SAI_Disable+0x6c>)
 800a16a:	fba2 2303 	umull	r2, r3, r2, r3
 800a16e:	0b1b      	lsrs	r3, r3, #12
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a186:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	60fa      	str	r2, [r7, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10a      	bne.n	800a1a8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a198:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	72fb      	strb	r3, [r7, #11]
      break;
 800a1a6:	e006      	b.n	800a1b6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e8      	bne.n	800a188 <SAI_Disable+0x2c>

  return status;
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	2000001c 	.word	0x2000001c
 800a1c8:	95cbec1b 	.word	0x95cbec1b

0800a1cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e022      	b.n	800a224 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d105      	bne.n	800a1f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7f8 ff9d 	bl	8003130 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2203      	movs	r2, #3
 800a1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f814 	bl	800a22c <HAL_SD_InitCard>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e00a      	b.n	800a224 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a22c:	b5b0      	push	{r4, r5, r7, lr}
 800a22e:	b08e      	sub	sp, #56	; 0x38
 800a230:	af04      	add	r7, sp, #16
 800a232:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a234:	2300      	movs	r3, #0
 800a236:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a238:	2300      	movs	r3, #0
 800a23a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a23c:	2300      	movs	r3, #0
 800a23e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a240:	2300      	movs	r3, #0
 800a242:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a244:	2300      	movs	r3, #0
 800a246:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a248:	2376      	movs	r3, #118	; 0x76
 800a24a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681d      	ldr	r5, [r3, #0]
 800a250:	466c      	mov	r4, sp
 800a252:	f107 0314 	add.w	r3, r7, #20
 800a256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a25a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a25e:	f107 0308 	add.w	r3, r7, #8
 800a262:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a264:	4628      	mov	r0, r5
 800a266:	f003 fafd 	bl	800d864 <SDMMC_Init>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e059      	b.n	800a330 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a28a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4618      	mov	r0, r3
 800a292:	f003 fb31 	bl	800d8f8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2a4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a2a6:	2002      	movs	r0, #2
 800a2a8:	f7fb fc66 	bl	8005b78 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fff3 	bl	800b298 <SD_PowerON>
 800a2b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00b      	beq.n	800a2d2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e02e      	b.n	800a330 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 ff12 	bl	800b0fc <SD_InitCard>
 800a2d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e01b      	b.n	800a330 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a300:	4618      	mov	r0, r3
 800a302:	f003 fb8b 	bl	800da1c <SDMMC_CmdBlockLength>
 800a306:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00f      	beq.n	800a32e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a09      	ldr	r2, [pc, #36]	; (800a338 <HAL_SD_InitCard+0x10c>)
 800a314:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3728      	adds	r7, #40	; 0x28
 800a334:	46bd      	mov	sp, r7
 800a336:	bdb0      	pop	{r4, r5, r7, pc}
 800a338:	004005ff 	.word	0x004005ff

0800a33c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08c      	sub	sp, #48	; 0x30
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d107      	bne.n	800a364 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a358:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e0c3      	b.n	800a4ec <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	f040 80bc 	bne.w	800a4ea <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	441a      	add	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a382:	429a      	cmp	r2, r3
 800a384:	d907      	bls.n	800a396 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e0aa      	b.n	800a4ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2203      	movs	r2, #3
 800a39a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a3b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ba:	4a4e      	ldr	r2, [pc, #312]	; (800a4f4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a3bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c2:	4a4d      	ldr	r2, [pc, #308]	; (800a4f8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a3c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3380      	adds	r3, #128	; 0x80
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	025b      	lsls	r3, r3, #9
 800a404:	089b      	lsrs	r3, r3, #2
 800a406:	f7fc f947 	bl	8006698 <HAL_DMA_Start_IT>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d017      	beq.n	800a440 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a41e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a35      	ldr	r2, [pc, #212]	; (800a4fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e055      	b.n	800a4ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f042 0208 	orr.w	r2, r2, #8
 800a44e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a454:	2b01      	cmp	r3, #1
 800a456:	d002      	beq.n	800a45e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	025b      	lsls	r3, r3, #9
 800a45c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a45e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a462:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	025b      	lsls	r3, r3, #9
 800a468:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a46a:	2390      	movs	r3, #144	; 0x90
 800a46c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a46e:	2302      	movs	r3, #2
 800a470:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a472:	2300      	movs	r3, #0
 800a474:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a476:	2301      	movs	r3, #1
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f107 0210 	add.w	r2, r7, #16
 800a482:	4611      	mov	r1, r2
 800a484:	4618      	mov	r0, r3
 800a486:	f003 fa9d 	bl	800d9c4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d90a      	bls.n	800a4a6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2282      	movs	r2, #130	; 0x82
 800a494:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a49c:	4618      	mov	r0, r3
 800a49e:	f003 fb01 	bl	800daa4 <SDMMC_CmdReadMultiBlock>
 800a4a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a4a4:	e009      	b.n	800a4ba <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2281      	movs	r2, #129	; 0x81
 800a4aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f003 fad4 	bl	800da60 <SDMMC_CmdReadSingleBlock>
 800a4b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d012      	beq.n	800a4e6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a0d      	ldr	r2, [pc, #52]	; (800a4fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a4c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e002      	b.n	800a4ec <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e000      	b.n	800a4ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a4ea:	2302      	movs	r3, #2
  }
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3730      	adds	r7, #48	; 0x30
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	0800af0b 	.word	0x0800af0b
 800a4f8:	0800af7d 	.word	0x0800af7d
 800a4fc:	004005ff 	.word	0x004005ff

0800a500 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08c      	sub	sp, #48	; 0x30
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d107      	bne.n	800a528 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e0c6      	b.n	800a6b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b01      	cmp	r3, #1
 800a532:	f040 80bf 	bne.w	800a6b4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	441a      	add	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a546:	429a      	cmp	r2, r3
 800a548:	d907      	bls.n	800a55a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e0ad      	b.n	800a6b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2203      	movs	r2, #3
 800a55e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2200      	movs	r2, #0
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f042 021a 	orr.w	r2, r2, #26
 800a578:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57e:	4a50      	ldr	r2, [pc, #320]	; (800a6c0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a586:	4a4f      	ldr	r2, [pc, #316]	; (800a6c4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a588:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	2200      	movs	r2, #0
 800a590:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a596:	2b01      	cmp	r3, #1
 800a598:	d002      	beq.n	800a5a0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	025b      	lsls	r3, r3, #9
 800a59e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d90a      	bls.n	800a5bc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	22a0      	movs	r2, #160	; 0xa0
 800a5aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f003 faba 	bl	800db2c <SDMMC_CmdWriteMultiBlock>
 800a5b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a5ba:	e009      	b.n	800a5d0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2290      	movs	r2, #144	; 0x90
 800a5c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f003 fa8d 	bl	800dae8 <SDMMC_CmdWriteSingleBlock>
 800a5ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d012      	beq.n	800a5fc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a3b      	ldr	r2, [pc, #236]	; (800a6c8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a5dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e05c      	b.n	800a6b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0208 	orr.w	r2, r2, #8
 800a60a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a610:	2240      	movs	r2, #64	; 0x40
 800a612:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3380      	adds	r3, #128	; 0x80
 800a63c:	461a      	mov	r2, r3
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	025b      	lsls	r3, r3, #9
 800a642:	089b      	lsrs	r3, r3, #2
 800a644:	f7fc f828 	bl	8006698 <HAL_DMA_Start_IT>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d01a      	beq.n	800a684 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 021a 	bic.w	r2, r2, #26
 800a65c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a19      	ldr	r2, [pc, #100]	; (800a6c8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a664:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e018      	b.n	800a6b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a688:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	025b      	lsls	r3, r3, #9
 800a68e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a690:	2390      	movs	r3, #144	; 0x90
 800a692:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a698:	2300      	movs	r3, #0
 800a69a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f107 0210 	add.w	r2, r7, #16
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f003 f98a 	bl	800d9c4 <SDMMC_ConfigData>

      return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	e000      	b.n	800a6b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a6b4:	2302      	movs	r3, #2
  }
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3730      	adds	r7, #48	; 0x30
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	0800aee1 	.word	0x0800aee1
 800a6c4:	0800af7d 	.word	0x0800af7d
 800a6c8:	004005ff 	.word	0x004005ff

0800a6cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d008      	beq.n	800a6fa <HAL_SD_IRQHandler+0x2e>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 ffef 	bl	800b6d6 <SD_Read_IT>
 800a6f8:	e15a      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 808d 	beq.w	800a824 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a712:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b9a      	ldr	r3, [pc, #616]	; (800a988 <HAL_SD_IRQHandler+0x2bc>)
 800a720:	400b      	ands	r3, r1
 800a722:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0201 	bic.w	r2, r2, #1
 800a732:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f003 0308 	and.w	r3, r3, #8
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d039      	beq.n	800a7b2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	2b00      	cmp	r3, #0
 800a746:	d104      	bne.n	800a752 <HAL_SD_IRQHandler+0x86>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f003 0320 	and.w	r3, r3, #32
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d011      	beq.n	800a776 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4618      	mov	r0, r3
 800a758:	f003 fa0a 	bl	800db70 <SDMMC_CmdStopTransfer>
 800a75c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d008      	beq.n	800a776 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	431a      	orrs	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f921 	bl	800a9b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a77e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	2b00      	cmp	r3, #0
 800a796:	d104      	bne.n	800a7a2 <HAL_SD_IRQHandler+0xd6>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f003 fe72 	bl	800e48c <HAL_SD_RxCpltCallback>
 800a7a8:	e102      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f003 fe64 	bl	800e478 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7b0:	e0fe      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 80f9 	beq.w	800a9b0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d011      	beq.n	800a7ec <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f003 f9cf 	bl	800db70 <SDMMC_CmdStopTransfer>
 800a7d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d008      	beq.n	800a7ec <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	431a      	orrs	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f8e6 	bl	800a9b8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f040 80dc 	bne.w	800a9b0 <HAL_SD_IRQHandler+0x2e4>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 80d6 	bne.w	800a9b0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f022 0208 	bic.w	r2, r2, #8
 800a812:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f003 fe2b 	bl	800e478 <HAL_SD_TxCpltCallback>
}
 800a822:	e0c5      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d008      	beq.n	800a844 <HAL_SD_IRQHandler+0x178>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f003 0308 	and.w	r3, r3, #8
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 ff9b 	bl	800b778 <SD_Write_IT>
 800a842:	e0b5      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a84a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 80ae 	beq.w	800a9b0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a866:	f043 0202 	orr.w	r2, r3, #2
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a874:	f003 0308 	and.w	r3, r3, #8
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d005      	beq.n	800a888 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a880:	f043 0208 	orr.w	r2, r3, #8
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d005      	beq.n	800a8a2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89a:	f043 0220 	orr.w	r2, r3, #32
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a8:	f003 0310 	and.w	r3, r3, #16
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b4:	f043 0210 	orr.w	r2, r3, #16
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f240 523a 	movw	r2, #1338	; 0x53a
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a8d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f003 f948 	bl	800db70 <SDMMC_CmdStopTransfer>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e6:	431a      	orrs	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f003 0308 	and.w	r3, r3, #8
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00a      	beq.n	800a90c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f857 	bl	800a9b8 <HAL_SD_ErrorCallback>
}
 800a90a:	e051      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a912:	2b00      	cmp	r3, #0
 800a914:	d04c      	beq.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f003 0310 	and.w	r3, r3, #16
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d104      	bne.n	800a92a <HAL_SD_IRQHandler+0x25e>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f003 0320 	and.w	r3, r3, #32
 800a926:	2b00      	cmp	r3, #0
 800a928:	d011      	beq.n	800a94e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92e:	4a17      	ldr	r2, [pc, #92]	; (800a98c <HAL_SD_IRQHandler+0x2c0>)
 800a930:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a936:	4618      	mov	r0, r3
 800a938:	f7fb ff0e 	bl	8006758 <HAL_DMA_Abort_IT>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d036      	beq.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a946:	4618      	mov	r0, r3
 800a948:	f000 fb6a 	bl	800b020 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a94c:	e030      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b00      	cmp	r3, #0
 800a956:	d104      	bne.n	800a962 <HAL_SD_IRQHandler+0x296>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d018      	beq.n	800a994 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a966:	4a0a      	ldr	r2, [pc, #40]	; (800a990 <HAL_SD_IRQHandler+0x2c4>)
 800a968:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fb fef2 	bl	8006758 <HAL_DMA_Abort_IT>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d01a      	beq.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fb85 	bl	800b08e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a984:	e014      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
 800a986:	bf00      	nop
 800a988:	ffff3ec5 	.word	0xffff3ec5
 800a98c:	0800b021 	.word	0x0800b021
 800a990:	0800b08f 	.word	0x0800b08f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f003 fd5b 	bl	800e464 <HAL_SD_AbortCallback>
}
 800a9ae:	e7ff      	b.n	800a9b0 <HAL_SD_IRQHandler+0x2e4>
 800a9b0:	bf00      	nop
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9da:	0f9b      	lsrs	r3, r3, #30
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9e6:	0e9b      	lsrs	r3, r3, #26
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 030f 	and.w	r3, r3, #15
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9f8:	0e1b      	lsrs	r3, r3, #24
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa0a:	0c1b      	lsrs	r3, r3, #16
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa16:	0a1b      	lsrs	r3, r3, #8
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa2c:	0d1b      	lsrs	r3, r3, #20
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa38:	0c1b      	lsrs	r3, r3, #16
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f003 030f 	and.w	r3, r3, #15
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa4a:	0bdb      	lsrs	r3, r3, #15
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa5c:	0b9b      	lsrs	r3, r3, #14
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa6e:	0b5b      	lsrs	r3, r3, #13
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa80:	0b1b      	lsrs	r3, r3, #12
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2200      	movs	r2, #0
 800aa92:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d163      	bne.n	800ab64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaa0:	009a      	lsls	r2, r3, #2
 800aaa2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800aaac:	0f92      	lsrs	r2, r2, #30
 800aaae:	431a      	orrs	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aab8:	0edb      	lsrs	r3, r3, #27
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	f003 0307 	and.w	r3, r3, #7
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaca:	0e1b      	lsrs	r3, r3, #24
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aadc:	0d5b      	lsrs	r3, r3, #21
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	f003 0307 	and.w	r3, r3, #7
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaee:	0c9b      	lsrs	r3, r3, #18
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab00:	0bdb      	lsrs	r3, r3, #15
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	7e1b      	ldrb	r3, [r3, #24]
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	3302      	adds	r3, #2
 800ab24:	2201      	movs	r2, #1
 800ab26:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ab2e:	fb03 f202 	mul.w	r2, r3, r2
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	7a1b      	ldrb	r3, [r3, #8]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	f003 030f 	and.w	r3, r3, #15
 800ab40:	2201      	movs	r2, #1
 800ab42:	409a      	lsls	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ab50:	0a52      	lsrs	r2, r2, #9
 800ab52:	fb03 f202 	mul.w	r2, r3, r2
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab60:	661a      	str	r2, [r3, #96]	; 0x60
 800ab62:	e031      	b.n	800abc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d11d      	bne.n	800aba8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab70:	041b      	lsls	r3, r3, #16
 800ab72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab7a:	0c1b      	lsrs	r3, r3, #16
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	3301      	adds	r3, #1
 800ab88:	029a      	lsls	r2, r3, #10
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	661a      	str	r2, [r3, #96]	; 0x60
 800aba6:	e00f      	b.n	800abc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a58      	ldr	r2, [pc, #352]	; (800ad10 <HAL_SD_GetCardCSD+0x344>)
 800abae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e09d      	b.n	800ad04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abcc:	0b9b      	lsrs	r3, r3, #14
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abde:	09db      	lsrs	r3, r3, #7
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac00:	0fdb      	lsrs	r3, r3, #31
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0c:	0f5b      	lsrs	r3, r3, #29
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f003 0303 	and.w	r3, r3, #3
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1e:	0e9b      	lsrs	r3, r3, #26
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac30:	0d9b      	lsrs	r3, r3, #22
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	f003 030f 	and.w	r3, r3, #15
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac42:	0d5b      	lsrs	r3, r3, #21
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5e:	0c1b      	lsrs	r3, r3, #16
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac72:	0bdb      	lsrs	r3, r3, #15
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac86:	0b9b      	lsrs	r3, r3, #14
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac9a:	0b5b      	lsrs	r3, r3, #13
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acae:	0b1b      	lsrs	r3, r3, #12
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc2:	0a9b      	lsrs	r3, r3, #10
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f003 0303 	and.w	r3, r3, #3
 800acca:	b2da      	uxtb	r2, r3
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd6:	0a1b      	lsrs	r3, r3, #8
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f003 0303 	and.w	r3, r3, #3
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acea:	085b      	lsrs	r3, r3, #1
 800acec:	b2db      	uxtb	r3, r3
 800acee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	004005ff 	.word	0x004005ff

0800ad14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ad6c:	b5b0      	push	{r4, r5, r7, lr}
 800ad6e:	b08e      	sub	sp, #56	; 0x38
 800ad70:	af04      	add	r7, sp, #16
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2203      	movs	r2, #3
 800ad80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d02e      	beq.n	800adea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad92:	d106      	bne.n	800ada2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	639a      	str	r2, [r3, #56]	; 0x38
 800ada0:	e029      	b.n	800adf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ada8:	d10a      	bne.n	800adc0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fb2a 	bl	800b404 <SD_WideBus_Enable>
 800adb0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	431a      	orrs	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	639a      	str	r2, [r3, #56]	; 0x38
 800adbe:	e01a      	b.n	800adf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10a      	bne.n	800addc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fb67 	bl	800b49a <SD_WideBus_Disable>
 800adcc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	431a      	orrs	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	639a      	str	r2, [r3, #56]	; 0x38
 800adda:	e00c      	b.n	800adf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	639a      	str	r2, [r3, #56]	; 0x38
 800ade8:	e005      	b.n	800adf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00b      	beq.n	800ae16 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a26      	ldr	r2, [pc, #152]	; (800ae9c <HAL_SD_ConfigWideBusOperation+0x130>)
 800ae04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae14:	e01f      	b.n	800ae56 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681d      	ldr	r5, [r3, #0]
 800ae3c:	466c      	mov	r4, sp
 800ae3e:	f107 0314 	add.w	r3, r7, #20
 800ae42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae4a:	f107 0308 	add.w	r3, r7, #8
 800ae4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae50:	4628      	mov	r0, r5
 800ae52:	f002 fd07 	bl	800d864 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f002 fddc 	bl	800da1c <SDMMC_CmdBlockLength>
 800ae64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00c      	beq.n	800ae86 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a0a      	ldr	r2, [pc, #40]	; (800ae9c <HAL_SD_ConfigWideBusOperation+0x130>)
 800ae72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ae8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3728      	adds	r7, #40	; 0x28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bdb0      	pop	{r4, r5, r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	004005ff 	.word	0x004005ff

0800aea0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aeac:	f107 030c 	add.w	r3, r7, #12
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa7e 	bl	800b3b4 <SD_SendStatus>
 800aeb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	431a      	orrs	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	0a5b      	lsrs	r3, r3, #9
 800aed0:	f003 030f 	and.w	r3, r3, #15
 800aed4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800aed6:	693b      	ldr	r3, [r7, #16]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aefc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800aefe:	bf00      	nop
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af16:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1c:	2b82      	cmp	r3, #130	; 0x82
 800af1e:	d111      	bne.n	800af44 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4618      	mov	r0, r3
 800af26:	f002 fe23 	bl	800db70 <SDMMC_CmdStopTransfer>
 800af2a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d008      	beq.n	800af44 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	431a      	orrs	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7ff fd3a 	bl	800a9b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f022 0208 	bic.w	r2, r2, #8
 800af52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f240 523a 	movw	r2, #1338	; 0x53a
 800af5c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2201      	movs	r2, #1
 800af62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f003 fa8d 	bl	800e48c <HAL_SD_RxCpltCallback>
#endif
}
 800af72:	bf00      	nop
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af88:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7fb fc06 	bl	800679c <HAL_DMA_GetError>
 800af90:	4603      	mov	r3, r0
 800af92:	2b02      	cmp	r3, #2
 800af94:	d03e      	beq.n	800b014 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af9c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afa4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d002      	beq.n	800afb2 <SD_DMAError+0x36>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d12d      	bne.n	800b00e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a19      	ldr	r2, [pc, #100]	; (800b01c <SD_DMAError+0xa0>)
 800afb8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800afc8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800afd6:	6978      	ldr	r0, [r7, #20]
 800afd8:	f7ff ff62 	bl	800aea0 <HAL_SD_GetCardState>
 800afdc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b06      	cmp	r3, #6
 800afe2:	d002      	beq.n	800afea <SD_DMAError+0x6e>
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b05      	cmp	r3, #5
 800afe8:	d10a      	bne.n	800b000 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4618      	mov	r0, r3
 800aff0:	f002 fdbe 	bl	800db70 <SDMMC_CmdStopTransfer>
 800aff4:	4602      	mov	r2, r0
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affa:	431a      	orrs	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	2200      	movs	r2, #0
 800b00c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b00e:	6978      	ldr	r0, [r7, #20]
 800b010:	f7ff fcd2 	bl	800a9b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b014:	bf00      	nop
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	004005ff 	.word	0x004005ff

0800b020 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f240 523a 	movw	r2, #1338	; 0x53a
 800b036:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f7ff ff31 	bl	800aea0 <HAL_SD_GetCardState>
 800b03e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2b06      	cmp	r3, #6
 800b052:	d002      	beq.n	800b05a <SD_DMATxAbort+0x3a>
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b05      	cmp	r3, #5
 800b058:	d10a      	bne.n	800b070 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4618      	mov	r0, r3
 800b060:	f002 fd86 	bl	800db70 <SDMMC_CmdStopTransfer>
 800b064:	4602      	mov	r2, r0
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06a:	431a      	orrs	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b074:	2b00      	cmp	r3, #0
 800b076:	d103      	bne.n	800b080 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f003 f9f3 	bl	800e464 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b07e:	e002      	b.n	800b086 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fc99 	bl	800a9b8 <HAL_SD_ErrorCallback>
}
 800b086:	bf00      	nop
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b0a4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f7ff fefa 	bl	800aea0 <HAL_SD_GetCardState>
 800b0ac:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b06      	cmp	r3, #6
 800b0c0:	d002      	beq.n	800b0c8 <SD_DMARxAbort+0x3a>
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	2b05      	cmp	r3, #5
 800b0c6:	d10a      	bne.n	800b0de <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f002 fd4f 	bl	800db70 <SDMMC_CmdStopTransfer>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d103      	bne.n	800b0ee <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f003 f9bc 	bl	800e464 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b0ec:	e002      	b.n	800b0f4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff fc62 	bl	800a9b8 <HAL_SD_ErrorCallback>
}
 800b0f4:	bf00      	nop
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b0fc:	b5b0      	push	{r4, r5, r7, lr}
 800b0fe:	b094      	sub	sp, #80	; 0x50
 800b100:	af04      	add	r7, sp, #16
 800b102:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b104:	2301      	movs	r3, #1
 800b106:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f002 fc01 	bl	800d914 <SDMMC_GetPowerState>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d102      	bne.n	800b11e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b118:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b11c:	e0b8      	b.n	800b290 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b122:	2b03      	cmp	r3, #3
 800b124:	d02f      	beq.n	800b186 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f002 fe2b 	bl	800dd86 <SDMMC_CmdSendCID>
 800b130:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <SD_InitCard+0x40>
    {
      return errorstate;
 800b138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13a:	e0a9      	b.n	800b290 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2100      	movs	r1, #0
 800b142:	4618      	mov	r0, r3
 800b144:	f002 fc2b 	bl	800d99e <SDMMC_GetResponse>
 800b148:	4602      	mov	r2, r0
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2104      	movs	r1, #4
 800b154:	4618      	mov	r0, r3
 800b156:	f002 fc22 	bl	800d99e <SDMMC_GetResponse>
 800b15a:	4602      	mov	r2, r0
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2108      	movs	r1, #8
 800b166:	4618      	mov	r0, r3
 800b168:	f002 fc19 	bl	800d99e <SDMMC_GetResponse>
 800b16c:	4602      	mov	r2, r0
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	210c      	movs	r1, #12
 800b178:	4618      	mov	r0, r3
 800b17a:	f002 fc10 	bl	800d99e <SDMMC_GetResponse>
 800b17e:	4602      	mov	r2, r0
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d00d      	beq.n	800b1aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f107 020e 	add.w	r2, r7, #14
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f002 fe31 	bl	800de00 <SDMMC_CmdSetRelAdd>
 800b19e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <SD_InitCard+0xae>
    {
      return errorstate;
 800b1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a8:	e072      	b.n	800b290 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d036      	beq.n	800b220 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b1b2:	89fb      	ldrh	r3, [r7, #14]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c2:	041b      	lsls	r3, r3, #16
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f002 fdfb 	bl	800ddc2 <SDMMC_CmdSendCSD>
 800b1cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d6:	e05b      	b.n	800b290 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2100      	movs	r1, #0
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f002 fbdd 	bl	800d99e <SDMMC_GetResponse>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2104      	movs	r1, #4
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f002 fbd4 	bl	800d99e <SDMMC_GetResponse>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2108      	movs	r1, #8
 800b202:	4618      	mov	r0, r3
 800b204:	f002 fbcb 	bl	800d99e <SDMMC_GetResponse>
 800b208:	4602      	mov	r2, r0
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	210c      	movs	r1, #12
 800b214:	4618      	mov	r0, r3
 800b216:	f002 fbc2 	bl	800d99e <SDMMC_GetResponse>
 800b21a:	4602      	mov	r2, r0
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2104      	movs	r1, #4
 800b226:	4618      	mov	r0, r3
 800b228:	f002 fbb9 	bl	800d99e <SDMMC_GetResponse>
 800b22c:	4603      	mov	r3, r0
 800b22e:	0d1a      	lsrs	r2, r3, #20
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b234:	f107 0310 	add.w	r3, r7, #16
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff fbc6 	bl	800a9cc <HAL_SD_GetCardCSD>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b246:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b24a:	e021      	b.n	800b290 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6819      	ldr	r1, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b254:	041b      	lsls	r3, r3, #16
 800b256:	2200      	movs	r2, #0
 800b258:	461c      	mov	r4, r3
 800b25a:	4615      	mov	r5, r2
 800b25c:	4622      	mov	r2, r4
 800b25e:	462b      	mov	r3, r5
 800b260:	4608      	mov	r0, r1
 800b262:	f002 fca7 	bl	800dbb4 <SDMMC_CmdSelDesel>
 800b266:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <SD_InitCard+0x176>
  {
    return errorstate;
 800b26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b270:	e00e      	b.n	800b290 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681d      	ldr	r5, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	466c      	mov	r4, sp
 800b27a:	f103 0210 	add.w	r2, r3, #16
 800b27e:	ca07      	ldmia	r2, {r0, r1, r2}
 800b280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b284:	3304      	adds	r3, #4
 800b286:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b288:	4628      	mov	r0, r5
 800b28a:	f002 faeb 	bl	800d864 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3740      	adds	r7, #64	; 0x40
 800b294:	46bd      	mov	sp, r7
 800b296:	bdb0      	pop	{r4, r5, r7, pc}

0800b298 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	617b      	str	r3, [r7, #20]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f002 fca2 	bl	800dbfa <SDMMC_CmdGoIdleState>
 800b2b6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	e072      	b.n	800b3a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 fcb5 	bl	800dc36 <SDMMC_CmdOperCond>
 800b2cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00d      	beq.n	800b2f0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f002 fc8b 	bl	800dbfa <SDMMC_CmdGoIdleState>
 800b2e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d004      	beq.n	800b2f6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	e05b      	b.n	800b3a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d137      	bne.n	800b36e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2100      	movs	r1, #0
 800b304:	4618      	mov	r0, r3
 800b306:	f002 fcb5 	bl	800dc74 <SDMMC_CmdAppCommand>
 800b30a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d02d      	beq.n	800b36e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b312:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b316:	e047      	b.n	800b3a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2100      	movs	r1, #0
 800b31e:	4618      	mov	r0, r3
 800b320:	f002 fca8 	bl	800dc74 <SDMMC_CmdAppCommand>
 800b324:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <SD_PowerON+0x98>
    {
      return errorstate;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	e03b      	b.n	800b3a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	491e      	ldr	r1, [pc, #120]	; (800b3b0 <SD_PowerON+0x118>)
 800b336:	4618      	mov	r0, r3
 800b338:	f002 fcbe 	bl	800dcb8 <SDMMC_CmdAppOperCommand>
 800b33c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b344:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b348:	e02e      	b.n	800b3a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2100      	movs	r1, #0
 800b350:	4618      	mov	r0, r3
 800b352:	f002 fb24 	bl	800d99e <SDMMC_GetResponse>
 800b356:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	0fdb      	lsrs	r3, r3, #31
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d101      	bne.n	800b364 <SD_PowerON+0xcc>
 800b360:	2301      	movs	r3, #1
 800b362:	e000      	b.n	800b366 <SD_PowerON+0xce>
 800b364:	2300      	movs	r3, #0
 800b366:	613b      	str	r3, [r7, #16]

    count++;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	3301      	adds	r3, #1
 800b36c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b374:	4293      	cmp	r3, r2
 800b376:	d802      	bhi.n	800b37e <SD_PowerON+0xe6>
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d0cc      	beq.n	800b318 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b384:	4293      	cmp	r3, r2
 800b386:	d902      	bls.n	800b38e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b38c:	e00c      	b.n	800b3a8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d003      	beq.n	800b3a0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	645a      	str	r2, [r3, #68]	; 0x44
 800b39e:	e002      	b.n	800b3a6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	c1100000 	.word	0xc1100000

0800b3b4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d102      	bne.n	800b3ca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b3c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3c8:	e018      	b.n	800b3fc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d2:	041b      	lsls	r3, r3, #16
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	f002 fd33 	bl	800de42 <SDMMC_CmdSendStatus>
 800b3dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	e009      	b.n	800b3fc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f002 fad5 	bl	800d99e <SDMMC_GetResponse>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b40c:	2300      	movs	r3, #0
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	2300      	movs	r3, #0
 800b412:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2100      	movs	r1, #0
 800b41a:	4618      	mov	r0, r3
 800b41c:	f002 fabf 	bl	800d99e <SDMMC_GetResponse>
 800b420:	4603      	mov	r3, r0
 800b422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b42a:	d102      	bne.n	800b432 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b42c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b430:	e02f      	b.n	800b492 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b432:	f107 030c 	add.w	r3, r7, #12
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f879 	bl	800b530 <SD_FindSCR>
 800b43e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	e023      	b.n	800b492 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d01c      	beq.n	800b48e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b45c:	041b      	lsls	r3, r3, #16
 800b45e:	4619      	mov	r1, r3
 800b460:	4610      	mov	r0, r2
 800b462:	f002 fc07 	bl	800dc74 <SDMMC_CmdAppCommand>
 800b466:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	e00f      	b.n	800b492 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2102      	movs	r1, #2
 800b478:	4618      	mov	r0, r3
 800b47a:	f002 fc41 	bl	800dd00 <SDMMC_CmdBusWidth>
 800b47e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	e003      	b.n	800b492 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b48a:	2300      	movs	r3, #0
 800b48c:	e001      	b.n	800b492 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b48e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b086      	sub	sp, #24
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60fb      	str	r3, [r7, #12]
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f002 fa74 	bl	800d99e <SDMMC_GetResponse>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4c0:	d102      	bne.n	800b4c8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4c6:	e02f      	b.n	800b528 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b4c8:	f107 030c 	add.w	r3, r7, #12
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f82e 	bl	800b530 <SD_FindSCR>
 800b4d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	e023      	b.n	800b528 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d01c      	beq.n	800b524 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4f2:	041b      	lsls	r3, r3, #16
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	f002 fbbc 	bl	800dc74 <SDMMC_CmdAppCommand>
 800b4fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d001      	beq.n	800b508 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	e00f      	b.n	800b528 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2100      	movs	r1, #0
 800b50e:	4618      	mov	r0, r3
 800b510:	f002 fbf6 	bl	800dd00 <SDMMC_CmdBusWidth>
 800b514:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	e003      	b.n	800b528 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b520:	2300      	movs	r3, #0
 800b522:	e001      	b.n	800b528 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b530:	b590      	push	{r4, r7, lr}
 800b532:	b08f      	sub	sp, #60	; 0x3c
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b53a:	f7fa fb11 	bl	8005b60 <HAL_GetTick>
 800b53e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b544:	2300      	movs	r3, #0
 800b546:	60bb      	str	r3, [r7, #8]
 800b548:	2300      	movs	r3, #0
 800b54a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2108      	movs	r1, #8
 800b556:	4618      	mov	r0, r3
 800b558:	f002 fa60 	bl	800da1c <SDMMC_CmdBlockLength>
 800b55c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	e0b2      	b.n	800b6ce <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b570:	041b      	lsls	r3, r3, #16
 800b572:	4619      	mov	r1, r3
 800b574:	4610      	mov	r0, r2
 800b576:	f002 fb7d 	bl	800dc74 <SDMMC_CmdAppCommand>
 800b57a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	e0a3      	b.n	800b6ce <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b58a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b58c:	2308      	movs	r3, #8
 800b58e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b590:	2330      	movs	r3, #48	; 0x30
 800b592:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b594:	2302      	movs	r3, #2
 800b596:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b598:	2300      	movs	r3, #0
 800b59a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b59c:	2301      	movs	r3, #1
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f107 0210 	add.w	r2, r7, #16
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f002 fa0a 	bl	800d9c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f002 fbc5 	bl	800dd44 <SDMMC_CmdSendSCR>
 800b5ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d02a      	beq.n	800b618 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	e083      	b.n	800b6ce <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00f      	beq.n	800b5f4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6819      	ldr	r1, [r3, #0]
 800b5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	f107 0208 	add.w	r2, r7, #8
 800b5e0:	18d4      	adds	r4, r2, r3
 800b5e2:	4608      	mov	r0, r1
 800b5e4:	f002 f96a 	bl	800d8bc <SDMMC_ReadFIFO>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	6023      	str	r3, [r4, #0]
      index++;
 800b5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f2:	e006      	b.n	800b602 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d012      	beq.n	800b628 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b602:	f7fa faad 	bl	8005b60 <HAL_GetTick>
 800b606:	4602      	mov	r2, r0
 800b608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b610:	d102      	bne.n	800b618 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b612:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b616:	e05a      	b.n	800b6ce <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b61e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0cf      	beq.n	800b5c6 <SD_FindSCR+0x96>
 800b626:	e000      	b.n	800b62a <SD_FindSCR+0xfa>
      break;
 800b628:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b630:	f003 0308 	and.w	r3, r3, #8
 800b634:	2b00      	cmp	r3, #0
 800b636:	d005      	beq.n	800b644 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2208      	movs	r2, #8
 800b63e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b640:	2308      	movs	r3, #8
 800b642:	e044      	b.n	800b6ce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2202      	movs	r2, #2
 800b658:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b65a:	2302      	movs	r3, #2
 800b65c:	e037      	b.n	800b6ce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b664:	f003 0320 	and.w	r3, r3, #32
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d005      	beq.n	800b678 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2220      	movs	r2, #32
 800b672:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b674:	2320      	movs	r3, #32
 800b676:	e02a      	b.n	800b6ce <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f240 523a 	movw	r2, #1338	; 0x53a
 800b680:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	061a      	lsls	r2, r3, #24
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	021b      	lsls	r3, r3, #8
 800b68a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b68e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b698:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	0e1b      	lsrs	r3, r3, #24
 800b69e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	601a      	str	r2, [r3, #0]
    scr++;
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	061a      	lsls	r2, r3, #24
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	021b      	lsls	r3, r3, #8
 800b6b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6b6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	0a1b      	lsrs	r3, r3, #8
 800b6bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b6c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	0e1b      	lsrs	r3, r3, #24
 800b6c6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	373c      	adds	r7, #60	; 0x3c
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd90      	pop	{r4, r7, pc}

0800b6d6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b086      	sub	sp, #24
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d03f      	beq.n	800b770 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	617b      	str	r3, [r7, #20]
 800b6f4:	e033      	b.n	800b75e <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f002 f8de 	bl	800d8bc <SDMMC_ReadFIFO>
 800b700:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	b2da      	uxtb	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3301      	adds	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	3b01      	subs	r3, #1
 800b714:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	0a1b      	lsrs	r3, r3, #8
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	3301      	adds	r3, #1
 800b724:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	3b01      	subs	r3, #1
 800b72a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	0c1b      	lsrs	r3, r3, #16
 800b730:	b2da      	uxtb	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	3301      	adds	r3, #1
 800b73a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	3b01      	subs	r3, #1
 800b740:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	0e1b      	lsrs	r3, r3, #24
 800b746:	b2da      	uxtb	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3301      	adds	r3, #1
 800b750:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	3b01      	subs	r3, #1
 800b756:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	3301      	adds	r3, #1
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	2b07      	cmp	r3, #7
 800b762:	d9c8      	bls.n	800b6f6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b770:	bf00      	nop
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a1b      	ldr	r3, [r3, #32]
 800b784:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d043      	beq.n	800b81a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]
 800b796:	e037      	b.n	800b808 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	021a      	lsls	r2, r3, #8
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	041a      	lsls	r2, r3, #16
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	061a      	lsls	r2, r3, #24
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f107 0208 	add.w	r2, r7, #8
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f002 f86a 	bl	800d8d6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	3301      	adds	r3, #1
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2b07      	cmp	r3, #7
 800b80c:	d9c4      	bls.n	800b798 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b81a:	bf00      	nop
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d101      	bne.n	800b836 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e025      	b.n	800b882 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7f8 f86e 	bl	800392c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2202      	movs	r2, #2
 800b854:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3304      	adds	r3, #4
 800b860:	4619      	mov	r1, r3
 800b862:	4610      	mov	r0, r2
 800b864:	f001 fefc 	bl	800d660 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	461a      	mov	r2, r3
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	f001 ff50 	bl	800d718 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b086      	sub	sp, #24
 800b88e:	af00      	add	r7, sp, #0
 800b890:	60f8      	str	r0, [r7, #12]
 800b892:	60b9      	str	r1, [r7, #8]
 800b894:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b89c:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d101      	bne.n	800b8a8 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	e021      	b.n	800b8ec <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d002      	beq.n	800b8b4 <HAL_SDRAM_SendCommand+0x2a>
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	2b05      	cmp	r3, #5
 800b8b2:	d118      	bne.n	800b8e6 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2202      	movs	r2, #2
 800b8b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	68b9      	ldr	r1, [r7, #8]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f001 ff91 	bl	800d7ec <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d104      	bne.n	800b8dc <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2205      	movs	r2, #5
 800b8d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b8da:	e006      	b.n	800b8ea <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b8e4:	e001      	b.n	800b8ea <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e000      	b.n	800b8ec <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b02      	cmp	r3, #2
 800b908:	d101      	bne.n	800b90e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b90a:	2302      	movs	r3, #2
 800b90c:	e016      	b.n	800b93c <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b01      	cmp	r3, #1
 800b918:	d10f      	bne.n	800b93a <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2202      	movs	r2, #2
 800b91e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 ff83 	bl	800d834 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	e000      	b.n	800b93c <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e04c      	b.n	800b9f0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7f7 fc4a 	bl	8003204 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f022 0203 	bic.w	r2, r2, #3
 800b986:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4b19      	ldr	r3, [pc, #100]	; (800b9f8 <HAL_SPDIFRX_Init+0xb4>)
 800b994:	4013      	ands	r3, r2
 800b996:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b9a0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b9a6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b9ac:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b9b2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b9b8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b9be:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b9c4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800b9ca:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800b9d0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	fff88407 	.word	0xfff88407

0800b9fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e09d      	b.n	800bb4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d108      	bne.n	800ba28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba1e:	d009      	beq.n	800ba34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	61da      	str	r2, [r3, #28]
 800ba26:	e005      	b.n	800ba34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d106      	bne.n	800ba54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7f7 fc3c 	bl	80032cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2202      	movs	r2, #2
 800ba58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba74:	d902      	bls.n	800ba7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	e002      	b.n	800ba82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ba7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ba8a:	d007      	beq.n	800ba9c <HAL_SPI_Init+0xa0>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba94:	d002      	beq.n	800ba9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800baac:	431a      	orrs	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	431a      	orrs	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	431a      	orrs	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800baca:	431a      	orrs	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	69db      	ldr	r3, [r3, #28]
 800bad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bad4:	431a      	orrs	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bade:	ea42 0103 	orr.w	r1, r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	0c1b      	lsrs	r3, r3, #16
 800baf8:	f003 0204 	and.w	r2, r3, #4
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	f003 0310 	and.w	r3, r3, #16
 800bb04:	431a      	orrs	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0a:	f003 0308 	and.w	r3, r3, #8
 800bb0e:	431a      	orrs	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bb18:	ea42 0103 	orr.w	r1, r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	430a      	orrs	r2, r1
 800bb28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	69da      	ldr	r2, [r3, #28]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e049      	b.n	800bbf8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d106      	bne.n	800bb7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7f7 fc09 	bl	8003390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2202      	movs	r2, #2
 800bb82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f000 fc51 	bl	800c438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6a1a      	ldr	r2, [r3, #32]
 800bc0e:	f241 1311 	movw	r3, #4369	; 0x1111
 800bc12:	4013      	ands	r3, r2
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10f      	bne.n	800bc38 <HAL_TIM_Base_Stop+0x38>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6a1a      	ldr	r2, [r3, #32]
 800bc1e:	f240 4344 	movw	r3, #1092	; 0x444
 800bc22:	4013      	ands	r3, r2
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d107      	bne.n	800bc38 <HAL_TIM_Base_Stop+0x38>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f022 0201 	bic.w	r2, r2, #1
 800bc36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
	...

0800bc50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d001      	beq.n	800bc68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e054      	b.n	800bd12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68da      	ldr	r2, [r3, #12]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f042 0201 	orr.w	r2, r2, #1
 800bc7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a26      	ldr	r2, [pc, #152]	; (800bd20 <HAL_TIM_Base_Start_IT+0xd0>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d022      	beq.n	800bcd0 <HAL_TIM_Base_Start_IT+0x80>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc92:	d01d      	beq.n	800bcd0 <HAL_TIM_Base_Start_IT+0x80>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a22      	ldr	r2, [pc, #136]	; (800bd24 <HAL_TIM_Base_Start_IT+0xd4>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d018      	beq.n	800bcd0 <HAL_TIM_Base_Start_IT+0x80>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a21      	ldr	r2, [pc, #132]	; (800bd28 <HAL_TIM_Base_Start_IT+0xd8>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d013      	beq.n	800bcd0 <HAL_TIM_Base_Start_IT+0x80>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a1f      	ldr	r2, [pc, #124]	; (800bd2c <HAL_TIM_Base_Start_IT+0xdc>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d00e      	beq.n	800bcd0 <HAL_TIM_Base_Start_IT+0x80>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a1e      	ldr	r2, [pc, #120]	; (800bd30 <HAL_TIM_Base_Start_IT+0xe0>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d009      	beq.n	800bcd0 <HAL_TIM_Base_Start_IT+0x80>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a1c      	ldr	r2, [pc, #112]	; (800bd34 <HAL_TIM_Base_Start_IT+0xe4>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d004      	beq.n	800bcd0 <HAL_TIM_Base_Start_IT+0x80>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a1b      	ldr	r2, [pc, #108]	; (800bd38 <HAL_TIM_Base_Start_IT+0xe8>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d115      	bne.n	800bcfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	689a      	ldr	r2, [r3, #8]
 800bcd6:	4b19      	ldr	r3, [pc, #100]	; (800bd3c <HAL_TIM_Base_Start_IT+0xec>)
 800bcd8:	4013      	ands	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b06      	cmp	r3, #6
 800bce0:	d015      	beq.n	800bd0e <HAL_TIM_Base_Start_IT+0xbe>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce8:	d011      	beq.n	800bd0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f042 0201 	orr.w	r2, r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcfa:	e008      	b.n	800bd0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f042 0201 	orr.w	r2, r2, #1
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	e000      	b.n	800bd10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	40010000 	.word	0x40010000
 800bd24:	40000400 	.word	0x40000400
 800bd28:	40000800 	.word	0x40000800
 800bd2c:	40000c00 	.word	0x40000c00
 800bd30:	40010400 	.word	0x40010400
 800bd34:	40014000 	.word	0x40014000
 800bd38:	40001800 	.word	0x40001800
 800bd3c:	00010007 	.word	0x00010007

0800bd40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e049      	b.n	800bde6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d106      	bne.n	800bd6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7f7 fb9a 	bl	80034a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	f000 fb5a 	bl	800c438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	f003 0302 	and.w	r3, r3, #2
 800be00:	2b02      	cmp	r3, #2
 800be02:	d122      	bne.n	800be4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	f003 0302 	and.w	r3, r3, #2
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d11b      	bne.n	800be4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f06f 0202 	mvn.w	r2, #2
 800be1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	f003 0303 	and.w	r3, r3, #3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fae3 	bl	800c3fc <HAL_TIM_IC_CaptureCallback>
 800be36:	e005      	b.n	800be44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fad5 	bl	800c3e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fae6 	bl	800c410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b04      	cmp	r3, #4
 800be56:	d122      	bne.n	800be9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	f003 0304 	and.w	r3, r3, #4
 800be62:	2b04      	cmp	r3, #4
 800be64:	d11b      	bne.n	800be9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f06f 0204 	mvn.w	r2, #4
 800be6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2202      	movs	r2, #2
 800be74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fab9 	bl	800c3fc <HAL_TIM_IC_CaptureCallback>
 800be8a:	e005      	b.n	800be98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 faab 	bl	800c3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fabc 	bl	800c410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	f003 0308 	and.w	r3, r3, #8
 800bea8:	2b08      	cmp	r3, #8
 800beaa:	d122      	bne.n	800bef2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	f003 0308 	and.w	r3, r3, #8
 800beb6:	2b08      	cmp	r3, #8
 800beb8:	d11b      	bne.n	800bef2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f06f 0208 	mvn.w	r2, #8
 800bec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2204      	movs	r2, #4
 800bec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	69db      	ldr	r3, [r3, #28]
 800bed0:	f003 0303 	and.w	r3, r3, #3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fa8f 	bl	800c3fc <HAL_TIM_IC_CaptureCallback>
 800bede:	e005      	b.n	800beec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fa81 	bl	800c3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fa92 	bl	800c410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	f003 0310 	and.w	r3, r3, #16
 800befc:	2b10      	cmp	r3, #16
 800befe:	d122      	bne.n	800bf46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	f003 0310 	and.w	r3, r3, #16
 800bf0a:	2b10      	cmp	r3, #16
 800bf0c:	d11b      	bne.n	800bf46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f06f 0210 	mvn.w	r2, #16
 800bf16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2208      	movs	r2, #8
 800bf1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	69db      	ldr	r3, [r3, #28]
 800bf24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d003      	beq.n	800bf34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fa65 	bl	800c3fc <HAL_TIM_IC_CaptureCallback>
 800bf32:	e005      	b.n	800bf40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fa57 	bl	800c3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa68 	bl	800c410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d10e      	bne.n	800bf72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d107      	bne.n	800bf72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f06f 0201 	mvn.w	r2, #1
 800bf6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7f6 fd47 	bl	8002a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf7c:	2b80      	cmp	r3, #128	; 0x80
 800bf7e:	d10e      	bne.n	800bf9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf8a:	2b80      	cmp	r3, #128	; 0x80
 800bf8c:	d107      	bne.n	800bf9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 fefb 	bl	800cd94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfac:	d10e      	bne.n	800bfcc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfb8:	2b80      	cmp	r3, #128	; 0x80
 800bfba:	d107      	bne.n	800bfcc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bfc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 feee 	bl	800cda8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd6:	2b40      	cmp	r3, #64	; 0x40
 800bfd8:	d10e      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe4:	2b40      	cmp	r3, #64	; 0x40
 800bfe6:	d107      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fa16 	bl	800c424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	f003 0320 	and.w	r3, r3, #32
 800c002:	2b20      	cmp	r3, #32
 800c004:	d10e      	bne.n	800c024 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	f003 0320 	and.w	r3, r3, #32
 800c010:	2b20      	cmp	r3, #32
 800c012:	d107      	bne.n	800c024 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f06f 0220 	mvn.w	r2, #32
 800c01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 feae 	bl	800cd80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c042:	2b01      	cmp	r3, #1
 800c044:	d101      	bne.n	800c04a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c046:	2302      	movs	r3, #2
 800c048:	e0ff      	b.n	800c24a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2201      	movs	r2, #1
 800c04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2b14      	cmp	r3, #20
 800c056:	f200 80f0 	bhi.w	800c23a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c05a:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c060:	0800c0b5 	.word	0x0800c0b5
 800c064:	0800c23b 	.word	0x0800c23b
 800c068:	0800c23b 	.word	0x0800c23b
 800c06c:	0800c23b 	.word	0x0800c23b
 800c070:	0800c0f5 	.word	0x0800c0f5
 800c074:	0800c23b 	.word	0x0800c23b
 800c078:	0800c23b 	.word	0x0800c23b
 800c07c:	0800c23b 	.word	0x0800c23b
 800c080:	0800c137 	.word	0x0800c137
 800c084:	0800c23b 	.word	0x0800c23b
 800c088:	0800c23b 	.word	0x0800c23b
 800c08c:	0800c23b 	.word	0x0800c23b
 800c090:	0800c177 	.word	0x0800c177
 800c094:	0800c23b 	.word	0x0800c23b
 800c098:	0800c23b 	.word	0x0800c23b
 800c09c:	0800c23b 	.word	0x0800c23b
 800c0a0:	0800c1b9 	.word	0x0800c1b9
 800c0a4:	0800c23b 	.word	0x0800c23b
 800c0a8:	0800c23b 	.word	0x0800c23b
 800c0ac:	0800c23b 	.word	0x0800c23b
 800c0b0:	0800c1f9 	.word	0x0800c1f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68b9      	ldr	r1, [r7, #8]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 fa5c 	bl	800c578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	699a      	ldr	r2, [r3, #24]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 0208 	orr.w	r2, r2, #8
 800c0ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f022 0204 	bic.w	r2, r2, #4
 800c0de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6999      	ldr	r1, [r3, #24]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	691a      	ldr	r2, [r3, #16]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	430a      	orrs	r2, r1
 800c0f0:	619a      	str	r2, [r3, #24]
      break;
 800c0f2:	e0a5      	b.n	800c240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68b9      	ldr	r1, [r7, #8]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f000 faae 	bl	800c65c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	699a      	ldr	r2, [r3, #24]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c10e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	699a      	ldr	r2, [r3, #24]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c11e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6999      	ldr	r1, [r3, #24]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	021a      	lsls	r2, r3, #8
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	619a      	str	r2, [r3, #24]
      break;
 800c134:	e084      	b.n	800c240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68b9      	ldr	r1, [r7, #8]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 fb05 	bl	800c74c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	69da      	ldr	r2, [r3, #28]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f042 0208 	orr.w	r2, r2, #8
 800c150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	69da      	ldr	r2, [r3, #28]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f022 0204 	bic.w	r2, r2, #4
 800c160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	69d9      	ldr	r1, [r3, #28]
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	691a      	ldr	r2, [r3, #16]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	61da      	str	r2, [r3, #28]
      break;
 800c174:	e064      	b.n	800c240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fb5b 	bl	800c838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	69da      	ldr	r2, [r3, #28]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	69da      	ldr	r2, [r3, #28]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	69d9      	ldr	r1, [r3, #28]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	021a      	lsls	r2, r3, #8
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	61da      	str	r2, [r3, #28]
      break;
 800c1b6:	e043      	b.n	800c240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68b9      	ldr	r1, [r7, #8]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 fb92 	bl	800c8e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f042 0208 	orr.w	r2, r2, #8
 800c1d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f022 0204 	bic.w	r2, r2, #4
 800c1e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	691a      	ldr	r2, [r3, #16]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	430a      	orrs	r2, r1
 800c1f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c1f6:	e023      	b.n	800c240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fbc4 	bl	800c98c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c212:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c222:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	021a      	lsls	r2, r3, #8
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	430a      	orrs	r2, r1
 800c236:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c238:	e002      	b.n	800c240 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	75fb      	strb	r3, [r7, #23]
      break;
 800c23e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2200      	movs	r2, #0
 800c244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c248:	7dfb      	ldrb	r3, [r7, #23]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3718      	adds	r7, #24
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop

0800c254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <HAL_TIM_ConfigClockSource+0x1c>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e0b4      	b.n	800c3da <HAL_TIM_ConfigClockSource+0x186>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	4b56      	ldr	r3, [pc, #344]	; (800c3e4 <HAL_TIM_ConfigClockSource+0x190>)
 800c28c:	4013      	ands	r3, r2
 800c28e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2a8:	d03e      	beq.n	800c328 <HAL_TIM_ConfigClockSource+0xd4>
 800c2aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ae:	f200 8087 	bhi.w	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2b6:	f000 8086 	beq.w	800c3c6 <HAL_TIM_ConfigClockSource+0x172>
 800c2ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2be:	d87f      	bhi.n	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c2c0:	2b70      	cmp	r3, #112	; 0x70
 800c2c2:	d01a      	beq.n	800c2fa <HAL_TIM_ConfigClockSource+0xa6>
 800c2c4:	2b70      	cmp	r3, #112	; 0x70
 800c2c6:	d87b      	bhi.n	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c2c8:	2b60      	cmp	r3, #96	; 0x60
 800c2ca:	d050      	beq.n	800c36e <HAL_TIM_ConfigClockSource+0x11a>
 800c2cc:	2b60      	cmp	r3, #96	; 0x60
 800c2ce:	d877      	bhi.n	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c2d0:	2b50      	cmp	r3, #80	; 0x50
 800c2d2:	d03c      	beq.n	800c34e <HAL_TIM_ConfigClockSource+0xfa>
 800c2d4:	2b50      	cmp	r3, #80	; 0x50
 800c2d6:	d873      	bhi.n	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c2d8:	2b40      	cmp	r3, #64	; 0x40
 800c2da:	d058      	beq.n	800c38e <HAL_TIM_ConfigClockSource+0x13a>
 800c2dc:	2b40      	cmp	r3, #64	; 0x40
 800c2de:	d86f      	bhi.n	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c2e0:	2b30      	cmp	r3, #48	; 0x30
 800c2e2:	d064      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x15a>
 800c2e4:	2b30      	cmp	r3, #48	; 0x30
 800c2e6:	d86b      	bhi.n	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c2e8:	2b20      	cmp	r3, #32
 800c2ea:	d060      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x15a>
 800c2ec:	2b20      	cmp	r3, #32
 800c2ee:	d867      	bhi.n	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d05c      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x15a>
 800c2f4:	2b10      	cmp	r3, #16
 800c2f6:	d05a      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x15a>
 800c2f8:	e062      	b.n	800c3c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c30a:	f000 fc0d 	bl	800cb28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c31c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	609a      	str	r2, [r3, #8]
      break;
 800c326:	e04f      	b.n	800c3c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c338:	f000 fbf6 	bl	800cb28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689a      	ldr	r2, [r3, #8]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c34a:	609a      	str	r2, [r3, #8]
      break;
 800c34c:	e03c      	b.n	800c3c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c35a:	461a      	mov	r2, r3
 800c35c:	f000 fb6a 	bl	800ca34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2150      	movs	r1, #80	; 0x50
 800c366:	4618      	mov	r0, r3
 800c368:	f000 fbc3 	bl	800caf2 <TIM_ITRx_SetConfig>
      break;
 800c36c:	e02c      	b.n	800c3c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c37a:	461a      	mov	r2, r3
 800c37c:	f000 fb89 	bl	800ca92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2160      	movs	r1, #96	; 0x60
 800c386:	4618      	mov	r0, r3
 800c388:	f000 fbb3 	bl	800caf2 <TIM_ITRx_SetConfig>
      break;
 800c38c:	e01c      	b.n	800c3c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c39a:	461a      	mov	r2, r3
 800c39c:	f000 fb4a 	bl	800ca34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2140      	movs	r1, #64	; 0x40
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 fba3 	bl	800caf2 <TIM_ITRx_SetConfig>
      break;
 800c3ac:	e00c      	b.n	800c3c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f000 fb9a 	bl	800caf2 <TIM_ITRx_SetConfig>
      break;
 800c3be:	e003      	b.n	800c3c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c4:	e000      	b.n	800c3c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c3c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	fffeff88 	.word	0xfffeff88

0800c3e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c42c:	bf00      	nop
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a40      	ldr	r2, [pc, #256]	; (800c54c <TIM_Base_SetConfig+0x114>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d013      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c456:	d00f      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a3d      	ldr	r2, [pc, #244]	; (800c550 <TIM_Base_SetConfig+0x118>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d00b      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a3c      	ldr	r2, [pc, #240]	; (800c554 <TIM_Base_SetConfig+0x11c>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d007      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a3b      	ldr	r2, [pc, #236]	; (800c558 <TIM_Base_SetConfig+0x120>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d003      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a3a      	ldr	r2, [pc, #232]	; (800c55c <TIM_Base_SetConfig+0x124>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d108      	bne.n	800c48a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c47e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a2f      	ldr	r2, [pc, #188]	; (800c54c <TIM_Base_SetConfig+0x114>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d02b      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c498:	d027      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a2c      	ldr	r2, [pc, #176]	; (800c550 <TIM_Base_SetConfig+0x118>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d023      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a2b      	ldr	r2, [pc, #172]	; (800c554 <TIM_Base_SetConfig+0x11c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d01f      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a2a      	ldr	r2, [pc, #168]	; (800c558 <TIM_Base_SetConfig+0x120>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d01b      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a29      	ldr	r2, [pc, #164]	; (800c55c <TIM_Base_SetConfig+0x124>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d017      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a28      	ldr	r2, [pc, #160]	; (800c560 <TIM_Base_SetConfig+0x128>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d013      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a27      	ldr	r2, [pc, #156]	; (800c564 <TIM_Base_SetConfig+0x12c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d00f      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a26      	ldr	r2, [pc, #152]	; (800c568 <TIM_Base_SetConfig+0x130>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d00b      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a25      	ldr	r2, [pc, #148]	; (800c56c <TIM_Base_SetConfig+0x134>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d007      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4a24      	ldr	r2, [pc, #144]	; (800c570 <TIM_Base_SetConfig+0x138>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d003      	beq.n	800c4ea <TIM_Base_SetConfig+0xb2>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4a23      	ldr	r2, [pc, #140]	; (800c574 <TIM_Base_SetConfig+0x13c>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d108      	bne.n	800c4fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	4313      	orrs	r3, r2
 800c508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a0a      	ldr	r2, [pc, #40]	; (800c54c <TIM_Base_SetConfig+0x114>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d003      	beq.n	800c530 <TIM_Base_SetConfig+0xf8>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a0c      	ldr	r2, [pc, #48]	; (800c55c <TIM_Base_SetConfig+0x124>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d103      	bne.n	800c538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	691a      	ldr	r2, [r3, #16]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	615a      	str	r2, [r3, #20]
}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	40010000 	.word	0x40010000
 800c550:	40000400 	.word	0x40000400
 800c554:	40000800 	.word	0x40000800
 800c558:	40000c00 	.word	0x40000c00
 800c55c:	40010400 	.word	0x40010400
 800c560:	40014000 	.word	0x40014000
 800c564:	40014400 	.word	0x40014400
 800c568:	40014800 	.word	0x40014800
 800c56c:	40001800 	.word	0x40001800
 800c570:	40001c00 	.word	0x40001c00
 800c574:	40002000 	.word	0x40002000

0800c578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	f023 0201 	bic.w	r2, r3, #1
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4b2b      	ldr	r3, [pc, #172]	; (800c650 <TIM_OC1_SetConfig+0xd8>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f023 0303 	bic.w	r3, r3, #3
 800c5ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	f023 0302 	bic.w	r3, r3, #2
 800c5c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a21      	ldr	r2, [pc, #132]	; (800c654 <TIM_OC1_SetConfig+0xdc>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d003      	beq.n	800c5dc <TIM_OC1_SetConfig+0x64>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a20      	ldr	r2, [pc, #128]	; (800c658 <TIM_OC1_SetConfig+0xe0>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d10c      	bne.n	800c5f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	f023 0308 	bic.w	r3, r3, #8
 800c5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	697a      	ldr	r2, [r7, #20]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f023 0304 	bic.w	r3, r3, #4
 800c5f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a16      	ldr	r2, [pc, #88]	; (800c654 <TIM_OC1_SetConfig+0xdc>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d003      	beq.n	800c606 <TIM_OC1_SetConfig+0x8e>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a15      	ldr	r2, [pc, #84]	; (800c658 <TIM_OC1_SetConfig+0xe0>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d111      	bne.n	800c62a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c60c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	693a      	ldr	r2, [r7, #16]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	699b      	ldr	r3, [r3, #24]
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	4313      	orrs	r3, r2
 800c628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	621a      	str	r2, [r3, #32]
}
 800c644:	bf00      	nop
 800c646:	371c      	adds	r7, #28
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	fffeff8f 	.word	0xfffeff8f
 800c654:	40010000 	.word	0x40010000
 800c658:	40010400 	.word	0x40010400

0800c65c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	f023 0210 	bic.w	r2, r3, #16
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	4b2e      	ldr	r3, [pc, #184]	; (800c740 <TIM_OC2_SetConfig+0xe4>)
 800c688:	4013      	ands	r3, r2
 800c68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	021b      	lsls	r3, r3, #8
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f023 0320 	bic.w	r3, r3, #32
 800c6a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	011b      	lsls	r3, r3, #4
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a23      	ldr	r2, [pc, #140]	; (800c744 <TIM_OC2_SetConfig+0xe8>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d003      	beq.n	800c6c4 <TIM_OC2_SetConfig+0x68>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a22      	ldr	r2, [pc, #136]	; (800c748 <TIM_OC2_SetConfig+0xec>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d10d      	bne.n	800c6e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	011b      	lsls	r3, r3, #4
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a18      	ldr	r2, [pc, #96]	; (800c744 <TIM_OC2_SetConfig+0xe8>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d003      	beq.n	800c6f0 <TIM_OC2_SetConfig+0x94>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a17      	ldr	r2, [pc, #92]	; (800c748 <TIM_OC2_SetConfig+0xec>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d113      	bne.n	800c718 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	695b      	ldr	r3, [r3, #20]
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	4313      	orrs	r3, r2
 800c70a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	699b      	ldr	r3, [r3, #24]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	4313      	orrs	r3, r2
 800c716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	621a      	str	r2, [r3, #32]
}
 800c732:	bf00      	nop
 800c734:	371c      	adds	r7, #28
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	feff8fff 	.word	0xfeff8fff
 800c744:	40010000 	.word	0x40010000
 800c748:	40010400 	.word	0x40010400

0800c74c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b087      	sub	sp, #28
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	4b2d      	ldr	r3, [pc, #180]	; (800c82c <TIM_OC3_SetConfig+0xe0>)
 800c778:	4013      	ands	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0303 	bic.w	r3, r3, #3
 800c782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	021b      	lsls	r3, r3, #8
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a22      	ldr	r2, [pc, #136]	; (800c830 <TIM_OC3_SetConfig+0xe4>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d003      	beq.n	800c7b2 <TIM_OC3_SetConfig+0x66>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a21      	ldr	r2, [pc, #132]	; (800c834 <TIM_OC3_SetConfig+0xe8>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d10d      	bne.n	800c7ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a17      	ldr	r2, [pc, #92]	; (800c830 <TIM_OC3_SetConfig+0xe4>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d003      	beq.n	800c7de <TIM_OC3_SetConfig+0x92>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a16      	ldr	r2, [pc, #88]	; (800c834 <TIM_OC3_SetConfig+0xe8>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d113      	bne.n	800c806 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	011b      	lsls	r3, r3, #4
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	011b      	lsls	r3, r3, #4
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	4313      	orrs	r3, r2
 800c804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	621a      	str	r2, [r3, #32]
}
 800c820:	bf00      	nop
 800c822:	371c      	adds	r7, #28
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	fffeff8f 	.word	0xfffeff8f
 800c830:	40010000 	.word	0x40010000
 800c834:	40010400 	.word	0x40010400

0800c838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c838:	b480      	push	{r7}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a1b      	ldr	r3, [r3, #32]
 800c852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	69db      	ldr	r3, [r3, #28]
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4b1e      	ldr	r3, [pc, #120]	; (800c8dc <TIM_OC4_SetConfig+0xa4>)
 800c864:	4013      	ands	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	021b      	lsls	r3, r3, #8
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	4313      	orrs	r3, r2
 800c87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	031b      	lsls	r3, r3, #12
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a13      	ldr	r2, [pc, #76]	; (800c8e0 <TIM_OC4_SetConfig+0xa8>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d003      	beq.n	800c8a0 <TIM_OC4_SetConfig+0x68>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a12      	ldr	r2, [pc, #72]	; (800c8e4 <TIM_OC4_SetConfig+0xac>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d109      	bne.n	800c8b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	019b      	lsls	r3, r3, #6
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	697a      	ldr	r2, [r7, #20]
 800c8b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	693a      	ldr	r2, [r7, #16]
 800c8cc:	621a      	str	r2, [r3, #32]
}
 800c8ce:	bf00      	nop
 800c8d0:	371c      	adds	r7, #28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	feff8fff 	.word	0xfeff8fff
 800c8e0:	40010000 	.word	0x40010000
 800c8e4:	40010400 	.word	0x40010400

0800c8e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b087      	sub	sp, #28
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	4b1b      	ldr	r3, [pc, #108]	; (800c980 <TIM_OC5_SetConfig+0x98>)
 800c914:	4013      	ands	r3, r2
 800c916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	4313      	orrs	r3, r2
 800c920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c928:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	041b      	lsls	r3, r3, #16
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	4313      	orrs	r3, r2
 800c934:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4a12      	ldr	r2, [pc, #72]	; (800c984 <TIM_OC5_SetConfig+0x9c>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d003      	beq.n	800c946 <TIM_OC5_SetConfig+0x5e>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a11      	ldr	r2, [pc, #68]	; (800c988 <TIM_OC5_SetConfig+0xa0>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d109      	bne.n	800c95a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c94c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	695b      	ldr	r3, [r3, #20]
 800c952:	021b      	lsls	r3, r3, #8
 800c954:	697a      	ldr	r2, [r7, #20]
 800c956:	4313      	orrs	r3, r2
 800c958:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	621a      	str	r2, [r3, #32]
}
 800c974:	bf00      	nop
 800c976:	371c      	adds	r7, #28
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	fffeff8f 	.word	0xfffeff8f
 800c984:	40010000 	.word	0x40010000
 800c988:	40010400 	.word	0x40010400

0800c98c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b087      	sub	sp, #28
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	4b1c      	ldr	r3, [pc, #112]	; (800ca28 <TIM_OC6_SetConfig+0x9c>)
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	021b      	lsls	r3, r3, #8
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c9ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	051b      	lsls	r3, r3, #20
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a13      	ldr	r2, [pc, #76]	; (800ca2c <TIM_OC6_SetConfig+0xa0>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d003      	beq.n	800c9ec <TIM_OC6_SetConfig+0x60>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a12      	ldr	r2, [pc, #72]	; (800ca30 <TIM_OC6_SetConfig+0xa4>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d109      	bne.n	800ca00 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	029b      	lsls	r3, r3, #10
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	697a      	ldr	r2, [r7, #20]
 800ca04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	621a      	str	r2, [r3, #32]
}
 800ca1a:	bf00      	nop
 800ca1c:	371c      	adds	r7, #28
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	feff8fff 	.word	0xfeff8fff
 800ca2c:	40010000 	.word	0x40010000
 800ca30:	40010400 	.word	0x40010400

0800ca34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b087      	sub	sp, #28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6a1b      	ldr	r3, [r3, #32]
 800ca44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	f023 0201 	bic.w	r2, r3, #1
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	011b      	lsls	r3, r3, #4
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	f023 030a 	bic.w	r3, r3, #10
 800ca70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca72:	697a      	ldr	r2, [r7, #20]
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	621a      	str	r2, [r3, #32]
}
 800ca86:	bf00      	nop
 800ca88:	371c      	adds	r7, #28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b087      	sub	sp, #28
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	60f8      	str	r0, [r7, #12]
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6a1b      	ldr	r3, [r3, #32]
 800caa2:	f023 0210 	bic.w	r2, r3, #16
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6a1b      	ldr	r3, [r3, #32]
 800cab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cabc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	031b      	lsls	r3, r3, #12
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	4313      	orrs	r3, r2
 800cac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	011b      	lsls	r3, r3, #4
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	697a      	ldr	r2, [r7, #20]
 800cade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	693a      	ldr	r2, [r7, #16]
 800cae4:	621a      	str	r2, [r3, #32]
}
 800cae6:	bf00      	nop
 800cae8:	371c      	adds	r7, #28
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800caf2:	b480      	push	{r7}
 800caf4:	b085      	sub	sp, #20
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	f043 0307 	orr.w	r3, r3, #7
 800cb14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	609a      	str	r2, [r3, #8]
}
 800cb1c:	bf00      	nop
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b087      	sub	sp, #28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
 800cb34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	021a      	lsls	r2, r3, #8
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	697a      	ldr	r2, [r7, #20]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	609a      	str	r2, [r3, #8]
}
 800cb5c:	bf00      	nop
 800cb5e:	371c      	adds	r7, #28
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d101      	bne.n	800cb80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	e06d      	b.n	800cc5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a30      	ldr	r2, [pc, #192]	; (800cc68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d004      	beq.n	800cbb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a2f      	ldr	r2, [pc, #188]	; (800cc6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d108      	bne.n	800cbc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cbba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a20      	ldr	r2, [pc, #128]	; (800cc68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d022      	beq.n	800cc30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbf2:	d01d      	beq.n	800cc30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a1d      	ldr	r2, [pc, #116]	; (800cc70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d018      	beq.n	800cc30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a1c      	ldr	r2, [pc, #112]	; (800cc74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d013      	beq.n	800cc30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a1a      	ldr	r2, [pc, #104]	; (800cc78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00e      	beq.n	800cc30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a15      	ldr	r2, [pc, #84]	; (800cc6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d009      	beq.n	800cc30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a16      	ldr	r2, [pc, #88]	; (800cc7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d004      	beq.n	800cc30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a15      	ldr	r2, [pc, #84]	; (800cc80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d10c      	bne.n	800cc4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	68ba      	ldr	r2, [r7, #8]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr
 800cc68:	40010000 	.word	0x40010000
 800cc6c:	40010400 	.word	0x40010400
 800cc70:	40000400 	.word	0x40000400
 800cc74:	40000800 	.word	0x40000800
 800cc78:	40000c00 	.word	0x40000c00
 800cc7c:	40014000 	.word	0x40014000
 800cc80:	40001800 	.word	0x40001800

0800cc84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d101      	bne.n	800cca0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	e065      	b.n	800cd6c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd06:	4313      	orrs	r3, r2
 800cd08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	699b      	ldr	r3, [r3, #24]
 800cd14:	041b      	lsls	r3, r3, #16
 800cd16:	4313      	orrs	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a16      	ldr	r2, [pc, #88]	; (800cd78 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d004      	beq.n	800cd2e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a14      	ldr	r2, [pc, #80]	; (800cd7c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d115      	bne.n	800cd5a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd38:	051b      	lsls	r3, r3, #20
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	69db      	ldr	r3, [r3, #28]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	40010000 	.word	0x40010000
 800cd7c:	40010400 	.word	0x40010400

0800cd80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd88:	bf00      	nop
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cdb0:	bf00      	nop
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d101      	bne.n	800cdce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e040      	b.n	800ce50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7f6 fc4c 	bl	800367c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2224      	movs	r2, #36	; 0x24
 800cde8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f022 0201 	bic.w	r2, r2, #1
 800cdf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f82c 	bl	800ce58 <UART_SetConfig>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d101      	bne.n	800ce0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e022      	b.n	800ce50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d002      	beq.n	800ce18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fa84 	bl	800d320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ce26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	689a      	ldr	r2, [r3, #8]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ce36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f042 0201 	orr.w	r2, r2, #1
 800ce46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fb0b 	bl	800d464 <UART_CheckIdleState>
 800ce4e:	4603      	mov	r3, r0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b088      	sub	sp, #32
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	689a      	ldr	r2, [r3, #8]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	431a      	orrs	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	431a      	orrs	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	69db      	ldr	r3, [r3, #28]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	4ba6      	ldr	r3, [pc, #664]	; (800d11c <UART_SetConfig+0x2c4>)
 800ce84:	4013      	ands	r3, r2
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	6812      	ldr	r2, [r2, #0]
 800ce8a:	6979      	ldr	r1, [r7, #20]
 800ce8c:	430b      	orrs	r3, r1
 800ce8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68da      	ldr	r2, [r3, #12]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	430a      	orrs	r2, r1
 800cea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a1b      	ldr	r3, [r3, #32]
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	430a      	orrs	r2, r1
 800cec8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a94      	ldr	r2, [pc, #592]	; (800d120 <UART_SetConfig+0x2c8>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d120      	bne.n	800cf16 <UART_SetConfig+0xbe>
 800ced4:	4b93      	ldr	r3, [pc, #588]	; (800d124 <UART_SetConfig+0x2cc>)
 800ced6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceda:	f003 0303 	and.w	r3, r3, #3
 800cede:	2b03      	cmp	r3, #3
 800cee0:	d816      	bhi.n	800cf10 <UART_SetConfig+0xb8>
 800cee2:	a201      	add	r2, pc, #4	; (adr r2, 800cee8 <UART_SetConfig+0x90>)
 800cee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee8:	0800cef9 	.word	0x0800cef9
 800ceec:	0800cf05 	.word	0x0800cf05
 800cef0:	0800ceff 	.word	0x0800ceff
 800cef4:	0800cf0b 	.word	0x0800cf0b
 800cef8:	2301      	movs	r3, #1
 800cefa:	77fb      	strb	r3, [r7, #31]
 800cefc:	e150      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cefe:	2302      	movs	r3, #2
 800cf00:	77fb      	strb	r3, [r7, #31]
 800cf02:	e14d      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf04:	2304      	movs	r3, #4
 800cf06:	77fb      	strb	r3, [r7, #31]
 800cf08:	e14a      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf0a:	2308      	movs	r3, #8
 800cf0c:	77fb      	strb	r3, [r7, #31]
 800cf0e:	e147      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf10:	2310      	movs	r3, #16
 800cf12:	77fb      	strb	r3, [r7, #31]
 800cf14:	e144      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a83      	ldr	r2, [pc, #524]	; (800d128 <UART_SetConfig+0x2d0>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d132      	bne.n	800cf86 <UART_SetConfig+0x12e>
 800cf20:	4b80      	ldr	r3, [pc, #512]	; (800d124 <UART_SetConfig+0x2cc>)
 800cf22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf26:	f003 030c 	and.w	r3, r3, #12
 800cf2a:	2b0c      	cmp	r3, #12
 800cf2c:	d828      	bhi.n	800cf80 <UART_SetConfig+0x128>
 800cf2e:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <UART_SetConfig+0xdc>)
 800cf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf34:	0800cf69 	.word	0x0800cf69
 800cf38:	0800cf81 	.word	0x0800cf81
 800cf3c:	0800cf81 	.word	0x0800cf81
 800cf40:	0800cf81 	.word	0x0800cf81
 800cf44:	0800cf75 	.word	0x0800cf75
 800cf48:	0800cf81 	.word	0x0800cf81
 800cf4c:	0800cf81 	.word	0x0800cf81
 800cf50:	0800cf81 	.word	0x0800cf81
 800cf54:	0800cf6f 	.word	0x0800cf6f
 800cf58:	0800cf81 	.word	0x0800cf81
 800cf5c:	0800cf81 	.word	0x0800cf81
 800cf60:	0800cf81 	.word	0x0800cf81
 800cf64:	0800cf7b 	.word	0x0800cf7b
 800cf68:	2300      	movs	r3, #0
 800cf6a:	77fb      	strb	r3, [r7, #31]
 800cf6c:	e118      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf6e:	2302      	movs	r3, #2
 800cf70:	77fb      	strb	r3, [r7, #31]
 800cf72:	e115      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf74:	2304      	movs	r3, #4
 800cf76:	77fb      	strb	r3, [r7, #31]
 800cf78:	e112      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf7a:	2308      	movs	r3, #8
 800cf7c:	77fb      	strb	r3, [r7, #31]
 800cf7e:	e10f      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf80:	2310      	movs	r3, #16
 800cf82:	77fb      	strb	r3, [r7, #31]
 800cf84:	e10c      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a68      	ldr	r2, [pc, #416]	; (800d12c <UART_SetConfig+0x2d4>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d120      	bne.n	800cfd2 <UART_SetConfig+0x17a>
 800cf90:	4b64      	ldr	r3, [pc, #400]	; (800d124 <UART_SetConfig+0x2cc>)
 800cf92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cf9a:	2b30      	cmp	r3, #48	; 0x30
 800cf9c:	d013      	beq.n	800cfc6 <UART_SetConfig+0x16e>
 800cf9e:	2b30      	cmp	r3, #48	; 0x30
 800cfa0:	d814      	bhi.n	800cfcc <UART_SetConfig+0x174>
 800cfa2:	2b20      	cmp	r3, #32
 800cfa4:	d009      	beq.n	800cfba <UART_SetConfig+0x162>
 800cfa6:	2b20      	cmp	r3, #32
 800cfa8:	d810      	bhi.n	800cfcc <UART_SetConfig+0x174>
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d002      	beq.n	800cfb4 <UART_SetConfig+0x15c>
 800cfae:	2b10      	cmp	r3, #16
 800cfb0:	d006      	beq.n	800cfc0 <UART_SetConfig+0x168>
 800cfb2:	e00b      	b.n	800cfcc <UART_SetConfig+0x174>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	77fb      	strb	r3, [r7, #31]
 800cfb8:	e0f2      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cfba:	2302      	movs	r3, #2
 800cfbc:	77fb      	strb	r3, [r7, #31]
 800cfbe:	e0ef      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cfc0:	2304      	movs	r3, #4
 800cfc2:	77fb      	strb	r3, [r7, #31]
 800cfc4:	e0ec      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cfc6:	2308      	movs	r3, #8
 800cfc8:	77fb      	strb	r3, [r7, #31]
 800cfca:	e0e9      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cfcc:	2310      	movs	r3, #16
 800cfce:	77fb      	strb	r3, [r7, #31]
 800cfd0:	e0e6      	b.n	800d1a0 <UART_SetConfig+0x348>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a56      	ldr	r2, [pc, #344]	; (800d130 <UART_SetConfig+0x2d8>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d120      	bne.n	800d01e <UART_SetConfig+0x1c6>
 800cfdc:	4b51      	ldr	r3, [pc, #324]	; (800d124 <UART_SetConfig+0x2cc>)
 800cfde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfe2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cfe6:	2bc0      	cmp	r3, #192	; 0xc0
 800cfe8:	d013      	beq.n	800d012 <UART_SetConfig+0x1ba>
 800cfea:	2bc0      	cmp	r3, #192	; 0xc0
 800cfec:	d814      	bhi.n	800d018 <UART_SetConfig+0x1c0>
 800cfee:	2b80      	cmp	r3, #128	; 0x80
 800cff0:	d009      	beq.n	800d006 <UART_SetConfig+0x1ae>
 800cff2:	2b80      	cmp	r3, #128	; 0x80
 800cff4:	d810      	bhi.n	800d018 <UART_SetConfig+0x1c0>
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <UART_SetConfig+0x1a8>
 800cffa:	2b40      	cmp	r3, #64	; 0x40
 800cffc:	d006      	beq.n	800d00c <UART_SetConfig+0x1b4>
 800cffe:	e00b      	b.n	800d018 <UART_SetConfig+0x1c0>
 800d000:	2300      	movs	r3, #0
 800d002:	77fb      	strb	r3, [r7, #31]
 800d004:	e0cc      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d006:	2302      	movs	r3, #2
 800d008:	77fb      	strb	r3, [r7, #31]
 800d00a:	e0c9      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d00c:	2304      	movs	r3, #4
 800d00e:	77fb      	strb	r3, [r7, #31]
 800d010:	e0c6      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d012:	2308      	movs	r3, #8
 800d014:	77fb      	strb	r3, [r7, #31]
 800d016:	e0c3      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d018:	2310      	movs	r3, #16
 800d01a:	77fb      	strb	r3, [r7, #31]
 800d01c:	e0c0      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a44      	ldr	r2, [pc, #272]	; (800d134 <UART_SetConfig+0x2dc>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d125      	bne.n	800d074 <UART_SetConfig+0x21c>
 800d028:	4b3e      	ldr	r3, [pc, #248]	; (800d124 <UART_SetConfig+0x2cc>)
 800d02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d036:	d017      	beq.n	800d068 <UART_SetConfig+0x210>
 800d038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d03c:	d817      	bhi.n	800d06e <UART_SetConfig+0x216>
 800d03e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d042:	d00b      	beq.n	800d05c <UART_SetConfig+0x204>
 800d044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d048:	d811      	bhi.n	800d06e <UART_SetConfig+0x216>
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d003      	beq.n	800d056 <UART_SetConfig+0x1fe>
 800d04e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d052:	d006      	beq.n	800d062 <UART_SetConfig+0x20a>
 800d054:	e00b      	b.n	800d06e <UART_SetConfig+0x216>
 800d056:	2300      	movs	r3, #0
 800d058:	77fb      	strb	r3, [r7, #31]
 800d05a:	e0a1      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d05c:	2302      	movs	r3, #2
 800d05e:	77fb      	strb	r3, [r7, #31]
 800d060:	e09e      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d062:	2304      	movs	r3, #4
 800d064:	77fb      	strb	r3, [r7, #31]
 800d066:	e09b      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d068:	2308      	movs	r3, #8
 800d06a:	77fb      	strb	r3, [r7, #31]
 800d06c:	e098      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d06e:	2310      	movs	r3, #16
 800d070:	77fb      	strb	r3, [r7, #31]
 800d072:	e095      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a2f      	ldr	r2, [pc, #188]	; (800d138 <UART_SetConfig+0x2e0>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d125      	bne.n	800d0ca <UART_SetConfig+0x272>
 800d07e:	4b29      	ldr	r3, [pc, #164]	; (800d124 <UART_SetConfig+0x2cc>)
 800d080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d08c:	d017      	beq.n	800d0be <UART_SetConfig+0x266>
 800d08e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d092:	d817      	bhi.n	800d0c4 <UART_SetConfig+0x26c>
 800d094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d098:	d00b      	beq.n	800d0b2 <UART_SetConfig+0x25a>
 800d09a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d09e:	d811      	bhi.n	800d0c4 <UART_SetConfig+0x26c>
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d003      	beq.n	800d0ac <UART_SetConfig+0x254>
 800d0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0a8:	d006      	beq.n	800d0b8 <UART_SetConfig+0x260>
 800d0aa:	e00b      	b.n	800d0c4 <UART_SetConfig+0x26c>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	77fb      	strb	r3, [r7, #31]
 800d0b0:	e076      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	77fb      	strb	r3, [r7, #31]
 800d0b6:	e073      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d0b8:	2304      	movs	r3, #4
 800d0ba:	77fb      	strb	r3, [r7, #31]
 800d0bc:	e070      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d0be:	2308      	movs	r3, #8
 800d0c0:	77fb      	strb	r3, [r7, #31]
 800d0c2:	e06d      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d0c4:	2310      	movs	r3, #16
 800d0c6:	77fb      	strb	r3, [r7, #31]
 800d0c8:	e06a      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a1b      	ldr	r2, [pc, #108]	; (800d13c <UART_SetConfig+0x2e4>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d138      	bne.n	800d146 <UART_SetConfig+0x2ee>
 800d0d4:	4b13      	ldr	r3, [pc, #76]	; (800d124 <UART_SetConfig+0x2cc>)
 800d0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d0de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d0e2:	d017      	beq.n	800d114 <UART_SetConfig+0x2bc>
 800d0e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d0e8:	d82a      	bhi.n	800d140 <UART_SetConfig+0x2e8>
 800d0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0ee:	d00b      	beq.n	800d108 <UART_SetConfig+0x2b0>
 800d0f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0f4:	d824      	bhi.n	800d140 <UART_SetConfig+0x2e8>
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d003      	beq.n	800d102 <UART_SetConfig+0x2aa>
 800d0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0fe:	d006      	beq.n	800d10e <UART_SetConfig+0x2b6>
 800d100:	e01e      	b.n	800d140 <UART_SetConfig+0x2e8>
 800d102:	2300      	movs	r3, #0
 800d104:	77fb      	strb	r3, [r7, #31]
 800d106:	e04b      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d108:	2302      	movs	r3, #2
 800d10a:	77fb      	strb	r3, [r7, #31]
 800d10c:	e048      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d10e:	2304      	movs	r3, #4
 800d110:	77fb      	strb	r3, [r7, #31]
 800d112:	e045      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d114:	2308      	movs	r3, #8
 800d116:	77fb      	strb	r3, [r7, #31]
 800d118:	e042      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d11a:	bf00      	nop
 800d11c:	efff69f3 	.word	0xefff69f3
 800d120:	40011000 	.word	0x40011000
 800d124:	40023800 	.word	0x40023800
 800d128:	40004400 	.word	0x40004400
 800d12c:	40004800 	.word	0x40004800
 800d130:	40004c00 	.word	0x40004c00
 800d134:	40005000 	.word	0x40005000
 800d138:	40011400 	.word	0x40011400
 800d13c:	40007800 	.word	0x40007800
 800d140:	2310      	movs	r3, #16
 800d142:	77fb      	strb	r3, [r7, #31]
 800d144:	e02c      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a72      	ldr	r2, [pc, #456]	; (800d314 <UART_SetConfig+0x4bc>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d125      	bne.n	800d19c <UART_SetConfig+0x344>
 800d150:	4b71      	ldr	r3, [pc, #452]	; (800d318 <UART_SetConfig+0x4c0>)
 800d152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d156:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d15a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d15e:	d017      	beq.n	800d190 <UART_SetConfig+0x338>
 800d160:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d164:	d817      	bhi.n	800d196 <UART_SetConfig+0x33e>
 800d166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d16a:	d00b      	beq.n	800d184 <UART_SetConfig+0x32c>
 800d16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d170:	d811      	bhi.n	800d196 <UART_SetConfig+0x33e>
 800d172:	2b00      	cmp	r3, #0
 800d174:	d003      	beq.n	800d17e <UART_SetConfig+0x326>
 800d176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d17a:	d006      	beq.n	800d18a <UART_SetConfig+0x332>
 800d17c:	e00b      	b.n	800d196 <UART_SetConfig+0x33e>
 800d17e:	2300      	movs	r3, #0
 800d180:	77fb      	strb	r3, [r7, #31]
 800d182:	e00d      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d184:	2302      	movs	r3, #2
 800d186:	77fb      	strb	r3, [r7, #31]
 800d188:	e00a      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d18a:	2304      	movs	r3, #4
 800d18c:	77fb      	strb	r3, [r7, #31]
 800d18e:	e007      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d190:	2308      	movs	r3, #8
 800d192:	77fb      	strb	r3, [r7, #31]
 800d194:	e004      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d196:	2310      	movs	r3, #16
 800d198:	77fb      	strb	r3, [r7, #31]
 800d19a:	e001      	b.n	800d1a0 <UART_SetConfig+0x348>
 800d19c:	2310      	movs	r3, #16
 800d19e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	69db      	ldr	r3, [r3, #28]
 800d1a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1a8:	d15b      	bne.n	800d262 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d1aa:	7ffb      	ldrb	r3, [r7, #31]
 800d1ac:	2b08      	cmp	r3, #8
 800d1ae:	d828      	bhi.n	800d202 <UART_SetConfig+0x3aa>
 800d1b0:	a201      	add	r2, pc, #4	; (adr r2, 800d1b8 <UART_SetConfig+0x360>)
 800d1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b6:	bf00      	nop
 800d1b8:	0800d1dd 	.word	0x0800d1dd
 800d1bc:	0800d1e5 	.word	0x0800d1e5
 800d1c0:	0800d1ed 	.word	0x0800d1ed
 800d1c4:	0800d203 	.word	0x0800d203
 800d1c8:	0800d1f3 	.word	0x0800d1f3
 800d1cc:	0800d203 	.word	0x0800d203
 800d1d0:	0800d203 	.word	0x0800d203
 800d1d4:	0800d203 	.word	0x0800d203
 800d1d8:	0800d1fb 	.word	0x0800d1fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1dc:	f7fb fce0 	bl	8008ba0 <HAL_RCC_GetPCLK1Freq>
 800d1e0:	61b8      	str	r0, [r7, #24]
        break;
 800d1e2:	e013      	b.n	800d20c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1e4:	f7fb fcf0 	bl	8008bc8 <HAL_RCC_GetPCLK2Freq>
 800d1e8:	61b8      	str	r0, [r7, #24]
        break;
 800d1ea:	e00f      	b.n	800d20c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d1ec:	4b4b      	ldr	r3, [pc, #300]	; (800d31c <UART_SetConfig+0x4c4>)
 800d1ee:	61bb      	str	r3, [r7, #24]
        break;
 800d1f0:	e00c      	b.n	800d20c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1f2:	f7fb fc03 	bl	80089fc <HAL_RCC_GetSysClockFreq>
 800d1f6:	61b8      	str	r0, [r7, #24]
        break;
 800d1f8:	e008      	b.n	800d20c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1fe:	61bb      	str	r3, [r7, #24]
        break;
 800d200:	e004      	b.n	800d20c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d202:	2300      	movs	r3, #0
 800d204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	77bb      	strb	r3, [r7, #30]
        break;
 800d20a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d074      	beq.n	800d2fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	005a      	lsls	r2, r3, #1
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	085b      	lsrs	r3, r3, #1
 800d21c:	441a      	add	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	fbb2 f3f3 	udiv	r3, r2, r3
 800d226:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	2b0f      	cmp	r3, #15
 800d22c:	d916      	bls.n	800d25c <UART_SetConfig+0x404>
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d234:	d212      	bcs.n	800d25c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	b29b      	uxth	r3, r3
 800d23a:	f023 030f 	bic.w	r3, r3, #15
 800d23e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	085b      	lsrs	r3, r3, #1
 800d244:	b29b      	uxth	r3, r3
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	89fb      	ldrh	r3, [r7, #14]
 800d24e:	4313      	orrs	r3, r2
 800d250:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	89fa      	ldrh	r2, [r7, #14]
 800d258:	60da      	str	r2, [r3, #12]
 800d25a:	e04f      	b.n	800d2fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	77bb      	strb	r3, [r7, #30]
 800d260:	e04c      	b.n	800d2fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d262:	7ffb      	ldrb	r3, [r7, #31]
 800d264:	2b08      	cmp	r3, #8
 800d266:	d828      	bhi.n	800d2ba <UART_SetConfig+0x462>
 800d268:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <UART_SetConfig+0x418>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d295 	.word	0x0800d295
 800d274:	0800d29d 	.word	0x0800d29d
 800d278:	0800d2a5 	.word	0x0800d2a5
 800d27c:	0800d2bb 	.word	0x0800d2bb
 800d280:	0800d2ab 	.word	0x0800d2ab
 800d284:	0800d2bb 	.word	0x0800d2bb
 800d288:	0800d2bb 	.word	0x0800d2bb
 800d28c:	0800d2bb 	.word	0x0800d2bb
 800d290:	0800d2b3 	.word	0x0800d2b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d294:	f7fb fc84 	bl	8008ba0 <HAL_RCC_GetPCLK1Freq>
 800d298:	61b8      	str	r0, [r7, #24]
        break;
 800d29a:	e013      	b.n	800d2c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d29c:	f7fb fc94 	bl	8008bc8 <HAL_RCC_GetPCLK2Freq>
 800d2a0:	61b8      	str	r0, [r7, #24]
        break;
 800d2a2:	e00f      	b.n	800d2c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d2a4:	4b1d      	ldr	r3, [pc, #116]	; (800d31c <UART_SetConfig+0x4c4>)
 800d2a6:	61bb      	str	r3, [r7, #24]
        break;
 800d2a8:	e00c      	b.n	800d2c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2aa:	f7fb fba7 	bl	80089fc <HAL_RCC_GetSysClockFreq>
 800d2ae:	61b8      	str	r0, [r7, #24]
        break;
 800d2b0:	e008      	b.n	800d2c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2b6:	61bb      	str	r3, [r7, #24]
        break;
 800d2b8:	e004      	b.n	800d2c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	77bb      	strb	r3, [r7, #30]
        break;
 800d2c2:	bf00      	nop
    }

    if (pclk != 0U)
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d018      	beq.n	800d2fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	085a      	lsrs	r2, r3, #1
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	441a      	add	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	2b0f      	cmp	r3, #15
 800d2e2:	d909      	bls.n	800d2f8 <UART_SetConfig+0x4a0>
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ea:	d205      	bcs.n	800d2f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	60da      	str	r2, [r3, #12]
 800d2f6:	e001      	b.n	800d2fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800d308:	7fbb      	ldrb	r3, [r7, #30]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3720      	adds	r7, #32
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	40007c00 	.word	0x40007c00
 800d318:	40023800 	.word	0x40023800
 800d31c:	00f42400 	.word	0x00f42400

0800d320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32c:	f003 0301 	and.w	r3, r3, #1
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00a      	beq.n	800d34a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	f003 0302 	and.w	r3, r3, #2
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00a      	beq.n	800d36c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	430a      	orrs	r2, r1
 800d36a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d370:	f003 0304 	and.w	r3, r3, #4
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00a      	beq.n	800d38e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	430a      	orrs	r2, r1
 800d38c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d392:	f003 0308 	and.w	r3, r3, #8
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00a      	beq.n	800d3b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	430a      	orrs	r2, r1
 800d3ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b4:	f003 0310 	and.w	r3, r3, #16
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00a      	beq.n	800d3d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	430a      	orrs	r2, r1
 800d3d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d6:	f003 0320 	and.w	r3, r3, #32
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00a      	beq.n	800d3f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	430a      	orrs	r2, r1
 800d3f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d01a      	beq.n	800d436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	430a      	orrs	r2, r1
 800d414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d41e:	d10a      	bne.n	800d436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	430a      	orrs	r2, r1
 800d434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d00a      	beq.n	800d458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	430a      	orrs	r2, r1
 800d456:	605a      	str	r2, [r3, #4]
  }
}
 800d458:	bf00      	nop
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af02      	add	r7, sp, #8
 800d46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d474:	f7f8 fb74 	bl	8005b60 <HAL_GetTick>
 800d478:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 0308 	and.w	r3, r3, #8
 800d484:	2b08      	cmp	r3, #8
 800d486:	d10e      	bne.n	800d4a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2200      	movs	r2, #0
 800d492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 f81b 	bl	800d4d2 <UART_WaitOnFlagUntilTimeout>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e011      	b.n	800d4ca <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2220      	movs	r2, #32
 800d4aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2220      	movs	r2, #32
 800d4b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b09c      	sub	sp, #112	; 0x70
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	603b      	str	r3, [r7, #0]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4e2:	e0a7      	b.n	800d634 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4ea:	f000 80a3 	beq.w	800d634 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ee:	f7f8 fb37 	bl	8005b60 <HAL_GetTick>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d302      	bcc.n	800d504 <UART_WaitOnFlagUntilTimeout+0x32>
 800d4fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d500:	2b00      	cmp	r3, #0
 800d502:	d13f      	bne.n	800d584 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d50c:	e853 3f00 	ldrex	r3, [r3]
 800d510:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d514:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d518:	667b      	str	r3, [r7, #100]	; 0x64
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d522:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d524:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d526:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d52a:	e841 2300 	strex	r3, r2, [r1]
 800d52e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1e6      	bne.n	800d504 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3308      	adds	r3, #8
 800d53c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d540:	e853 3f00 	ldrex	r3, [r3]
 800d544:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	f023 0301 	bic.w	r3, r3, #1
 800d54c:	663b      	str	r3, [r7, #96]	; 0x60
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	3308      	adds	r3, #8
 800d554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d556:	64ba      	str	r2, [r7, #72]	; 0x48
 800d558:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d55a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d55c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d55e:	e841 2300 	strex	r3, r2, [r1]
 800d562:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d566:	2b00      	cmp	r3, #0
 800d568:	d1e5      	bne.n	800d536 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2220      	movs	r2, #32
 800d56e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2220      	movs	r2, #32
 800d574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800d580:	2303      	movs	r3, #3
 800d582:	e068      	b.n	800d656 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f003 0304 	and.w	r3, r3, #4
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d050      	beq.n	800d634 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	69db      	ldr	r3, [r3, #28]
 800d598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d59c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5a0:	d148      	bne.n	800d634 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b4:	e853 3f00 	ldrex	r3, [r3]
 800d5b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d5c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ca:	637b      	str	r3, [r7, #52]	; 0x34
 800d5cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5d2:	e841 2300 	strex	r3, r2, [r1]
 800d5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1e6      	bne.n	800d5ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3308      	adds	r3, #8
 800d5e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	e853 3f00 	ldrex	r3, [r3]
 800d5ec:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f023 0301 	bic.w	r3, r3, #1
 800d5f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3308      	adds	r3, #8
 800d5fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5fe:	623a      	str	r2, [r7, #32]
 800d600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d602:	69f9      	ldr	r1, [r7, #28]
 800d604:	6a3a      	ldr	r2, [r7, #32]
 800d606:	e841 2300 	strex	r3, r2, [r1]
 800d60a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1e5      	bne.n	800d5de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2220      	movs	r2, #32
 800d616:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2220      	movs	r2, #32
 800d61c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2220      	movs	r2, #32
 800d624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d630:	2303      	movs	r3, #3
 800d632:	e010      	b.n	800d656 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69da      	ldr	r2, [r3, #28]
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	4013      	ands	r3, r2
 800d63e:	68ba      	ldr	r2, [r7, #8]
 800d640:	429a      	cmp	r2, r3
 800d642:	bf0c      	ite	eq
 800d644:	2301      	moveq	r3, #1
 800d646:	2300      	movne	r3, #0
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	461a      	mov	r2, r3
 800d64c:	79fb      	ldrb	r3, [r7, #7]
 800d64e:	429a      	cmp	r2, r3
 800d650:	f43f af48 	beq.w	800d4e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3770      	adds	r7, #112	; 0x70
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d121      	bne.n	800d6b6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	4b27      	ldr	r3, [pc, #156]	; (800d714 <FMC_SDRAM_Init+0xb4>)
 800d678:	4013      	ands	r3, r2
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	6851      	ldr	r1, [r2, #4]
 800d67e:	683a      	ldr	r2, [r7, #0]
 800d680:	6892      	ldr	r2, [r2, #8]
 800d682:	4311      	orrs	r1, r2
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	68d2      	ldr	r2, [r2, #12]
 800d688:	4311      	orrs	r1, r2
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	6912      	ldr	r2, [r2, #16]
 800d68e:	4311      	orrs	r1, r2
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	6952      	ldr	r2, [r2, #20]
 800d694:	4311      	orrs	r1, r2
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	6992      	ldr	r2, [r2, #24]
 800d69a:	4311      	orrs	r1, r2
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	69d2      	ldr	r2, [r2, #28]
 800d6a0:	4311      	orrs	r1, r2
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	6a12      	ldr	r2, [r2, #32]
 800d6a6:	4311      	orrs	r1, r2
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d6ac:	430a      	orrs	r2, r1
 800d6ae:	431a      	orrs	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	e026      	b.n	800d704 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	69d9      	ldr	r1, [r3, #28]
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	4319      	orrs	r1, r3
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6cc:	430b      	orrs	r3, r1
 800d6ce:	431a      	orrs	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	685a      	ldr	r2, [r3, #4]
 800d6d8:	4b0e      	ldr	r3, [pc, #56]	; (800d714 <FMC_SDRAM_Init+0xb4>)
 800d6da:	4013      	ands	r3, r2
 800d6dc:	683a      	ldr	r2, [r7, #0]
 800d6de:	6851      	ldr	r1, [r2, #4]
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	6892      	ldr	r2, [r2, #8]
 800d6e4:	4311      	orrs	r1, r2
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	68d2      	ldr	r2, [r2, #12]
 800d6ea:	4311      	orrs	r1, r2
 800d6ec:	683a      	ldr	r2, [r7, #0]
 800d6ee:	6912      	ldr	r2, [r2, #16]
 800d6f0:	4311      	orrs	r1, r2
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	6952      	ldr	r2, [r2, #20]
 800d6f6:	4311      	orrs	r1, r2
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	6992      	ldr	r2, [r2, #24]
 800d6fc:	430a      	orrs	r2, r1
 800d6fe:	431a      	orrs	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	ffff8000 	.word	0xffff8000

0800d718 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d128      	bne.n	800d77c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	1e59      	subs	r1, r3, #1
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	3b01      	subs	r3, #1
 800d73e:	011b      	lsls	r3, r3, #4
 800d740:	4319      	orrs	r1, r3
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	3b01      	subs	r3, #1
 800d748:	021b      	lsls	r3, r3, #8
 800d74a:	4319      	orrs	r1, r3
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	3b01      	subs	r3, #1
 800d752:	031b      	lsls	r3, r3, #12
 800d754:	4319      	orrs	r1, r3
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	3b01      	subs	r3, #1
 800d75c:	041b      	lsls	r3, r3, #16
 800d75e:	4319      	orrs	r1, r3
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	695b      	ldr	r3, [r3, #20]
 800d764:	3b01      	subs	r3, #1
 800d766:	051b      	lsls	r3, r3, #20
 800d768:	4319      	orrs	r1, r3
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	699b      	ldr	r3, [r3, #24]
 800d76e:	3b01      	subs	r3, #1
 800d770:	061b      	lsls	r3, r3, #24
 800d772:	430b      	orrs	r3, r1
 800d774:	431a      	orrs	r2, r3
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	609a      	str	r2, [r3, #8]
 800d77a:	e02d      	b.n	800d7d8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	689a      	ldr	r2, [r3, #8]
 800d780:	4b19      	ldr	r3, [pc, #100]	; (800d7e8 <FMC_SDRAM_Timing_Init+0xd0>)
 800d782:	4013      	ands	r3, r2
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	68d2      	ldr	r2, [r2, #12]
 800d788:	3a01      	subs	r2, #1
 800d78a:	0311      	lsls	r1, r2, #12
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	6952      	ldr	r2, [r2, #20]
 800d790:	3a01      	subs	r2, #1
 800d792:	0512      	lsls	r2, r2, #20
 800d794:	430a      	orrs	r2, r1
 800d796:	431a      	orrs	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	1e59      	subs	r1, r3, #1
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	011b      	lsls	r3, r3, #4
 800d7b2:	4319      	orrs	r1, r3
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	021b      	lsls	r3, r3, #8
 800d7bc:	4319      	orrs	r1, r3
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	041b      	lsls	r3, r3, #16
 800d7c6:	4319      	orrs	r1, r3
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	699b      	ldr	r3, [r3, #24]
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	061b      	lsls	r3, r3, #24
 800d7d0:	430b      	orrs	r3, r1
 800d7d2:	431a      	orrs	r2, r3
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	ff0f0fff 	.word	0xff0f0fff

0800d7ec <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	691a      	ldr	r2, [r3, #16]
 800d7fc:	4b0c      	ldr	r3, [pc, #48]	; (800d830 <FMC_SDRAM_SendCommand+0x44>)
 800d7fe:	4013      	ands	r3, r2
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	6811      	ldr	r1, [r2, #0]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	6852      	ldr	r2, [r2, #4]
 800d808:	4311      	orrs	r1, r2
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	6892      	ldr	r2, [r2, #8]
 800d80e:	3a01      	subs	r2, #1
 800d810:	0152      	lsls	r2, r2, #5
 800d812:	4311      	orrs	r1, r2
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	68d2      	ldr	r2, [r2, #12]
 800d818:	0252      	lsls	r2, r2, #9
 800d81a:	430a      	orrs	r2, r1
 800d81c:	431a      	orrs	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	ffc00000 	.word	0xffc00000

0800d834 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	695a      	ldr	r2, [r3, #20]
 800d842:	4b07      	ldr	r3, [pc, #28]	; (800d860 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800d844:	4013      	ands	r3, r2
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	0052      	lsls	r2, r2, #1
 800d84a:	431a      	orrs	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	ffffc001 	.word	0xffffc001

0800d864 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d864:	b084      	sub	sp, #16
 800d866:	b480      	push	{r7}
 800d868:	b085      	sub	sp, #20
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	f107 001c 	add.w	r0, r7, #28
 800d872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d87a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d87c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d87e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d882:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d886:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d88a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d88e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	4313      	orrs	r3, r2
 800d894:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685a      	ldr	r2, [r3, #4]
 800d89a:	4b07      	ldr	r3, [pc, #28]	; (800d8b8 <SDMMC_Init+0x54>)
 800d89c:	4013      	ands	r3, r2
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	431a      	orrs	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	b004      	add	sp, #16
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	ffff8100 	.word	0xffff8100

0800d8bc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800d8d6:	b480      	push	{r7}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2203      	movs	r2, #3
 800d904:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f003 0303 	and.w	r3, r3, #3
}
 800d924:	4618      	mov	r0, r3
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d94e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d954:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d95a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	4313      	orrs	r3, r2
 800d960:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68da      	ldr	r2, [r3, #12]
 800d966:	4b06      	ldr	r3, [pc, #24]	; (800d980 <SDMMC_SendCommand+0x50>)
 800d968:	4013      	ands	r3, r2
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	431a      	orrs	r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	fffff000 	.word	0xfffff000

0800d984 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	691b      	ldr	r3, [r3, #16]
 800d990:	b2db      	uxtb	r3, r3
}
 800d992:	4618      	mov	r0, r3
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d99e:	b480      	push	{r7}
 800d9a0:	b085      	sub	sp, #20
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	3314      	adds	r3, #20
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
}  
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3714      	adds	r7, #20
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9ea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d9f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d9f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da02:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	431a      	orrs	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800da0e:	2300      	movs	r3, #0

}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b088      	sub	sp, #32
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800da2a:	2310      	movs	r3, #16
 800da2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da2e:	2340      	movs	r3, #64	; 0x40
 800da30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da32:	2300      	movs	r3, #0
 800da34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da3c:	f107 0308 	add.w	r3, r7, #8
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff ff74 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800da48:	f241 3288 	movw	r2, #5000	; 0x1388
 800da4c:	2110      	movs	r1, #16
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 fa1a 	bl	800de88 <SDMMC_GetCmdResp1>
 800da54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da56:	69fb      	ldr	r3, [r7, #28]
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3720      	adds	r7, #32
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b088      	sub	sp, #32
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800da6e:	2311      	movs	r3, #17
 800da70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da72:	2340      	movs	r3, #64	; 0x40
 800da74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da76:	2300      	movs	r3, #0
 800da78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da80:	f107 0308 	add.w	r3, r7, #8
 800da84:	4619      	mov	r1, r3
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff ff52 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800da8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da90:	2111      	movs	r1, #17
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f9f8 	bl	800de88 <SDMMC_GetCmdResp1>
 800da98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da9a:	69fb      	ldr	r3, [r7, #28]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3720      	adds	r7, #32
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dab2:	2312      	movs	r3, #18
 800dab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dab6:	2340      	movs	r3, #64	; 0x40
 800dab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daba:	2300      	movs	r3, #0
 800dabc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dabe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dac4:	f107 0308 	add.w	r3, r7, #8
 800dac8:	4619      	mov	r1, r3
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7ff ff30 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dad0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dad4:	2112      	movs	r1, #18
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f9d6 	bl	800de88 <SDMMC_GetCmdResp1>
 800dadc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dade:	69fb      	ldr	r3, [r7, #28]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3720      	adds	r7, #32
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b088      	sub	sp, #32
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800daf6:	2318      	movs	r3, #24
 800daf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dafa:	2340      	movs	r3, #64	; 0x40
 800dafc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dafe:	2300      	movs	r3, #0
 800db00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db08:	f107 0308 	add.w	r3, r7, #8
 800db0c:	4619      	mov	r1, r3
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff ff0e 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800db14:	f241 3288 	movw	r2, #5000	; 0x1388
 800db18:	2118      	movs	r1, #24
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f9b4 	bl	800de88 <SDMMC_GetCmdResp1>
 800db20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db22:	69fb      	ldr	r3, [r7, #28]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3720      	adds	r7, #32
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db3a:	2319      	movs	r3, #25
 800db3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db3e:	2340      	movs	r3, #64	; 0x40
 800db40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db42:	2300      	movs	r3, #0
 800db44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db4c:	f107 0308 	add.w	r3, r7, #8
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff feec 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800db58:	f241 3288 	movw	r2, #5000	; 0x1388
 800db5c:	2119      	movs	r1, #25
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 f992 	bl	800de88 <SDMMC_GetCmdResp1>
 800db64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db66:	69fb      	ldr	r3, [r7, #28]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3720      	adds	r7, #32
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800db78:	2300      	movs	r3, #0
 800db7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800db7c:	230c      	movs	r3, #12
 800db7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db80:	2340      	movs	r3, #64	; 0x40
 800db82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db84:	2300      	movs	r3, #0
 800db86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db8e:	f107 0308 	add.w	r3, r7, #8
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff fecb 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800db9a:	4a05      	ldr	r2, [pc, #20]	; (800dbb0 <SDMMC_CmdStopTransfer+0x40>)
 800db9c:	210c      	movs	r1, #12
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f972 	bl	800de88 <SDMMC_GetCmdResp1>
 800dba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dba6:	69fb      	ldr	r3, [r7, #28]
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3720      	adds	r7, #32
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	05f5e100 	.word	0x05f5e100

0800dbb4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08a      	sub	sp, #40	; 0x28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dbc4:	2307      	movs	r3, #7
 800dbc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbc8:	2340      	movs	r3, #64	; 0x40
 800dbca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbd4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbd6:	f107 0310 	add.w	r3, r7, #16
 800dbda:	4619      	mov	r1, r3
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f7ff fea7 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dbe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbe6:	2107      	movs	r1, #7
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 f94d 	bl	800de88 <SDMMC_GetCmdResp1>
 800dbee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3728      	adds	r7, #40	; 0x28
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b088      	sub	sp, #32
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dc02:	2300      	movs	r3, #0
 800dc04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc06:	2300      	movs	r3, #0
 800dc08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc18:	f107 0308 	add.w	r3, r7, #8
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff fe86 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fb67 	bl	800e2f8 <SDMMC_GetCmdError>
 800dc2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc2c:	69fb      	ldr	r3, [r7, #28]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3720      	adds	r7, #32
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b088      	sub	sp, #32
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc3e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dc42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc44:	2308      	movs	r3, #8
 800dc46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc48:	2340      	movs	r3, #64	; 0x40
 800dc4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc56:	f107 0308 	add.w	r3, r7, #8
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f7ff fe67 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fafa 	bl	800e25c <SDMMC_GetCmdResp7>
 800dc68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3720      	adds	r7, #32
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc82:	2337      	movs	r3, #55	; 0x37
 800dc84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc86:	2340      	movs	r3, #64	; 0x40
 800dc88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc94:	f107 0308 	add.w	r3, r7, #8
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff fe48 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dca4:	2137      	movs	r1, #55	; 0x37
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f8ee 	bl	800de88 <SDMMC_GetCmdResp1>
 800dcac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcae:	69fb      	ldr	r3, [r7, #28]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3720      	adds	r7, #32
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	4b0d      	ldr	r3, [pc, #52]	; (800dcfc <SDMMC_CmdAppOperCommand+0x44>)
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dcca:	2329      	movs	r3, #41	; 0x29
 800dccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcce:	2340      	movs	r3, #64	; 0x40
 800dcd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcdc:	f107 0308 	add.w	r3, r7, #8
 800dce0:	4619      	mov	r1, r3
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7ff fe24 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fa03 	bl	800e0f4 <SDMMC_GetCmdResp3>
 800dcee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcf0:	69fb      	ldr	r3, [r7, #28]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3720      	adds	r7, #32
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	80100000 	.word	0x80100000

0800dd00 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd0e:	2306      	movs	r3, #6
 800dd10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd12:	2340      	movs	r3, #64	; 0x40
 800dd14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd16:	2300      	movs	r3, #0
 800dd18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd20:	f107 0308 	add.w	r3, r7, #8
 800dd24:	4619      	mov	r1, r3
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff fe02 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dd2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd30:	2106      	movs	r1, #6
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f8a8 	bl	800de88 <SDMMC_GetCmdResp1>
 800dd38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3720      	adds	r7, #32
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd50:	2333      	movs	r3, #51	; 0x33
 800dd52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd54:	2340      	movs	r3, #64	; 0x40
 800dd56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd62:	f107 0308 	add.w	r3, r7, #8
 800dd66:	4619      	mov	r1, r3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7ff fde1 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dd6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd72:	2133      	movs	r1, #51	; 0x33
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f887 	bl	800de88 <SDMMC_GetCmdResp1>
 800dd7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd7c:	69fb      	ldr	r3, [r7, #28]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3720      	adds	r7, #32
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b088      	sub	sp, #32
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd92:	2302      	movs	r3, #2
 800dd94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd96:	23c0      	movs	r3, #192	; 0xc0
 800dd98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dda2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dda4:	f107 0308 	add.w	r3, r7, #8
 800dda8:	4619      	mov	r1, r3
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7ff fdc0 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 f957 	bl	800e064 <SDMMC_GetCmdResp2>
 800ddb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddb8:	69fb      	ldr	r3, [r7, #28]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3720      	adds	r7, #32
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b088      	sub	sp, #32
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ddd0:	2309      	movs	r3, #9
 800ddd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ddd4:	23c0      	movs	r3, #192	; 0xc0
 800ddd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dde0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dde2:	f107 0308 	add.w	r3, r7, #8
 800dde6:	4619      	mov	r1, r3
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f7ff fda1 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f938 	bl	800e064 <SDMMC_GetCmdResp2>
 800ddf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddf6:	69fb      	ldr	r3, [r7, #28]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3720      	adds	r7, #32
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de0a:	2300      	movs	r3, #0
 800de0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de0e:	2303      	movs	r3, #3
 800de10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de12:	2340      	movs	r3, #64	; 0x40
 800de14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de16:	2300      	movs	r3, #0
 800de18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de20:	f107 0308 	add.w	r3, r7, #8
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff fd82 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	2103      	movs	r1, #3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 f99d 	bl	800e170 <SDMMC_GetCmdResp6>
 800de36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de38:	69fb      	ldr	r3, [r7, #28]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3720      	adds	r7, #32
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b088      	sub	sp, #32
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de50:	230d      	movs	r3, #13
 800de52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de54:	2340      	movs	r3, #64	; 0x40
 800de56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de58:	2300      	movs	r3, #0
 800de5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de62:	f107 0308 	add.w	r3, r7, #8
 800de66:	4619      	mov	r1, r3
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff fd61 	bl	800d930 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800de6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800de72:	210d      	movs	r1, #13
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f807 	bl	800de88 <SDMMC_GetCmdResp1>
 800de7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de7c:	69fb      	ldr	r3, [r7, #28]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3720      	adds	r7, #32
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
	...

0800de88 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	460b      	mov	r3, r1
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800de96:	4b70      	ldr	r3, [pc, #448]	; (800e058 <SDMMC_GetCmdResp1+0x1d0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a70      	ldr	r2, [pc, #448]	; (800e05c <SDMMC_GetCmdResp1+0x1d4>)
 800de9c:	fba2 2303 	umull	r2, r3, r2, r3
 800dea0:	0a5a      	lsrs	r2, r3, #9
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	fb02 f303 	mul.w	r3, r2, r3
 800dea8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	1e5a      	subs	r2, r3, #1
 800deae:	61fa      	str	r2, [r7, #28]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d102      	bne.n	800deba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800deb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800deb8:	e0c9      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800debe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d0ef      	beq.n	800deaa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1ea      	bne.n	800deaa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ded8:	f003 0304 	and.w	r3, r3, #4
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d004      	beq.n	800deea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2204      	movs	r2, #4
 800dee4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dee6:	2304      	movs	r3, #4
 800dee8:	e0b1      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b00      	cmp	r3, #0
 800def4:	d004      	beq.n	800df00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2201      	movs	r2, #1
 800defa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800defc:	2301      	movs	r3, #1
 800defe:	e0a6      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	22c5      	movs	r2, #197	; 0xc5
 800df04:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7ff fd3c 	bl	800d984 <SDMMC_GetCommandResponse>
 800df0c:	4603      	mov	r3, r0
 800df0e:	461a      	mov	r2, r3
 800df10:	7afb      	ldrb	r3, [r7, #11]
 800df12:	4293      	cmp	r3, r2
 800df14:	d001      	beq.n	800df1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df16:	2301      	movs	r3, #1
 800df18:	e099      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800df1a:	2100      	movs	r1, #0
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f7ff fd3e 	bl	800d99e <SDMMC_GetResponse>
 800df22:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df24:	697a      	ldr	r2, [r7, #20]
 800df26:	4b4e      	ldr	r3, [pc, #312]	; (800e060 <SDMMC_GetCmdResp1+0x1d8>)
 800df28:	4013      	ands	r3, r2
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d101      	bne.n	800df32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800df2e:	2300      	movs	r3, #0
 800df30:	e08d      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	2b00      	cmp	r3, #0
 800df36:	da02      	bge.n	800df3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df3c:	e087      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df48:	2340      	movs	r3, #64	; 0x40
 800df4a:	e080      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800df56:	2380      	movs	r3, #128	; 0x80
 800df58:	e079      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800df64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df68:	e071      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800df74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df78:	e069      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df80:	2b00      	cmp	r3, #0
 800df82:	d002      	beq.n	800df8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800df84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df88:	e061      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df90:	2b00      	cmp	r3, #0
 800df92:	d002      	beq.n	800df9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800df94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df98:	e059      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dfa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfa8:	e051      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dfb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfb8:	e049      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dfc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dfc8:	e041      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d002      	beq.n	800dfda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dfd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfd8:	e039      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dfe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dfe8:	e031      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dff4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dff8:	e029      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e004:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e008:	e021      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e014:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e018:	e019      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d002      	beq.n	800e02a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e028:	e011      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e030:	2b00      	cmp	r3, #0
 800e032:	d002      	beq.n	800e03a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e034:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e038:	e009      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	f003 0308 	and.w	r3, r3, #8
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e044:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e048:	e001      	b.n	800e04e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e04a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3720      	adds	r7, #32
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	2000001c 	.word	0x2000001c
 800e05c:	10624dd3 	.word	0x10624dd3
 800e060:	fdffe008 	.word	0xfdffe008

0800e064 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e06c:	4b1f      	ldr	r3, [pc, #124]	; (800e0ec <SDMMC_GetCmdResp2+0x88>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a1f      	ldr	r2, [pc, #124]	; (800e0f0 <SDMMC_GetCmdResp2+0x8c>)
 800e072:	fba2 2303 	umull	r2, r3, r2, r3
 800e076:	0a5b      	lsrs	r3, r3, #9
 800e078:	f241 3288 	movw	r2, #5000	; 0x1388
 800e07c:	fb02 f303 	mul.w	r3, r2, r3
 800e080:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	1e5a      	subs	r2, r3, #1
 800e086:	60fa      	str	r2, [r7, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d102      	bne.n	800e092 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e08c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e090:	e026      	b.n	800e0e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e096:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0ef      	beq.n	800e082 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1ea      	bne.n	800e082 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b0:	f003 0304 	and.w	r3, r3, #4
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d004      	beq.n	800e0c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2204      	movs	r2, #4
 800e0bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0be:	2304      	movs	r3, #4
 800e0c0:	e00e      	b.n	800e0e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0c6:	f003 0301 	and.w	r3, r3, #1
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d004      	beq.n	800e0d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e003      	b.n	800e0e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	22c5      	movs	r2, #197	; 0xc5
 800e0dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3714      	adds	r7, #20
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr
 800e0ec:	2000001c 	.word	0x2000001c
 800e0f0:	10624dd3 	.word	0x10624dd3

0800e0f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0fc:	4b1a      	ldr	r3, [pc, #104]	; (800e168 <SDMMC_GetCmdResp3+0x74>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a1a      	ldr	r2, [pc, #104]	; (800e16c <SDMMC_GetCmdResp3+0x78>)
 800e102:	fba2 2303 	umull	r2, r3, r2, r3
 800e106:	0a5b      	lsrs	r3, r3, #9
 800e108:	f241 3288 	movw	r2, #5000	; 0x1388
 800e10c:	fb02 f303 	mul.w	r3, r2, r3
 800e110:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	1e5a      	subs	r2, r3, #1
 800e116:	60fa      	str	r2, [r7, #12]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d102      	bne.n	800e122 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e11c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e120:	e01b      	b.n	800e15a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e126:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d0ef      	beq.n	800e112 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1ea      	bne.n	800e112 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e140:	f003 0304 	and.w	r3, r3, #4
 800e144:	2b00      	cmp	r3, #0
 800e146:	d004      	beq.n	800e152 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2204      	movs	r2, #4
 800e14c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e14e:	2304      	movs	r3, #4
 800e150:	e003      	b.n	800e15a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	22c5      	movs	r2, #197	; 0xc5
 800e156:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3714      	adds	r7, #20
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	2000001c 	.word	0x2000001c
 800e16c:	10624dd3 	.word	0x10624dd3

0800e170 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	460b      	mov	r3, r1
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e17e:	4b35      	ldr	r3, [pc, #212]	; (800e254 <SDMMC_GetCmdResp6+0xe4>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4a35      	ldr	r2, [pc, #212]	; (800e258 <SDMMC_GetCmdResp6+0xe8>)
 800e184:	fba2 2303 	umull	r2, r3, r2, r3
 800e188:	0a5b      	lsrs	r3, r3, #9
 800e18a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e18e:	fb02 f303 	mul.w	r3, r2, r3
 800e192:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	1e5a      	subs	r2, r3, #1
 800e198:	61fa      	str	r2, [r7, #28]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d102      	bne.n	800e1a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e19e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1a2:	e052      	b.n	800e24a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d0ef      	beq.n	800e194 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1ea      	bne.n	800e194 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c2:	f003 0304 	and.w	r3, r3, #4
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d004      	beq.n	800e1d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2204      	movs	r2, #4
 800e1ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1d0:	2304      	movs	r3, #4
 800e1d2:	e03a      	b.n	800e24a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d8:	f003 0301 	and.w	r3, r3, #1
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d004      	beq.n	800e1ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e02f      	b.n	800e24a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f7ff fbca 	bl	800d984 <SDMMC_GetCommandResponse>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	7afb      	ldrb	r3, [r7, #11]
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d001      	beq.n	800e1fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e025      	b.n	800e24a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	22c5      	movs	r2, #197	; 0xc5
 800e202:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e204:	2100      	movs	r1, #0
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f7ff fbc9 	bl	800d99e <SDMMC_GetResponse>
 800e20c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e214:	2b00      	cmp	r3, #0
 800e216:	d106      	bne.n	800e226 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	0c1b      	lsrs	r3, r3, #16
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e222:	2300      	movs	r3, #0
 800e224:	e011      	b.n	800e24a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d002      	beq.n	800e236 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e234:	e009      	b.n	800e24a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e244:	e001      	b.n	800e24a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3720      	adds	r7, #32
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	2000001c 	.word	0x2000001c
 800e258:	10624dd3 	.word	0x10624dd3

0800e25c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e264:	4b22      	ldr	r3, [pc, #136]	; (800e2f0 <SDMMC_GetCmdResp7+0x94>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a22      	ldr	r2, [pc, #136]	; (800e2f4 <SDMMC_GetCmdResp7+0x98>)
 800e26a:	fba2 2303 	umull	r2, r3, r2, r3
 800e26e:	0a5b      	lsrs	r3, r3, #9
 800e270:	f241 3288 	movw	r2, #5000	; 0x1388
 800e274:	fb02 f303 	mul.w	r3, r2, r3
 800e278:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	1e5a      	subs	r2, r3, #1
 800e27e:	60fa      	str	r2, [r7, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d102      	bne.n	800e28a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e284:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e288:	e02c      	b.n	800e2e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e296:	2b00      	cmp	r3, #0
 800e298:	d0ef      	beq.n	800e27a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1ea      	bne.n	800e27a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a8:	f003 0304 	and.w	r3, r3, #4
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d004      	beq.n	800e2ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2204      	movs	r2, #4
 800e2b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2b6:	2304      	movs	r3, #4
 800e2b8:	e014      	b.n	800e2e4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2be:	f003 0301 	and.w	r3, r3, #1
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d004      	beq.n	800e2d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e009      	b.n	800e2e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2240      	movs	r2, #64	; 0x40
 800e2e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e2e2:	2300      	movs	r3, #0
  
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	2000001c 	.word	0x2000001c
 800e2f4:	10624dd3 	.word	0x10624dd3

0800e2f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e300:	4b11      	ldr	r3, [pc, #68]	; (800e348 <SDMMC_GetCmdError+0x50>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a11      	ldr	r2, [pc, #68]	; (800e34c <SDMMC_GetCmdError+0x54>)
 800e306:	fba2 2303 	umull	r2, r3, r2, r3
 800e30a:	0a5b      	lsrs	r3, r3, #9
 800e30c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e310:	fb02 f303 	mul.w	r3, r2, r3
 800e314:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	1e5a      	subs	r2, r3, #1
 800e31a:	60fa      	str	r2, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d102      	bne.n	800e326 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e320:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e324:	e009      	b.n	800e33a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d0f1      	beq.n	800e316 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	22c5      	movs	r2, #197	; 0xc5
 800e336:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3714      	adds	r7, #20
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	2000001c 	.word	0x2000001c
 800e34c:	10624dd3 	.word	0x10624dd3

0800e350 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e354:	4904      	ldr	r1, [pc, #16]	; (800e368 <MX_FATFS_Init+0x18>)
 800e356:	4805      	ldr	r0, [pc, #20]	; (800e36c <MX_FATFS_Init+0x1c>)
 800e358:	f000 fac8 	bl	800e8ec <FATFS_LinkDriver>
 800e35c:	4603      	mov	r3, r0
 800e35e:	461a      	mov	r2, r3
 800e360:	4b03      	ldr	r3, [pc, #12]	; (800e370 <MX_FATFS_Init+0x20>)
 800e362:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e364:	bf00      	nop
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000ff0 	.word	0x20000ff0
 800e36c:	0801449c 	.word	0x0801449c
 800e370:	20000fec 	.word	0x20000fec

0800e374 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e37e:	f000 f896 	bl	800e4ae <BSP_SD_IsDetected>
 800e382:	4603      	mov	r3, r0
 800e384:	2b01      	cmp	r3, #1
 800e386:	d001      	beq.n	800e38c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e388:	2302      	movs	r3, #2
 800e38a:	e012      	b.n	800e3b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e38c:	480b      	ldr	r0, [pc, #44]	; (800e3bc <BSP_SD_Init+0x48>)
 800e38e:	f7fb ff1d 	bl	800a1cc <HAL_SD_Init>
 800e392:	4603      	mov	r3, r0
 800e394:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d109      	bne.n	800e3b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e39c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e3a0:	4806      	ldr	r0, [pc, #24]	; (800e3bc <BSP_SD_Init+0x48>)
 800e3a2:	f7fc fce3 	bl	800ad6c <HAL_SD_ConfigWideBusOperation>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d001      	beq.n	800e3b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3708      	adds	r7, #8
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	200008a4 	.word	0x200008a4

0800e3c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	68f9      	ldr	r1, [r7, #12]
 800e3d6:	4806      	ldr	r0, [pc, #24]	; (800e3f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e3d8:	f7fb ffb0 	bl	800a33c <HAL_SD_ReadBlocks_DMA>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d001      	beq.n	800e3e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	200008a4 	.word	0x200008a4

0800e3f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e400:	2300      	movs	r3, #0
 800e402:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	68f9      	ldr	r1, [r7, #12]
 800e40a:	4806      	ldr	r0, [pc, #24]	; (800e424 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e40c:	f7fc f878 	bl	800a500 <HAL_SD_WriteBlocks_DMA>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	200008a4 	.word	0x200008a4

0800e428 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e42c:	4805      	ldr	r0, [pc, #20]	; (800e444 <BSP_SD_GetCardState+0x1c>)
 800e42e:	f7fc fd37 	bl	800aea0 <HAL_SD_GetCardState>
 800e432:	4603      	mov	r3, r0
 800e434:	2b04      	cmp	r3, #4
 800e436:	bf14      	ite	ne
 800e438:	2301      	movne	r3, #1
 800e43a:	2300      	moveq	r3, #0
 800e43c:	b2db      	uxtb	r3, r3
}
 800e43e:	4618      	mov	r0, r3
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	200008a4 	.word	0x200008a4

0800e448 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e450:	6879      	ldr	r1, [r7, #4]
 800e452:	4803      	ldr	r0, [pc, #12]	; (800e460 <BSP_SD_GetCardInfo+0x18>)
 800e454:	f7fc fc5e 	bl	800ad14 <HAL_SD_GetCardInfo>
}
 800e458:	bf00      	nop
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	200008a4 	.word	0x200008a4

0800e464 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e46c:	f000 f818 	bl	800e4a0 <BSP_SD_AbortCallback>
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e480:	f000 f9c4 	bl	800e80c <BSP_SD_WriteCpltCallback>
}
 800e484:	bf00      	nop
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e494:	f000 f9c8 	bl	800e828 <BSP_SD_ReadCpltCallback>
}
 800e498:	bf00      	nop
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	af00      	add	r7, sp, #0

}
 800e4a4:	bf00      	nop
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b082      	sub	sp, #8
 800e4b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e4b8:	f000 f80c 	bl	800e4d4 <BSP_PlatformIsDetected>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	b2db      	uxtb	r3, r3
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3708      	adds	r7, #8
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
	...

0800e4d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e4de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e4e2:	4806      	ldr	r0, [pc, #24]	; (800e4fc <BSP_PlatformIsDetected+0x28>)
 800e4e4:	f7f9 f9a4 	bl	8007830 <HAL_GPIO_ReadPin>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	40020800 	.word	0x40020800

0800e500 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e508:	f000 fa3c 	bl	800e984 <osKernelSysTick>
 800e50c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e50e:	e006      	b.n	800e51e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e510:	f7ff ff8a 	bl	800e428 <BSP_SD_GetCardState>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	e009      	b.n	800e532 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e51e:	f000 fa31 	bl	800e984 <osKernelSysTick>
 800e522:	4602      	mov	r2, r0
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	1ad3      	subs	r3, r2, r3
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d8f0      	bhi.n	800e510 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
	...

0800e53c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	4603      	mov	r3, r0
 800e544:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e546:	4b0b      	ldr	r3, [pc, #44]	; (800e574 <SD_CheckStatus+0x38>)
 800e548:	2201      	movs	r2, #1
 800e54a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e54c:	f7ff ff6c 	bl	800e428 <BSP_SD_GetCardState>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d107      	bne.n	800e566 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e556:	4b07      	ldr	r3, [pc, #28]	; (800e574 <SD_CheckStatus+0x38>)
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	f023 0301 	bic.w	r3, r3, #1
 800e560:	b2da      	uxtb	r2, r3
 800e562:	4b04      	ldr	r3, [pc, #16]	; (800e574 <SD_CheckStatus+0x38>)
 800e564:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e566:	4b03      	ldr	r3, [pc, #12]	; (800e574 <SD_CheckStatus+0x38>)
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	b2db      	uxtb	r3, r3
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	20000031 	.word	0x20000031

0800e578 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e578:	b590      	push	{r4, r7, lr}
 800e57a:	b087      	sub	sp, #28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4603      	mov	r3, r0
 800e580:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e582:	4b20      	ldr	r3, [pc, #128]	; (800e604 <SD_initialize+0x8c>)
 800e584:	2201      	movs	r2, #1
 800e586:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e588:	f000 f9f0 	bl	800e96c <osKernelRunning>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d030      	beq.n	800e5f4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e592:	f7ff feef 	bl	800e374 <BSP_SD_Init>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d107      	bne.n	800e5ac <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e59c:	79fb      	ldrb	r3, [r7, #7]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7ff ffcc 	bl	800e53c <SD_CheckStatus>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	4b16      	ldr	r3, [pc, #88]	; (800e604 <SD_initialize+0x8c>)
 800e5aa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e5ac:	4b15      	ldr	r3, [pc, #84]	; (800e604 <SD_initialize+0x8c>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d01e      	beq.n	800e5f4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e5b6:	4b14      	ldr	r3, [pc, #80]	; (800e608 <SD_initialize+0x90>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d10e      	bne.n	800e5dc <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e5be:	4b13      	ldr	r3, [pc, #76]	; (800e60c <SD_initialize+0x94>)
 800e5c0:	f107 0408 	add.w	r4, r7, #8
 800e5c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e5c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e5ca:	f107 0308 	add.w	r3, r7, #8
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 fa47 	bl	800ea64 <osMessageCreate>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	4a0b      	ldr	r2, [pc, #44]	; (800e608 <SD_initialize+0x90>)
 800e5da:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e5dc:	4b0a      	ldr	r3, [pc, #40]	; (800e608 <SD_initialize+0x90>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d107      	bne.n	800e5f4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e5e4:	4b07      	ldr	r3, [pc, #28]	; (800e604 <SD_initialize+0x8c>)
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	f043 0301 	orr.w	r3, r3, #1
 800e5ee:	b2da      	uxtb	r2, r3
 800e5f0:	4b04      	ldr	r3, [pc, #16]	; (800e604 <SD_initialize+0x8c>)
 800e5f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e5f4:	4b03      	ldr	r3, [pc, #12]	; (800e604 <SD_initialize+0x8c>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	b2db      	uxtb	r3, r3
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	371c      	adds	r7, #28
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd90      	pop	{r4, r7, pc}
 800e602:	bf00      	nop
 800e604:	20000031 	.word	0x20000031
 800e608:	20000ff4 	.word	0x20000ff4
 800e60c:	080129ac 	.word	0x080129ac

0800e610 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	4603      	mov	r3, r0
 800e618:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e61a:	79fb      	ldrb	r3, [r7, #7]
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7ff ff8d 	bl	800e53c <SD_CheckStatus>
 800e622:	4603      	mov	r3, r0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b08a      	sub	sp, #40	; 0x28
 800e630:	af00      	add	r7, sp, #0
 800e632:	60b9      	str	r1, [r7, #8]
 800e634:	607a      	str	r2, [r7, #4]
 800e636:	603b      	str	r3, [r7, #0]
 800e638:	4603      	mov	r3, r0
 800e63a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e642:	f247 5030 	movw	r0, #30000	; 0x7530
 800e646:	f7ff ff5b 	bl	800e500 <SD_CheckStatusWithTimeout>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	da02      	bge.n	800e656 <SD_read+0x2a>
  {
    return res;
 800e650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e654:	e032      	b.n	800e6bc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	6879      	ldr	r1, [r7, #4]
 800e65a:	68b8      	ldr	r0, [r7, #8]
 800e65c:	f7ff feb0 	bl	800e3c0 <BSP_SD_ReadBlocks_DMA>
 800e660:	4603      	mov	r3, r0
 800e662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800e666:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d124      	bne.n	800e6b8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e66e:	4b15      	ldr	r3, [pc, #84]	; (800e6c4 <SD_read+0x98>)
 800e670:	6819      	ldr	r1, [r3, #0]
 800e672:	f107 0314 	add.w	r3, r7, #20
 800e676:	f247 5230 	movw	r2, #30000	; 0x7530
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 fa5a 	bl	800eb34 <osMessageGet>

    if (event.status == osEventMessage)
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2b10      	cmp	r3, #16
 800e684:	d118      	bne.n	800e6b8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d115      	bne.n	800e6b8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e68c:	f000 f97a 	bl	800e984 <osKernelSysTick>
 800e690:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e692:	e008      	b.n	800e6a6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e694:	f7ff fec8 	bl	800e428 <BSP_SD_GetCardState>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d103      	bne.n	800e6a6 <SD_read+0x7a>
              {
                res = RES_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e6a4:	e008      	b.n	800e6b8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e6a6:	f000 f96d 	bl	800e984 <osKernelSysTick>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	6a3b      	ldr	r3, [r7, #32]
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d9ed      	bls.n	800e694 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3728      	adds	r7, #40	; 0x28
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	20000ff4 	.word	0x20000ff4

0800e6c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b08a      	sub	sp, #40	; 0x28
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60b9      	str	r1, [r7, #8]
 800e6d0:	607a      	str	r2, [r7, #4]
 800e6d2:	603b      	str	r3, [r7, #0]
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e6de:	f247 5030 	movw	r0, #30000	; 0x7530
 800e6e2:	f7ff ff0d 	bl	800e500 <SD_CheckStatusWithTimeout>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	da02      	bge.n	800e6f2 <SD_write+0x2a>
  {
    return res;
 800e6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f0:	e02e      	b.n	800e750 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	6879      	ldr	r1, [r7, #4]
 800e6f6:	68b8      	ldr	r0, [r7, #8]
 800e6f8:	f7ff fe7c 	bl	800e3f4 <BSP_SD_WriteBlocks_DMA>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d124      	bne.n	800e74c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e702:	4b15      	ldr	r3, [pc, #84]	; (800e758 <SD_write+0x90>)
 800e704:	6819      	ldr	r1, [r3, #0]
 800e706:	f107 0314 	add.w	r3, r7, #20
 800e70a:	f247 5230 	movw	r2, #30000	; 0x7530
 800e70e:	4618      	mov	r0, r3
 800e710:	f000 fa10 	bl	800eb34 <osMessageGet>

    if (event.status == osEventMessage)
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b10      	cmp	r3, #16
 800e718:	d118      	bne.n	800e74c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d115      	bne.n	800e74c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e720:	f000 f930 	bl	800e984 <osKernelSysTick>
 800e724:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e726:	e008      	b.n	800e73a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e728:	f7ff fe7e 	bl	800e428 <BSP_SD_GetCardState>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d103      	bne.n	800e73a <SD_write+0x72>
          {
            res = RES_OK;
 800e732:	2300      	movs	r3, #0
 800e734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e738:	e008      	b.n	800e74c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e73a:	f000 f923 	bl	800e984 <osKernelSysTick>
 800e73e:	4602      	mov	r2, r0
 800e740:	6a3b      	ldr	r3, [r7, #32]
 800e742:	1ad3      	subs	r3, r2, r3
 800e744:	f247 522f 	movw	r2, #29999	; 0x752f
 800e748:	4293      	cmp	r3, r2
 800e74a:	d9ed      	bls.n	800e728 <SD_write+0x60>
    }

  }
#endif

  return res;
 800e74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e750:	4618      	mov	r0, r3
 800e752:	3728      	adds	r7, #40	; 0x28
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	20000ff4 	.word	0x20000ff4

0800e75c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b08c      	sub	sp, #48	; 0x30
 800e760:	af00      	add	r7, sp, #0
 800e762:	4603      	mov	r3, r0
 800e764:	603a      	str	r2, [r7, #0]
 800e766:	71fb      	strb	r3, [r7, #7]
 800e768:	460b      	mov	r3, r1
 800e76a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e772:	4b25      	ldr	r3, [pc, #148]	; (800e808 <SD_ioctl+0xac>)
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	b2db      	uxtb	r3, r3
 800e778:	f003 0301 	and.w	r3, r3, #1
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d001      	beq.n	800e784 <SD_ioctl+0x28>
 800e780:	2303      	movs	r3, #3
 800e782:	e03c      	b.n	800e7fe <SD_ioctl+0xa2>

  switch (cmd)
 800e784:	79bb      	ldrb	r3, [r7, #6]
 800e786:	2b03      	cmp	r3, #3
 800e788:	d834      	bhi.n	800e7f4 <SD_ioctl+0x98>
 800e78a:	a201      	add	r2, pc, #4	; (adr r2, 800e790 <SD_ioctl+0x34>)
 800e78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e790:	0800e7a1 	.word	0x0800e7a1
 800e794:	0800e7a9 	.word	0x0800e7a9
 800e798:	0800e7c1 	.word	0x0800e7c1
 800e79c:	0800e7db 	.word	0x0800e7db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7a6:	e028      	b.n	800e7fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7a8:	f107 030c 	add.w	r3, r7, #12
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7ff fe4b 	bl	800e448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7be:	e01c      	b.n	800e7fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7c0:	f107 030c 	add.w	r3, r7, #12
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff fe3f 	bl	800e448 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7d8:	e00f      	b.n	800e7fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7da:	f107 030c 	add.w	r3, r7, #12
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7ff fe32 	bl	800e448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	0a5a      	lsrs	r2, r3, #9
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7f2:	e002      	b.n	800e7fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e7f4:	2304      	movs	r3, #4
 800e7f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e7fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3730      	adds	r7, #48	; 0x30
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20000031 	.word	0x20000031

0800e80c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800e810:	4b04      	ldr	r3, [pc, #16]	; (800e824 <BSP_SD_WriteCpltCallback+0x18>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2200      	movs	r2, #0
 800e816:	2102      	movs	r1, #2
 800e818:	4618      	mov	r0, r3
 800e81a:	f000 f94b 	bl	800eab4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e81e:	bf00      	nop
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	20000ff4 	.word	0x20000ff4

0800e828 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e82c:	4b04      	ldr	r3, [pc, #16]	; (800e840 <BSP_SD_ReadCpltCallback+0x18>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2200      	movs	r2, #0
 800e832:	2101      	movs	r1, #1
 800e834:	4618      	mov	r0, r3
 800e836:	f000 f93d 	bl	800eab4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e83a:	bf00      	nop
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	20000ff4 	.word	0x20000ff4

0800e844 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800e848:	bf00      	nop
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
	...

0800e854 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e854:	b480      	push	{r7}
 800e856:	b087      	sub	sp, #28
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	4613      	mov	r3, r2
 800e860:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e862:	2301      	movs	r3, #1
 800e864:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e86a:	4b1f      	ldr	r3, [pc, #124]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e86c:	7a5b      	ldrb	r3, [r3, #9]
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b00      	cmp	r3, #0
 800e872:	d131      	bne.n	800e8d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e874:	4b1c      	ldr	r3, [pc, #112]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e876:	7a5b      	ldrb	r3, [r3, #9]
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	461a      	mov	r2, r3
 800e87c:	4b1a      	ldr	r3, [pc, #104]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e87e:	2100      	movs	r1, #0
 800e880:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e882:	4b19      	ldr	r3, [pc, #100]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e884:	7a5b      	ldrb	r3, [r3, #9]
 800e886:	b2db      	uxtb	r3, r3
 800e888:	4a17      	ldr	r2, [pc, #92]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	4413      	add	r3, r2
 800e88e:	68fa      	ldr	r2, [r7, #12]
 800e890:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e892:	4b15      	ldr	r3, [pc, #84]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e894:	7a5b      	ldrb	r3, [r3, #9]
 800e896:	b2db      	uxtb	r3, r3
 800e898:	461a      	mov	r2, r3
 800e89a:	4b13      	ldr	r3, [pc, #76]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e89c:	4413      	add	r3, r2
 800e89e:	79fa      	ldrb	r2, [r7, #7]
 800e8a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e8a2:	4b11      	ldr	r3, [pc, #68]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e8a4:	7a5b      	ldrb	r3, [r3, #9]
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	1c5a      	adds	r2, r3, #1
 800e8aa:	b2d1      	uxtb	r1, r2
 800e8ac:	4a0e      	ldr	r2, [pc, #56]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e8ae:	7251      	strb	r1, [r2, #9]
 800e8b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e8b2:	7dbb      	ldrb	r3, [r7, #22]
 800e8b4:	3330      	adds	r3, #48	; 0x30
 800e8b6:	b2da      	uxtb	r2, r3
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	223a      	movs	r2, #58	; 0x3a
 800e8c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	3302      	adds	r3, #2
 800e8c8:	222f      	movs	r2, #47	; 0x2f
 800e8ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	3303      	adds	r3, #3
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	20000ff8 	.word	0x20000ff8

0800e8ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7ff ffaa 	bl	800e854 <FATFS_LinkDriverEx>
 800e900:	4603      	mov	r3, r0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b085      	sub	sp, #20
 800e90e:	af00      	add	r7, sp, #0
 800e910:	4603      	mov	r3, r0
 800e912:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e914:	2300      	movs	r3, #0
 800e916:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e91c:	2b84      	cmp	r3, #132	; 0x84
 800e91e:	d005      	beq.n	800e92c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e920:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	4413      	add	r3, r2
 800e928:	3303      	adds	r3, #3
 800e92a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e92c:	68fb      	ldr	r3, [r7, #12]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e93a:	b480      	push	{r7}
 800e93c:	b083      	sub	sp, #12
 800e93e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e940:	f3ef 8305 	mrs	r3, IPSR
 800e944:	607b      	str	r3, [r7, #4]
  return(result);
 800e946:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e948:	2b00      	cmp	r3, #0
 800e94a:	bf14      	ite	ne
 800e94c:	2301      	movne	r3, #1
 800e94e:	2300      	moveq	r3, #0
 800e950:	b2db      	uxtb	r3, r3
}
 800e952:	4618      	mov	r0, r3
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e95e:	b580      	push	{r7, lr}
 800e960:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e962:	f001 f975 	bl	800fc50 <vTaskStartScheduler>
  
  return osOK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800e970:	f001 fdc8 	bl	8010504 <xTaskGetSchedulerState>
 800e974:	4603      	mov	r3, r0
 800e976:	2b01      	cmp	r3, #1
 800e978:	d101      	bne.n	800e97e <osKernelRunning+0x12>
    return 0;
 800e97a:	2300      	movs	r3, #0
 800e97c:	e000      	b.n	800e980 <osKernelRunning+0x14>
  else
    return 1;
 800e97e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800e980:	4618      	mov	r0, r3
 800e982:	bd80      	pop	{r7, pc}

0800e984 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e988:	f7ff ffd7 	bl	800e93a <inHandlerMode>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e992:	f001 fa7d 	bl	800fe90 <xTaskGetTickCountFromISR>
 800e996:	4603      	mov	r3, r0
 800e998:	e002      	b.n	800e9a0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e99a:	f001 fa69 	bl	800fe70 <xTaskGetTickCount>
 800e99e:	4603      	mov	r3, r0
  }
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a6:	b089      	sub	sp, #36	; 0x24
 800e9a8:	af04      	add	r7, sp, #16
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	695b      	ldr	r3, [r3, #20]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d020      	beq.n	800e9f8 <osThreadCreate+0x54>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d01c      	beq.n	800e9f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	685c      	ldr	r4, [r3, #4]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	691e      	ldr	r6, [r3, #16]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff ff9a 	bl	800e90a <makeFreeRtosPriority>
 800e9d6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	695b      	ldr	r3, [r3, #20]
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9e0:	9202      	str	r2, [sp, #8]
 800e9e2:	9301      	str	r3, [sp, #4]
 800e9e4:	9100      	str	r1, [sp, #0]
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	4632      	mov	r2, r6
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f000 ff53 	bl	800f898 <xTaskCreateStatic>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	60fb      	str	r3, [r7, #12]
 800e9f6:	e01c      	b.n	800ea32 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	685c      	ldr	r4, [r3, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea04:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff ff7c 	bl	800e90a <makeFreeRtosPriority>
 800ea12:	4602      	mov	r2, r0
 800ea14:	f107 030c 	add.w	r3, r7, #12
 800ea18:	9301      	str	r3, [sp, #4]
 800ea1a:	9200      	str	r2, [sp, #0]
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	4632      	mov	r2, r6
 800ea20:	4629      	mov	r1, r5
 800ea22:	4620      	mov	r0, r4
 800ea24:	f000 ff9b 	bl	800f95e <xTaskCreate>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d001      	beq.n	800ea32 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e000      	b.n	800ea34 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ea32:	68fb      	ldr	r3, [r7, #12]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea3c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <osDelay+0x16>
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	e000      	b.n	800ea54 <osDelay+0x18>
 800ea52:	2301      	movs	r3, #1
 800ea54:	4618      	mov	r0, r3
 800ea56:	f001 f8c5 	bl	800fbe4 <vTaskDelay>
  
  return osOK;
 800ea5a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ea64:	b590      	push	{r4, r7, lr}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af02      	add	r7, sp, #8
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d011      	beq.n	800ea9a <osMessageCreate+0x36>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00d      	beq.n	800ea9a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6818      	ldr	r0, [r3, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6859      	ldr	r1, [r3, #4]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	689a      	ldr	r2, [r3, #8]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	2400      	movs	r4, #0
 800ea90:	9400      	str	r4, [sp, #0]
 800ea92:	f000 f9fb 	bl	800ee8c <xQueueGenericCreateStatic>
 800ea96:	4603      	mov	r3, r0
 800ea98:	e008      	b.n	800eaac <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6818      	ldr	r0, [r3, #0]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	f000 fa73 	bl	800ef90 <xQueueGenericCreate>
 800eaaa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd90      	pop	{r4, r7, pc}

0800eab4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b086      	sub	sp, #24
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800eac0:	2300      	movs	r3, #0
 800eac2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d101      	bne.n	800ead2 <osMessagePut+0x1e>
    ticks = 1;
 800eace:	2301      	movs	r3, #1
 800ead0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ead2:	f7ff ff32 	bl	800e93a <inHandlerMode>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d018      	beq.n	800eb0e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800eadc:	f107 0210 	add.w	r2, r7, #16
 800eae0:	f107 0108 	add.w	r1, r7, #8
 800eae4:	2300      	movs	r3, #0
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f000 fbba 	bl	800f260 <xQueueGenericSendFromISR>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d001      	beq.n	800eaf6 <osMessagePut+0x42>
      return osErrorOS;
 800eaf2:	23ff      	movs	r3, #255	; 0xff
 800eaf4:	e018      	b.n	800eb28 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d014      	beq.n	800eb26 <osMessagePut+0x72>
 800eafc:	4b0c      	ldr	r3, [pc, #48]	; (800eb30 <osMessagePut+0x7c>)
 800eafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	e00b      	b.n	800eb26 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800eb0e:	f107 0108 	add.w	r1, r7, #8
 800eb12:	2300      	movs	r3, #0
 800eb14:	697a      	ldr	r2, [r7, #20]
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f000 fa9c 	bl	800f054 <xQueueGenericSend>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d001      	beq.n	800eb26 <osMessagePut+0x72>
      return osErrorOS;
 800eb22:	23ff      	movs	r3, #255	; 0xff
 800eb24:	e000      	b.n	800eb28 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3718      	adds	r7, #24
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	e000ed04 	.word	0xe000ed04

0800eb34 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800eb34:	b590      	push	{r4, r7, lr}
 800eb36:	b08b      	sub	sp, #44	; 0x2c
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800eb44:	2300      	movs	r3, #0
 800eb46:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d10a      	bne.n	800eb64 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800eb4e:	2380      	movs	r3, #128	; 0x80
 800eb50:	617b      	str	r3, [r7, #20]
    return event;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	461c      	mov	r4, r3
 800eb56:	f107 0314 	add.w	r3, r7, #20
 800eb5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eb62:	e054      	b.n	800ec0e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800eb64:	2300      	movs	r3, #0
 800eb66:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb72:	d103      	bne.n	800eb7c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800eb74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb78:	627b      	str	r3, [r7, #36]	; 0x24
 800eb7a:	e009      	b.n	800eb90 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d006      	beq.n	800eb90 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800eb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d101      	bne.n	800eb90 <osMessageGet+0x5c>
      ticks = 1;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800eb90:	f7ff fed3 	bl	800e93a <inHandlerMode>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d01c      	beq.n	800ebd4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800eb9a:	f107 0220 	add.w	r2, r7, #32
 800eb9e:	f107 0314 	add.w	r3, r7, #20
 800eba2:	3304      	adds	r3, #4
 800eba4:	4619      	mov	r1, r3
 800eba6:	68b8      	ldr	r0, [r7, #8]
 800eba8:	f000 fce0 	bl	800f56c <xQueueReceiveFromISR>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d102      	bne.n	800ebb8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ebb2:	2310      	movs	r3, #16
 800ebb4:	617b      	str	r3, [r7, #20]
 800ebb6:	e001      	b.n	800ebbc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d01d      	beq.n	800ebfe <osMessageGet+0xca>
 800ebc2:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <osMessageGet+0xe4>)
 800ebc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	e014      	b.n	800ebfe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ebd4:	f107 0314 	add.w	r3, r7, #20
 800ebd8:	3304      	adds	r3, #4
 800ebda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebdc:	4619      	mov	r1, r3
 800ebde:	68b8      	ldr	r0, [r7, #8]
 800ebe0:	f000 fbde 	bl	800f3a0 <xQueueReceive>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d102      	bne.n	800ebf0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ebea:	2310      	movs	r3, #16
 800ebec:	617b      	str	r3, [r7, #20]
 800ebee:	e006      	b.n	800ebfe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d101      	bne.n	800ebfa <osMessageGet+0xc6>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	e000      	b.n	800ebfc <osMessageGet+0xc8>
 800ebfa:	2340      	movs	r3, #64	; 0x40
 800ebfc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	461c      	mov	r4, r3
 800ec02:	f107 0314 	add.w	r3, r7, #20
 800ec06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ec0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	372c      	adds	r7, #44	; 0x2c
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd90      	pop	{r4, r7, pc}
 800ec16:	bf00      	nop
 800ec18:	e000ed04 	.word	0xe000ed04

0800ec1c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ec22:	201c      	movs	r0, #28
 800ec24:	f001 ffb6 	bl	8010b94 <pvPortMalloc>
 800ec28:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00a      	beq.n	800ec46 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	3304      	adds	r3, #4
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 f808 	bl	800ec50 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ec46:	687b      	ldr	r3, [r7, #4]
	}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f103 0208 	add.w	r2, r3, #8
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f103 0208 	add.w	r2, r3, #8
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f103 0208 	add.w	r2, r3, #8
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec84:	bf00      	nop
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec9e:	bf00      	nop
 800eca0:	370c      	adds	r7, #12
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ecaa:	b480      	push	{r7}
 800ecac:	b085      	sub	sp, #20
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
 800ecb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	689a      	ldr	r2, [r3, #8]
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	683a      	ldr	r2, [r7, #0]
 800ecce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	683a      	ldr	r2, [r7, #0]
 800ecd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	601a      	str	r2, [r3, #0]
}
 800ece6:	bf00      	nop
 800ece8:	3714      	adds	r7, #20
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr

0800ecf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ecf2:	b480      	push	{r7}
 800ecf4:	b085      	sub	sp, #20
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
 800ecfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed08:	d103      	bne.n	800ed12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	691b      	ldr	r3, [r3, #16]
 800ed0e:	60fb      	str	r3, [r7, #12]
 800ed10:	e00c      	b.n	800ed2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	3308      	adds	r3, #8
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	e002      	b.n	800ed20 <vListInsert+0x2e>
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	60fb      	str	r3, [r7, #12]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d2f6      	bcs.n	800ed1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	685a      	ldr	r2, [r3, #4]
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	68fa      	ldr	r2, [r7, #12]
 800ed40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	601a      	str	r2, [r3, #0]
}
 800ed58:	bf00      	nop
 800ed5a:	3714      	adds	r7, #20
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	6892      	ldr	r2, [r2, #8]
 800ed7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	6852      	ldr	r2, [r2, #4]
 800ed84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d103      	bne.n	800ed98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	689a      	ldr	r2, [r3, #8]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	1e5a      	subs	r2, r3, #1
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d10c      	bne.n	800ede6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800edcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd0:	b672      	cpsid	i
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	b662      	cpsie	i
 800ede0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ede2:	bf00      	nop
 800ede4:	e7fe      	b.n	800ede4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ede6:	f001 fda9 	bl	801093c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf2:	68f9      	ldr	r1, [r7, #12]
 800edf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800edf6:	fb01 f303 	mul.w	r3, r1, r3
 800edfa:	441a      	add	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2200      	movs	r2, #0
 800ee04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee16:	3b01      	subs	r3, #1
 800ee18:	68f9      	ldr	r1, [r7, #12]
 800ee1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee1c:	fb01 f303 	mul.w	r3, r1, r3
 800ee20:	441a      	add	r2, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	22ff      	movs	r2, #255	; 0xff
 800ee2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	22ff      	movs	r2, #255	; 0xff
 800ee32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d114      	bne.n	800ee66 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	691b      	ldr	r3, [r3, #16]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d01a      	beq.n	800ee7a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	3310      	adds	r3, #16
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f001 f995 	bl	8010178 <xTaskRemoveFromEventList>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d012      	beq.n	800ee7a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ee54:	4b0c      	ldr	r3, [pc, #48]	; (800ee88 <xQueueGenericReset+0xd0>)
 800ee56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee5a:	601a      	str	r2, [r3, #0]
 800ee5c:	f3bf 8f4f 	dsb	sy
 800ee60:	f3bf 8f6f 	isb	sy
 800ee64:	e009      	b.n	800ee7a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	3310      	adds	r3, #16
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7ff fef0 	bl	800ec50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	3324      	adds	r3, #36	; 0x24
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff feeb 	bl	800ec50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ee7a:	f001 fd93 	bl	80109a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ee7e:	2301      	movs	r3, #1
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	e000ed04 	.word	0xe000ed04

0800ee8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b08e      	sub	sp, #56	; 0x38
 800ee90:	af02      	add	r7, sp, #8
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
 800ee98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d10c      	bne.n	800eeba <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800eea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea4:	b672      	cpsid	i
 800eea6:	f383 8811 	msr	BASEPRI, r3
 800eeaa:	f3bf 8f6f 	isb	sy
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	b662      	cpsie	i
 800eeb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eeb6:	bf00      	nop
 800eeb8:	e7fe      	b.n	800eeb8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d10c      	bne.n	800eeda <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800eec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec4:	b672      	cpsid	i
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	b662      	cpsie	i
 800eed4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eed6:	bf00      	nop
 800eed8:	e7fe      	b.n	800eed8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d002      	beq.n	800eee6 <xQueueGenericCreateStatic+0x5a>
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <xQueueGenericCreateStatic+0x5e>
 800eee6:	2301      	movs	r3, #1
 800eee8:	e000      	b.n	800eeec <xQueueGenericCreateStatic+0x60>
 800eeea:	2300      	movs	r3, #0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d10c      	bne.n	800ef0a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	b672      	cpsid	i
 800eef6:	f383 8811 	msr	BASEPRI, r3
 800eefa:	f3bf 8f6f 	isb	sy
 800eefe:	f3bf 8f4f 	dsb	sy
 800ef02:	b662      	cpsie	i
 800ef04:	623b      	str	r3, [r7, #32]
}
 800ef06:	bf00      	nop
 800ef08:	e7fe      	b.n	800ef08 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d102      	bne.n	800ef16 <xQueueGenericCreateStatic+0x8a>
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <xQueueGenericCreateStatic+0x8e>
 800ef16:	2301      	movs	r3, #1
 800ef18:	e000      	b.n	800ef1c <xQueueGenericCreateStatic+0x90>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10c      	bne.n	800ef3a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ef20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef24:	b672      	cpsid	i
 800ef26:	f383 8811 	msr	BASEPRI, r3
 800ef2a:	f3bf 8f6f 	isb	sy
 800ef2e:	f3bf 8f4f 	dsb	sy
 800ef32:	b662      	cpsie	i
 800ef34:	61fb      	str	r3, [r7, #28]
}
 800ef36:	bf00      	nop
 800ef38:	e7fe      	b.n	800ef38 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef3a:	2348      	movs	r3, #72	; 0x48
 800ef3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	2b48      	cmp	r3, #72	; 0x48
 800ef42:	d00c      	beq.n	800ef5e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ef44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef48:	b672      	cpsid	i
 800ef4a:	f383 8811 	msr	BASEPRI, r3
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f3bf 8f4f 	dsb	sy
 800ef56:	b662      	cpsie	i
 800ef58:	61bb      	str	r3, [r7, #24]
}
 800ef5a:	bf00      	nop
 800ef5c:	e7fe      	b.n	800ef5c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00d      	beq.n	800ef86 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ef76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef78:	9300      	str	r3, [sp, #0]
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	68b9      	ldr	r1, [r7, #8]
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f000 f847 	bl	800f014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3730      	adds	r7, #48	; 0x30
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b08a      	sub	sp, #40	; 0x28
 800ef94:	af02      	add	r7, sp, #8
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10c      	bne.n	800efbe <xQueueGenericCreate+0x2e>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	b672      	cpsid	i
 800efaa:	f383 8811 	msr	BASEPRI, r3
 800efae:	f3bf 8f6f 	isb	sy
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	b662      	cpsie	i
 800efb8:	613b      	str	r3, [r7, #16]
}
 800efba:	bf00      	nop
 800efbc:	e7fe      	b.n	800efbc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d102      	bne.n	800efca <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800efc4:	2300      	movs	r3, #0
 800efc6:	61fb      	str	r3, [r7, #28]
 800efc8:	e004      	b.n	800efd4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	fb02 f303 	mul.w	r3, r2, r3
 800efd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	3348      	adds	r3, #72	; 0x48
 800efd8:	4618      	mov	r0, r3
 800efda:	f001 fddb 	bl	8010b94 <pvPortMalloc>
 800efde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d011      	beq.n	800f00a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	3348      	adds	r3, #72	; 0x48
 800efee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eff8:	79fa      	ldrb	r2, [r7, #7]
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	4613      	mov	r3, r2
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	68b9      	ldr	r1, [r7, #8]
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f000 f805 	bl	800f014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f00a:	69bb      	ldr	r3, [r7, #24]
	}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3720      	adds	r7, #32
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
 800f020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d103      	bne.n	800f030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	69ba      	ldr	r2, [r7, #24]
 800f02c:	601a      	str	r2, [r3, #0]
 800f02e:	e002      	b.n	800f036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f042:	2101      	movs	r1, #1
 800f044:	69b8      	ldr	r0, [r7, #24]
 800f046:	f7ff feb7 	bl	800edb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f04a:	bf00      	nop
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
	...

0800f054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b08e      	sub	sp, #56	; 0x38
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
 800f060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f062:	2300      	movs	r3, #0
 800f064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10c      	bne.n	800f08a <xQueueGenericSend+0x36>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f074:	b672      	cpsid	i
 800f076:	f383 8811 	msr	BASEPRI, r3
 800f07a:	f3bf 8f6f 	isb	sy
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	b662      	cpsie	i
 800f084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f086:	bf00      	nop
 800f088:	e7fe      	b.n	800f088 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d103      	bne.n	800f098 <xQueueGenericSend+0x44>
 800f090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f094:	2b00      	cmp	r3, #0
 800f096:	d101      	bne.n	800f09c <xQueueGenericSend+0x48>
 800f098:	2301      	movs	r3, #1
 800f09a:	e000      	b.n	800f09e <xQueueGenericSend+0x4a>
 800f09c:	2300      	movs	r3, #0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d10c      	bne.n	800f0bc <xQueueGenericSend+0x68>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a6:	b672      	cpsid	i
 800f0a8:	f383 8811 	msr	BASEPRI, r3
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	f3bf 8f4f 	dsb	sy
 800f0b4:	b662      	cpsie	i
 800f0b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0b8:	bf00      	nop
 800f0ba:	e7fe      	b.n	800f0ba <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d103      	bne.n	800f0ca <xQueueGenericSend+0x76>
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d101      	bne.n	800f0ce <xQueueGenericSend+0x7a>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e000      	b.n	800f0d0 <xQueueGenericSend+0x7c>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10c      	bne.n	800f0ee <xQueueGenericSend+0x9a>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d8:	b672      	cpsid	i
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	b662      	cpsie	i
 800f0e8:	623b      	str	r3, [r7, #32]
}
 800f0ea:	bf00      	nop
 800f0ec:	e7fe      	b.n	800f0ec <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0ee:	f001 fa09 	bl	8010504 <xTaskGetSchedulerState>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d102      	bne.n	800f0fe <xQueueGenericSend+0xaa>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d101      	bne.n	800f102 <xQueueGenericSend+0xae>
 800f0fe:	2301      	movs	r3, #1
 800f100:	e000      	b.n	800f104 <xQueueGenericSend+0xb0>
 800f102:	2300      	movs	r3, #0
 800f104:	2b00      	cmp	r3, #0
 800f106:	d10c      	bne.n	800f122 <xQueueGenericSend+0xce>
	__asm volatile
 800f108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10c:	b672      	cpsid	i
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	b662      	cpsie	i
 800f11c:	61fb      	str	r3, [r7, #28]
}
 800f11e:	bf00      	nop
 800f120:	e7fe      	b.n	800f120 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f122:	f001 fc0b 	bl	801093c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f12e:	429a      	cmp	r2, r3
 800f130:	d302      	bcc.n	800f138 <xQueueGenericSend+0xe4>
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	2b02      	cmp	r3, #2
 800f136:	d129      	bne.n	800f18c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	68b9      	ldr	r1, [r7, #8]
 800f13c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f13e:	f000 fa9b 	bl	800f678 <prvCopyDataToQueue>
 800f142:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d010      	beq.n	800f16e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14e:	3324      	adds	r3, #36	; 0x24
 800f150:	4618      	mov	r0, r3
 800f152:	f001 f811 	bl	8010178 <xTaskRemoveFromEventList>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d013      	beq.n	800f184 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f15c:	4b3f      	ldr	r3, [pc, #252]	; (800f25c <xQueueGenericSend+0x208>)
 800f15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f162:	601a      	str	r2, [r3, #0]
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	e00a      	b.n	800f184 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	2b00      	cmp	r3, #0
 800f172:	d007      	beq.n	800f184 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f174:	4b39      	ldr	r3, [pc, #228]	; (800f25c <xQueueGenericSend+0x208>)
 800f176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f17a:	601a      	str	r2, [r3, #0]
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f184:	f001 fc0e 	bl	80109a4 <vPortExitCritical>
				return pdPASS;
 800f188:	2301      	movs	r3, #1
 800f18a:	e063      	b.n	800f254 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d103      	bne.n	800f19a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f192:	f001 fc07 	bl	80109a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f196:	2300      	movs	r3, #0
 800f198:	e05c      	b.n	800f254 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d106      	bne.n	800f1ae <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1a0:	f107 0314 	add.w	r3, r7, #20
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f001 f84b 	bl	8010240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1ae:	f001 fbf9 	bl	80109a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1b2:	f000 fdb1 	bl	800fd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1b6:	f001 fbc1 	bl	801093c <vPortEnterCritical>
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1c0:	b25b      	sxtb	r3, r3
 800f1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1c6:	d103      	bne.n	800f1d0 <xQueueGenericSend+0x17c>
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1d6:	b25b      	sxtb	r3, r3
 800f1d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1dc:	d103      	bne.n	800f1e6 <xQueueGenericSend+0x192>
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1e6:	f001 fbdd 	bl	80109a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1ea:	1d3a      	adds	r2, r7, #4
 800f1ec:	f107 0314 	add.w	r3, r7, #20
 800f1f0:	4611      	mov	r1, r2
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f001 f83a 	bl	801026c <xTaskCheckForTimeOut>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d124      	bne.n	800f248 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f1fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f200:	f000 fb32 	bl	800f868 <prvIsQueueFull>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d018      	beq.n	800f23c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20c:	3310      	adds	r3, #16
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	4611      	mov	r1, r2
 800f212:	4618      	mov	r0, r3
 800f214:	f000 ff8a 	bl	801012c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f21a:	f000 fabd 	bl	800f798 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f21e:	f000 fd89 	bl	800fd34 <xTaskResumeAll>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	f47f af7c 	bne.w	800f122 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f22a:	4b0c      	ldr	r3, [pc, #48]	; (800f25c <xQueueGenericSend+0x208>)
 800f22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	f3bf 8f4f 	dsb	sy
 800f236:	f3bf 8f6f 	isb	sy
 800f23a:	e772      	b.n	800f122 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f23c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f23e:	f000 faab 	bl	800f798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f242:	f000 fd77 	bl	800fd34 <xTaskResumeAll>
 800f246:	e76c      	b.n	800f122 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f24a:	f000 faa5 	bl	800f798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f24e:	f000 fd71 	bl	800fd34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f252:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f254:	4618      	mov	r0, r3
 800f256:	3738      	adds	r7, #56	; 0x38
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	e000ed04 	.word	0xe000ed04

0800f260 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b08e      	sub	sp, #56	; 0x38
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	607a      	str	r2, [r7, #4]
 800f26c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f274:	2b00      	cmp	r3, #0
 800f276:	d10c      	bne.n	800f292 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800f278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27c:	b672      	cpsid	i
 800f27e:	f383 8811 	msr	BASEPRI, r3
 800f282:	f3bf 8f6f 	isb	sy
 800f286:	f3bf 8f4f 	dsb	sy
 800f28a:	b662      	cpsie	i
 800f28c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f28e:	bf00      	nop
 800f290:	e7fe      	b.n	800f290 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d103      	bne.n	800f2a0 <xQueueGenericSendFromISR+0x40>
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d101      	bne.n	800f2a4 <xQueueGenericSendFromISR+0x44>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	e000      	b.n	800f2a6 <xQueueGenericSendFromISR+0x46>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10c      	bne.n	800f2c4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800f2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ae:	b672      	cpsid	i
 800f2b0:	f383 8811 	msr	BASEPRI, r3
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	b662      	cpsie	i
 800f2be:	623b      	str	r3, [r7, #32]
}
 800f2c0:	bf00      	nop
 800f2c2:	e7fe      	b.n	800f2c2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2b02      	cmp	r3, #2
 800f2c8:	d103      	bne.n	800f2d2 <xQueueGenericSendFromISR+0x72>
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d101      	bne.n	800f2d6 <xQueueGenericSendFromISR+0x76>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e000      	b.n	800f2d8 <xQueueGenericSendFromISR+0x78>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d10c      	bne.n	800f2f6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800f2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e0:	b672      	cpsid	i
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	b662      	cpsie	i
 800f2f0:	61fb      	str	r3, [r7, #28]
}
 800f2f2:	bf00      	nop
 800f2f4:	e7fe      	b.n	800f2f4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2f6:	f001 fc09 	bl	8010b0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f2fa:	f3ef 8211 	mrs	r2, BASEPRI
 800f2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f302:	b672      	cpsid	i
 800f304:	f383 8811 	msr	BASEPRI, r3
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	f3bf 8f4f 	dsb	sy
 800f310:	b662      	cpsie	i
 800f312:	61ba      	str	r2, [r7, #24]
 800f314:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f316:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f318:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f322:	429a      	cmp	r2, r3
 800f324:	d302      	bcc.n	800f32c <xQueueGenericSendFromISR+0xcc>
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	2b02      	cmp	r3, #2
 800f32a:	d12c      	bne.n	800f386 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f336:	683a      	ldr	r2, [r7, #0]
 800f338:	68b9      	ldr	r1, [r7, #8]
 800f33a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f33c:	f000 f99c 	bl	800f678 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f340:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f348:	d112      	bne.n	800f370 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d016      	beq.n	800f380 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f354:	3324      	adds	r3, #36	; 0x24
 800f356:	4618      	mov	r0, r3
 800f358:	f000 ff0e 	bl	8010178 <xTaskRemoveFromEventList>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00e      	beq.n	800f380 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00b      	beq.n	800f380 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2201      	movs	r2, #1
 800f36c:	601a      	str	r2, [r3, #0]
 800f36e:	e007      	b.n	800f380 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f370:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f374:	3301      	adds	r3, #1
 800f376:	b2db      	uxtb	r3, r3
 800f378:	b25a      	sxtb	r2, r3
 800f37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f380:	2301      	movs	r3, #1
 800f382:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f384:	e001      	b.n	800f38a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f386:	2300      	movs	r3, #0
 800f388:	637b      	str	r3, [r7, #52]	; 0x34
 800f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f394:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3738      	adds	r7, #56	; 0x38
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b08c      	sub	sp, #48	; 0x30
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d10c      	bne.n	800f3d4 <xQueueReceive+0x34>
	__asm volatile
 800f3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3be:	b672      	cpsid	i
 800f3c0:	f383 8811 	msr	BASEPRI, r3
 800f3c4:	f3bf 8f6f 	isb	sy
 800f3c8:	f3bf 8f4f 	dsb	sy
 800f3cc:	b662      	cpsie	i
 800f3ce:	623b      	str	r3, [r7, #32]
}
 800f3d0:	bf00      	nop
 800f3d2:	e7fe      	b.n	800f3d2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d103      	bne.n	800f3e2 <xQueueReceive+0x42>
 800f3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d101      	bne.n	800f3e6 <xQueueReceive+0x46>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e000      	b.n	800f3e8 <xQueueReceive+0x48>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d10c      	bne.n	800f406 <xQueueReceive+0x66>
	__asm volatile
 800f3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f0:	b672      	cpsid	i
 800f3f2:	f383 8811 	msr	BASEPRI, r3
 800f3f6:	f3bf 8f6f 	isb	sy
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	b662      	cpsie	i
 800f400:	61fb      	str	r3, [r7, #28]
}
 800f402:	bf00      	nop
 800f404:	e7fe      	b.n	800f404 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f406:	f001 f87d 	bl	8010504 <xTaskGetSchedulerState>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d102      	bne.n	800f416 <xQueueReceive+0x76>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <xQueueReceive+0x7a>
 800f416:	2301      	movs	r3, #1
 800f418:	e000      	b.n	800f41c <xQueueReceive+0x7c>
 800f41a:	2300      	movs	r3, #0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d10c      	bne.n	800f43a <xQueueReceive+0x9a>
	__asm volatile
 800f420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f424:	b672      	cpsid	i
 800f426:	f383 8811 	msr	BASEPRI, r3
 800f42a:	f3bf 8f6f 	isb	sy
 800f42e:	f3bf 8f4f 	dsb	sy
 800f432:	b662      	cpsie	i
 800f434:	61bb      	str	r3, [r7, #24]
}
 800f436:	bf00      	nop
 800f438:	e7fe      	b.n	800f438 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f43a:	f001 fa7f 	bl	801093c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f442:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	2b00      	cmp	r3, #0
 800f448:	d01f      	beq.n	800f48a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f44a:	68b9      	ldr	r1, [r7, #8]
 800f44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f44e:	f000 f97d 	bl	800f74c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f454:	1e5a      	subs	r2, r3, #1
 800f456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f458:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00f      	beq.n	800f482 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	3310      	adds	r3, #16
 800f466:	4618      	mov	r0, r3
 800f468:	f000 fe86 	bl	8010178 <xTaskRemoveFromEventList>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d007      	beq.n	800f482 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f472:	4b3d      	ldr	r3, [pc, #244]	; (800f568 <xQueueReceive+0x1c8>)
 800f474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f478:	601a      	str	r2, [r3, #0]
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f482:	f001 fa8f 	bl	80109a4 <vPortExitCritical>
				return pdPASS;
 800f486:	2301      	movs	r3, #1
 800f488:	e069      	b.n	800f55e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d103      	bne.n	800f498 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f490:	f001 fa88 	bl	80109a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f494:	2300      	movs	r3, #0
 800f496:	e062      	b.n	800f55e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d106      	bne.n	800f4ac <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f49e:	f107 0310 	add.w	r3, r7, #16
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fecc 	bl	8010240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4ac:	f001 fa7a 	bl	80109a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4b0:	f000 fc32 	bl	800fd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4b4:	f001 fa42 	bl	801093c <vPortEnterCritical>
 800f4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4be:	b25b      	sxtb	r3, r3
 800f4c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4c4:	d103      	bne.n	800f4ce <xQueueReceive+0x12e>
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4d4:	b25b      	sxtb	r3, r3
 800f4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4da:	d103      	bne.n	800f4e4 <xQueueReceive+0x144>
 800f4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4e4:	f001 fa5e 	bl	80109a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4e8:	1d3a      	adds	r2, r7, #4
 800f4ea:	f107 0310 	add.w	r3, r7, #16
 800f4ee:	4611      	mov	r1, r2
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f000 febb 	bl	801026c <xTaskCheckForTimeOut>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d123      	bne.n	800f544 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4fe:	f000 f99d 	bl	800f83c <prvIsQueueEmpty>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d017      	beq.n	800f538 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50a:	3324      	adds	r3, #36	; 0x24
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	4611      	mov	r1, r2
 800f510:	4618      	mov	r0, r3
 800f512:	f000 fe0b 	bl	801012c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f518:	f000 f93e 	bl	800f798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f51c:	f000 fc0a 	bl	800fd34 <xTaskResumeAll>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d189      	bne.n	800f43a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f526:	4b10      	ldr	r3, [pc, #64]	; (800f568 <xQueueReceive+0x1c8>)
 800f528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f52c:	601a      	str	r2, [r3, #0]
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	f3bf 8f6f 	isb	sy
 800f536:	e780      	b.n	800f43a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f53a:	f000 f92d 	bl	800f798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f53e:	f000 fbf9 	bl	800fd34 <xTaskResumeAll>
 800f542:	e77a      	b.n	800f43a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f546:	f000 f927 	bl	800f798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f54a:	f000 fbf3 	bl	800fd34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f54e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f550:	f000 f974 	bl	800f83c <prvIsQueueEmpty>
 800f554:	4603      	mov	r3, r0
 800f556:	2b00      	cmp	r3, #0
 800f558:	f43f af6f 	beq.w	800f43a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f55c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3730      	adds	r7, #48	; 0x30
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	e000ed04 	.word	0xe000ed04

0800f56c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b08e      	sub	sp, #56	; 0x38
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d10c      	bne.n	800f59c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800f582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f586:	b672      	cpsid	i
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	b662      	cpsie	i
 800f596:	623b      	str	r3, [r7, #32]
}
 800f598:	bf00      	nop
 800f59a:	e7fe      	b.n	800f59a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d103      	bne.n	800f5aa <xQueueReceiveFromISR+0x3e>
 800f5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <xQueueReceiveFromISR+0x42>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e000      	b.n	800f5b0 <xQueueReceiveFromISR+0x44>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10c      	bne.n	800f5ce <xQueueReceiveFromISR+0x62>
	__asm volatile
 800f5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b8:	b672      	cpsid	i
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	b662      	cpsie	i
 800f5c8:	61fb      	str	r3, [r7, #28]
}
 800f5ca:	bf00      	nop
 800f5cc:	e7fe      	b.n	800f5cc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5ce:	f001 fa9d 	bl	8010b0c <vPortValidateInterruptPriority>
	__asm volatile
 800f5d2:	f3ef 8211 	mrs	r2, BASEPRI
 800f5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5da:	b672      	cpsid	i
 800f5dc:	f383 8811 	msr	BASEPRI, r3
 800f5e0:	f3bf 8f6f 	isb	sy
 800f5e4:	f3bf 8f4f 	dsb	sy
 800f5e8:	b662      	cpsie	i
 800f5ea:	61ba      	str	r2, [r7, #24]
 800f5ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f5ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d02f      	beq.n	800f65e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f608:	68b9      	ldr	r1, [r7, #8]
 800f60a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f60c:	f000 f89e 	bl	800f74c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f612:	1e5a      	subs	r2, r3, #1
 800f614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f616:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f618:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f61c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f620:	d112      	bne.n	800f648 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d016      	beq.n	800f658 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62c:	3310      	adds	r3, #16
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fda2 	bl	8010178 <xTaskRemoveFromEventList>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00e      	beq.n	800f658 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00b      	beq.n	800f658 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2201      	movs	r2, #1
 800f644:	601a      	str	r2, [r3, #0]
 800f646:	e007      	b.n	800f658 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f64c:	3301      	adds	r3, #1
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	b25a      	sxtb	r2, r3
 800f652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f658:	2301      	movs	r3, #1
 800f65a:	637b      	str	r3, [r7, #52]	; 0x34
 800f65c:	e001      	b.n	800f662 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800f65e:	2300      	movs	r3, #0
 800f660:	637b      	str	r3, [r7, #52]	; 0x34
 800f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f664:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	f383 8811 	msr	BASEPRI, r3
}
 800f66c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f670:	4618      	mov	r0, r3
 800f672:	3738      	adds	r7, #56	; 0x38
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f684:	2300      	movs	r3, #0
 800f686:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f68c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f692:	2b00      	cmp	r3, #0
 800f694:	d10d      	bne.n	800f6b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d14d      	bne.n	800f73a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 ff4c 	bl	8010540 <xTaskPriorityDisinherit>
 800f6a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	609a      	str	r2, [r3, #8]
 800f6b0:	e043      	b.n	800f73a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d119      	bne.n	800f6ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	6858      	ldr	r0, [r3, #4]
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	68b9      	ldr	r1, [r7, #8]
 800f6c4:	f001 fed8 	bl	8011478 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6d0:	441a      	add	r2, r3
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	685a      	ldr	r2, [r3, #4]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d32b      	bcc.n	800f73a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	605a      	str	r2, [r3, #4]
 800f6ea:	e026      	b.n	800f73a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	68d8      	ldr	r0, [r3, #12]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	f001 febe 	bl	8011478 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	68da      	ldr	r2, [r3, #12]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f704:	425b      	negs	r3, r3
 800f706:	441a      	add	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	68da      	ldr	r2, [r3, #12]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	429a      	cmp	r2, r3
 800f716:	d207      	bcs.n	800f728 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	689a      	ldr	r2, [r3, #8]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f720:	425b      	negs	r3, r3
 800f722:	441a      	add	r2, r3
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b02      	cmp	r3, #2
 800f72c:	d105      	bne.n	800f73a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d002      	beq.n	800f73a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	3b01      	subs	r3, #1
 800f738:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	1c5a      	adds	r2, r3, #1
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f742:	697b      	ldr	r3, [r7, #20]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3718      	adds	r7, #24
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d018      	beq.n	800f790 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	68da      	ldr	r2, [r3, #12]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f766:	441a      	add	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	68da      	ldr	r2, [r3, #12]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	429a      	cmp	r2, r3
 800f776:	d303      	bcc.n	800f780 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68d9      	ldr	r1, [r3, #12]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f788:	461a      	mov	r2, r3
 800f78a:	6838      	ldr	r0, [r7, #0]
 800f78c:	f001 fe74 	bl	8011478 <memcpy>
	}
}
 800f790:	bf00      	nop
 800f792:	3708      	adds	r7, #8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f7a0:	f001 f8cc 	bl	801093c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f7ac:	e011      	b.n	800f7d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d012      	beq.n	800f7dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	3324      	adds	r3, #36	; 0x24
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 fcdc 	bl	8010178 <xTaskRemoveFromEventList>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d001      	beq.n	800f7ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f7c6:	f000 fdb7 	bl	8010338 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f7ca:	7bfb      	ldrb	r3, [r7, #15]
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	dce9      	bgt.n	800f7ae <prvUnlockQueue+0x16>
 800f7da:	e000      	b.n	800f7de <prvUnlockQueue+0x46>
					break;
 800f7dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	22ff      	movs	r2, #255	; 0xff
 800f7e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f7e6:	f001 f8dd 	bl	80109a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f7ea:	f001 f8a7 	bl	801093c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f7f6:	e011      	b.n	800f81c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	691b      	ldr	r3, [r3, #16]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d012      	beq.n	800f826 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	3310      	adds	r3, #16
 800f804:	4618      	mov	r0, r3
 800f806:	f000 fcb7 	bl	8010178 <xTaskRemoveFromEventList>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f810:	f000 fd92 	bl	8010338 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f814:	7bbb      	ldrb	r3, [r7, #14]
 800f816:	3b01      	subs	r3, #1
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f81c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f820:	2b00      	cmp	r3, #0
 800f822:	dce9      	bgt.n	800f7f8 <prvUnlockQueue+0x60>
 800f824:	e000      	b.n	800f828 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f826:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	22ff      	movs	r2, #255	; 0xff
 800f82c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f830:	f001 f8b8 	bl	80109a4 <vPortExitCritical>
}
 800f834:	bf00      	nop
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f844:	f001 f87a 	bl	801093c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d102      	bne.n	800f856 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f850:	2301      	movs	r3, #1
 800f852:	60fb      	str	r3, [r7, #12]
 800f854:	e001      	b.n	800f85a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f856:	2300      	movs	r3, #0
 800f858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f85a:	f001 f8a3 	bl	80109a4 <vPortExitCritical>

	return xReturn;
 800f85e:	68fb      	ldr	r3, [r7, #12]
}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f870:	f001 f864 	bl	801093c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d102      	bne.n	800f886 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f880:	2301      	movs	r3, #1
 800f882:	60fb      	str	r3, [r7, #12]
 800f884:	e001      	b.n	800f88a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f886:	2300      	movs	r3, #0
 800f888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f88a:	f001 f88b 	bl	80109a4 <vPortExitCritical>

	return xReturn;
 800f88e:	68fb      	ldr	r3, [r7, #12]
}
 800f890:	4618      	mov	r0, r3
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b08e      	sub	sp, #56	; 0x38
 800f89c:	af04      	add	r7, sp, #16
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	60b9      	str	r1, [r7, #8]
 800f8a2:	607a      	str	r2, [r7, #4]
 800f8a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10c      	bne.n	800f8c6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800f8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b0:	b672      	cpsid	i
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	b662      	cpsie	i
 800f8c0:	623b      	str	r3, [r7, #32]
}
 800f8c2:	bf00      	nop
 800f8c4:	e7fe      	b.n	800f8c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10c      	bne.n	800f8e6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800f8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d0:	b672      	cpsid	i
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	b662      	cpsie	i
 800f8e0:	61fb      	str	r3, [r7, #28]
}
 800f8e2:	bf00      	nop
 800f8e4:	e7fe      	b.n	800f8e4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f8e6:	2358      	movs	r3, #88	; 0x58
 800f8e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	2b58      	cmp	r3, #88	; 0x58
 800f8ee:	d00c      	beq.n	800f90a <xTaskCreateStatic+0x72>
	__asm volatile
 800f8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f4:	b672      	cpsid	i
 800f8f6:	f383 8811 	msr	BASEPRI, r3
 800f8fa:	f3bf 8f6f 	isb	sy
 800f8fe:	f3bf 8f4f 	dsb	sy
 800f902:	b662      	cpsie	i
 800f904:	61bb      	str	r3, [r7, #24]
}
 800f906:	bf00      	nop
 800f908:	e7fe      	b.n	800f908 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f90a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d01e      	beq.n	800f950 <xTaskCreateStatic+0xb8>
 800f912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f914:	2b00      	cmp	r3, #0
 800f916:	d01b      	beq.n	800f950 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f920:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f924:	2202      	movs	r2, #2
 800f926:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f92a:	2300      	movs	r3, #0
 800f92c:	9303      	str	r3, [sp, #12]
 800f92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f930:	9302      	str	r3, [sp, #8]
 800f932:	f107 0314 	add.w	r3, r7, #20
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	68b9      	ldr	r1, [r7, #8]
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f000 f850 	bl	800f9e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f94a:	f000 f8e1 	bl	800fb10 <prvAddNewTaskToReadyList>
 800f94e:	e001      	b.n	800f954 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f950:	2300      	movs	r3, #0
 800f952:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f954:	697b      	ldr	r3, [r7, #20]
	}
 800f956:	4618      	mov	r0, r3
 800f958:	3728      	adds	r7, #40	; 0x28
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b08c      	sub	sp, #48	; 0x30
 800f962:	af04      	add	r7, sp, #16
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	603b      	str	r3, [r7, #0]
 800f96a:	4613      	mov	r3, r2
 800f96c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f96e:	88fb      	ldrh	r3, [r7, #6]
 800f970:	009b      	lsls	r3, r3, #2
 800f972:	4618      	mov	r0, r3
 800f974:	f001 f90e 	bl	8010b94 <pvPortMalloc>
 800f978:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00e      	beq.n	800f99e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f980:	2058      	movs	r0, #88	; 0x58
 800f982:	f001 f907 	bl	8010b94 <pvPortMalloc>
 800f986:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d003      	beq.n	800f996 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	697a      	ldr	r2, [r7, #20]
 800f992:	631a      	str	r2, [r3, #48]	; 0x30
 800f994:	e005      	b.n	800f9a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f996:	6978      	ldr	r0, [r7, #20]
 800f998:	f001 f9cc 	bl	8010d34 <vPortFree>
 800f99c:	e001      	b.n	800f9a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d017      	beq.n	800f9d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f9b0:	88fa      	ldrh	r2, [r7, #6]
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	9303      	str	r3, [sp, #12]
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	9302      	str	r3, [sp, #8]
 800f9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9bc:	9301      	str	r3, [sp, #4]
 800f9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c0:	9300      	str	r3, [sp, #0]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	68b9      	ldr	r1, [r7, #8]
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f000 f80e 	bl	800f9e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f9cc:	69f8      	ldr	r0, [r7, #28]
 800f9ce:	f000 f89f 	bl	800fb10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	61bb      	str	r3, [r7, #24]
 800f9d6:	e002      	b.n	800f9de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f9d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f9de:	69bb      	ldr	r3, [r7, #24]
	}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3720      	adds	r7, #32
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b088      	sub	sp, #32
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
 800f9f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	461a      	mov	r2, r3
 800fa00:	21a5      	movs	r1, #165	; 0xa5
 800fa02:	f001 fcf5 	bl	80113f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fa10:	440b      	add	r3, r1
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	4413      	add	r3, r2
 800fa16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	f023 0307 	bic.w	r3, r3, #7
 800fa1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	f003 0307 	and.w	r3, r3, #7
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00c      	beq.n	800fa44 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800fa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2e:	b672      	cpsid	i
 800fa30:	f383 8811 	msr	BASEPRI, r3
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	f3bf 8f4f 	dsb	sy
 800fa3c:	b662      	cpsie	i
 800fa3e:	617b      	str	r3, [r7, #20]
}
 800fa40:	bf00      	nop
 800fa42:	e7fe      	b.n	800fa42 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d01f      	beq.n	800fa8a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	61fb      	str	r3, [r7, #28]
 800fa4e:	e012      	b.n	800fa76 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fa50:	68ba      	ldr	r2, [r7, #8]
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	4413      	add	r3, r2
 800fa56:	7819      	ldrb	r1, [r3, #0]
 800fa58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	3334      	adds	r3, #52	; 0x34
 800fa60:	460a      	mov	r2, r1
 800fa62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fa64:	68ba      	ldr	r2, [r7, #8]
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	4413      	add	r3, r2
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d006      	beq.n	800fa7e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	3301      	adds	r3, #1
 800fa74:	61fb      	str	r3, [r7, #28]
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	2b0f      	cmp	r3, #15
 800fa7a:	d9e9      	bls.n	800fa50 <prvInitialiseNewTask+0x68>
 800fa7c:	e000      	b.n	800fa80 <prvInitialiseNewTask+0x98>
			{
				break;
 800fa7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	2200      	movs	r2, #0
 800fa84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa88:	e003      	b.n	800fa92 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa94:	2b06      	cmp	r3, #6
 800fa96:	d901      	bls.n	800fa9c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fa98:	2306      	movs	r3, #6
 800fa9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800faa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800faa6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800faa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faaa:	2200      	movs	r2, #0
 800faac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	3304      	adds	r3, #4
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7ff f8ec 	bl	800ec90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faba:	3318      	adds	r3, #24
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7ff f8e7 	bl	800ec90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fac6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faca:	f1c3 0207 	rsb	r2, r3, #7
 800face:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fad6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800fad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fada:	2200      	movs	r2, #0
 800fadc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae0:	2200      	movs	r2, #0
 800fae2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800faec:	683a      	ldr	r2, [r7, #0]
 800faee:	68f9      	ldr	r1, [r7, #12]
 800faf0:	69b8      	ldr	r0, [r7, #24]
 800faf2:	f000 fe15 	bl	8010720 <pxPortInitialiseStack>
 800faf6:	4602      	mov	r2, r0
 800faf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d002      	beq.n	800fb08 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb08:	bf00      	nop
 800fb0a:	3720      	adds	r7, #32
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fb18:	f000 ff10 	bl	801093c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fb1c:	4b2a      	ldr	r3, [pc, #168]	; (800fbc8 <prvAddNewTaskToReadyList+0xb8>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	3301      	adds	r3, #1
 800fb22:	4a29      	ldr	r2, [pc, #164]	; (800fbc8 <prvAddNewTaskToReadyList+0xb8>)
 800fb24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fb26:	4b29      	ldr	r3, [pc, #164]	; (800fbcc <prvAddNewTaskToReadyList+0xbc>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d109      	bne.n	800fb42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fb2e:	4a27      	ldr	r2, [pc, #156]	; (800fbcc <prvAddNewTaskToReadyList+0xbc>)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fb34:	4b24      	ldr	r3, [pc, #144]	; (800fbc8 <prvAddNewTaskToReadyList+0xb8>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d110      	bne.n	800fb5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fb3c:	f000 fc22 	bl	8010384 <prvInitialiseTaskLists>
 800fb40:	e00d      	b.n	800fb5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fb42:	4b23      	ldr	r3, [pc, #140]	; (800fbd0 <prvAddNewTaskToReadyList+0xc0>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d109      	bne.n	800fb5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fb4a:	4b20      	ldr	r3, [pc, #128]	; (800fbcc <prvAddNewTaskToReadyList+0xbc>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d802      	bhi.n	800fb5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fb58:	4a1c      	ldr	r2, [pc, #112]	; (800fbcc <prvAddNewTaskToReadyList+0xbc>)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fb5e:	4b1d      	ldr	r3, [pc, #116]	; (800fbd4 <prvAddNewTaskToReadyList+0xc4>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3301      	adds	r3, #1
 800fb64:	4a1b      	ldr	r2, [pc, #108]	; (800fbd4 <prvAddNewTaskToReadyList+0xc4>)
 800fb66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	409a      	lsls	r2, r3
 800fb70:	4b19      	ldr	r3, [pc, #100]	; (800fbd8 <prvAddNewTaskToReadyList+0xc8>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	4a18      	ldr	r2, [pc, #96]	; (800fbd8 <prvAddNewTaskToReadyList+0xc8>)
 800fb78:	6013      	str	r3, [r2, #0]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb7e:	4613      	mov	r3, r2
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	4413      	add	r3, r2
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	4a15      	ldr	r2, [pc, #84]	; (800fbdc <prvAddNewTaskToReadyList+0xcc>)
 800fb88:	441a      	add	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4610      	mov	r0, r2
 800fb92:	f7ff f88a 	bl	800ecaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb96:	f000 ff05 	bl	80109a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb9a:	4b0d      	ldr	r3, [pc, #52]	; (800fbd0 <prvAddNewTaskToReadyList+0xc0>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d00e      	beq.n	800fbc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fba2:	4b0a      	ldr	r3, [pc, #40]	; (800fbcc <prvAddNewTaskToReadyList+0xbc>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d207      	bcs.n	800fbc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fbb0:	4b0b      	ldr	r3, [pc, #44]	; (800fbe0 <prvAddNewTaskToReadyList+0xd0>)
 800fbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb6:	601a      	str	r2, [r3, #0]
 800fbb8:	f3bf 8f4f 	dsb	sy
 800fbbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbc0:	bf00      	nop
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	20001104 	.word	0x20001104
 800fbcc:	20001004 	.word	0x20001004
 800fbd0:	20001110 	.word	0x20001110
 800fbd4:	20001120 	.word	0x20001120
 800fbd8:	2000110c 	.word	0x2000110c
 800fbdc:	20001008 	.word	0x20001008
 800fbe0:	e000ed04 	.word	0xe000ed04

0800fbe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fbec:	2300      	movs	r3, #0
 800fbee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d019      	beq.n	800fc2a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fbf6:	4b14      	ldr	r3, [pc, #80]	; (800fc48 <vTaskDelay+0x64>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d00c      	beq.n	800fc18 <vTaskDelay+0x34>
	__asm volatile
 800fbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc02:	b672      	cpsid	i
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	b662      	cpsie	i
 800fc12:	60bb      	str	r3, [r7, #8]
}
 800fc14:	bf00      	nop
 800fc16:	e7fe      	b.n	800fc16 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fc18:	f000 f87e 	bl	800fd18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 fd18 	bl	8010654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fc24:	f000 f886 	bl	800fd34 <xTaskResumeAll>
 800fc28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d107      	bne.n	800fc40 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800fc30:	4b06      	ldr	r3, [pc, #24]	; (800fc4c <vTaskDelay+0x68>)
 800fc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc36:	601a      	str	r2, [r3, #0]
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc40:	bf00      	nop
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	2000112c 	.word	0x2000112c
 800fc4c:	e000ed04 	.word	0xe000ed04

0800fc50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b08a      	sub	sp, #40	; 0x28
 800fc54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fc56:	2300      	movs	r3, #0
 800fc58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fc5e:	463a      	mov	r2, r7
 800fc60:	1d39      	adds	r1, r7, #4
 800fc62:	f107 0308 	add.w	r3, r7, #8
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7f1 f94e 	bl	8000f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fc6c:	6839      	ldr	r1, [r7, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68ba      	ldr	r2, [r7, #8]
 800fc72:	9202      	str	r2, [sp, #8]
 800fc74:	9301      	str	r3, [sp, #4]
 800fc76:	2300      	movs	r3, #0
 800fc78:	9300      	str	r3, [sp, #0]
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	460a      	mov	r2, r1
 800fc7e:	4920      	ldr	r1, [pc, #128]	; (800fd00 <vTaskStartScheduler+0xb0>)
 800fc80:	4820      	ldr	r0, [pc, #128]	; (800fd04 <vTaskStartScheduler+0xb4>)
 800fc82:	f7ff fe09 	bl	800f898 <xTaskCreateStatic>
 800fc86:	4603      	mov	r3, r0
 800fc88:	4a1f      	ldr	r2, [pc, #124]	; (800fd08 <vTaskStartScheduler+0xb8>)
 800fc8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fc8c:	4b1e      	ldr	r3, [pc, #120]	; (800fd08 <vTaskStartScheduler+0xb8>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d002      	beq.n	800fc9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fc94:	2301      	movs	r3, #1
 800fc96:	617b      	str	r3, [r7, #20]
 800fc98:	e001      	b.n	800fc9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d118      	bne.n	800fcd6 <vTaskStartScheduler+0x86>
	__asm volatile
 800fca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca8:	b672      	cpsid	i
 800fcaa:	f383 8811 	msr	BASEPRI, r3
 800fcae:	f3bf 8f6f 	isb	sy
 800fcb2:	f3bf 8f4f 	dsb	sy
 800fcb6:	b662      	cpsie	i
 800fcb8:	613b      	str	r3, [r7, #16]
}
 800fcba:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fcbc:	4b13      	ldr	r3, [pc, #76]	; (800fd0c <vTaskStartScheduler+0xbc>)
 800fcbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fcc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fcc4:	4b12      	ldr	r3, [pc, #72]	; (800fd10 <vTaskStartScheduler+0xc0>)
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fcca:	4b12      	ldr	r3, [pc, #72]	; (800fd14 <vTaskStartScheduler+0xc4>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fcd0:	f000 fdb6 	bl	8010840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fcd4:	e010      	b.n	800fcf8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcdc:	d10c      	bne.n	800fcf8 <vTaskStartScheduler+0xa8>
	__asm volatile
 800fcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce2:	b672      	cpsid	i
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	b662      	cpsie	i
 800fcf2:	60fb      	str	r3, [r7, #12]
}
 800fcf4:	bf00      	nop
 800fcf6:	e7fe      	b.n	800fcf6 <vTaskStartScheduler+0xa6>
}
 800fcf8:	bf00      	nop
 800fcfa:	3718      	adds	r7, #24
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}
 800fd00:	080129bc 	.word	0x080129bc
 800fd04:	08010351 	.word	0x08010351
 800fd08:	20001128 	.word	0x20001128
 800fd0c:	20001124 	.word	0x20001124
 800fd10:	20001110 	.word	0x20001110
 800fd14:	20001108 	.word	0x20001108

0800fd18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fd18:	b480      	push	{r7}
 800fd1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fd1c:	4b04      	ldr	r3, [pc, #16]	; (800fd30 <vTaskSuspendAll+0x18>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	3301      	adds	r3, #1
 800fd22:	4a03      	ldr	r2, [pc, #12]	; (800fd30 <vTaskSuspendAll+0x18>)
 800fd24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fd26:	bf00      	nop
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr
 800fd30:	2000112c 	.word	0x2000112c

0800fd34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fd42:	4b42      	ldr	r3, [pc, #264]	; (800fe4c <xTaskResumeAll+0x118>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d10c      	bne.n	800fd64 <xTaskResumeAll+0x30>
	__asm volatile
 800fd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4e:	b672      	cpsid	i
 800fd50:	f383 8811 	msr	BASEPRI, r3
 800fd54:	f3bf 8f6f 	isb	sy
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	b662      	cpsie	i
 800fd5e:	603b      	str	r3, [r7, #0]
}
 800fd60:	bf00      	nop
 800fd62:	e7fe      	b.n	800fd62 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fd64:	f000 fdea 	bl	801093c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fd68:	4b38      	ldr	r3, [pc, #224]	; (800fe4c <xTaskResumeAll+0x118>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	4a37      	ldr	r2, [pc, #220]	; (800fe4c <xTaskResumeAll+0x118>)
 800fd70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd72:	4b36      	ldr	r3, [pc, #216]	; (800fe4c <xTaskResumeAll+0x118>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d161      	bne.n	800fe3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fd7a:	4b35      	ldr	r3, [pc, #212]	; (800fe50 <xTaskResumeAll+0x11c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d05d      	beq.n	800fe3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd82:	e02e      	b.n	800fde2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd84:	4b33      	ldr	r3, [pc, #204]	; (800fe54 <xTaskResumeAll+0x120>)
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	3318      	adds	r3, #24
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7fe ffe7 	bl	800ed64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	3304      	adds	r3, #4
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fe ffe2 	bl	800ed64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda4:	2201      	movs	r2, #1
 800fda6:	409a      	lsls	r2, r3
 800fda8:	4b2b      	ldr	r3, [pc, #172]	; (800fe58 <xTaskResumeAll+0x124>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4313      	orrs	r3, r2
 800fdae:	4a2a      	ldr	r2, [pc, #168]	; (800fe58 <xTaskResumeAll+0x124>)
 800fdb0:	6013      	str	r3, [r2, #0]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	4413      	add	r3, r2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	4a27      	ldr	r2, [pc, #156]	; (800fe5c <xTaskResumeAll+0x128>)
 800fdc0:	441a      	add	r2, r3
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	3304      	adds	r3, #4
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	4610      	mov	r0, r2
 800fdca:	f7fe ff6e 	bl	800ecaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd2:	4b23      	ldr	r3, [pc, #140]	; (800fe60 <xTaskResumeAll+0x12c>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d302      	bcc.n	800fde2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fddc:	4b21      	ldr	r3, [pc, #132]	; (800fe64 <xTaskResumeAll+0x130>)
 800fdde:	2201      	movs	r2, #1
 800fde0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fde2:	4b1c      	ldr	r3, [pc, #112]	; (800fe54 <xTaskResumeAll+0x120>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1cc      	bne.n	800fd84 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d001      	beq.n	800fdf4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fdf0:	f000 fb68 	bl	80104c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fdf4:	4b1c      	ldr	r3, [pc, #112]	; (800fe68 <xTaskResumeAll+0x134>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d010      	beq.n	800fe22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fe00:	f000 f858 	bl	800feb4 <xTaskIncrementTick>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d002      	beq.n	800fe10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fe0a:	4b16      	ldr	r3, [pc, #88]	; (800fe64 <xTaskResumeAll+0x130>)
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	3b01      	subs	r3, #1
 800fe14:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d1f1      	bne.n	800fe00 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800fe1c:	4b12      	ldr	r3, [pc, #72]	; (800fe68 <xTaskResumeAll+0x134>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fe22:	4b10      	ldr	r3, [pc, #64]	; (800fe64 <xTaskResumeAll+0x130>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d009      	beq.n	800fe3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fe2e:	4b0f      	ldr	r3, [pc, #60]	; (800fe6c <xTaskResumeAll+0x138>)
 800fe30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe3e:	f000 fdb1 	bl	80109a4 <vPortExitCritical>

	return xAlreadyYielded;
 800fe42:	68bb      	ldr	r3, [r7, #8]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3710      	adds	r7, #16
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	2000112c 	.word	0x2000112c
 800fe50:	20001104 	.word	0x20001104
 800fe54:	200010c4 	.word	0x200010c4
 800fe58:	2000110c 	.word	0x2000110c
 800fe5c:	20001008 	.word	0x20001008
 800fe60:	20001004 	.word	0x20001004
 800fe64:	20001118 	.word	0x20001118
 800fe68:	20001114 	.word	0x20001114
 800fe6c:	e000ed04 	.word	0xe000ed04

0800fe70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fe76:	4b05      	ldr	r3, [pc, #20]	; (800fe8c <xTaskGetTickCount+0x1c>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fe7c:	687b      	ldr	r3, [r7, #4]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	370c      	adds	r7, #12
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	20001108 	.word	0x20001108

0800fe90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe96:	f000 fe39 	bl	8010b0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fe9e:	4b04      	ldr	r3, [pc, #16]	; (800feb0 <xTaskGetTickCountFromISR+0x20>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fea4:	683b      	ldr	r3, [r7, #0]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	20001108 	.word	0x20001108

0800feb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b086      	sub	sp, #24
 800feb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800feba:	2300      	movs	r3, #0
 800febc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800febe:	4b4f      	ldr	r3, [pc, #316]	; (800fffc <xTaskIncrementTick+0x148>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f040 808a 	bne.w	800ffdc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fec8:	4b4d      	ldr	r3, [pc, #308]	; (8010000 <xTaskIncrementTick+0x14c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	3301      	adds	r3, #1
 800fece:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fed0:	4a4b      	ldr	r2, [pc, #300]	; (8010000 <xTaskIncrementTick+0x14c>)
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d122      	bne.n	800ff22 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fedc:	4b49      	ldr	r3, [pc, #292]	; (8010004 <xTaskIncrementTick+0x150>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00c      	beq.n	800ff00 <xTaskIncrementTick+0x4c>
	__asm volatile
 800fee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feea:	b672      	cpsid	i
 800feec:	f383 8811 	msr	BASEPRI, r3
 800fef0:	f3bf 8f6f 	isb	sy
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	b662      	cpsie	i
 800fefa:	603b      	str	r3, [r7, #0]
}
 800fefc:	bf00      	nop
 800fefe:	e7fe      	b.n	800fefe <xTaskIncrementTick+0x4a>
 800ff00:	4b40      	ldr	r3, [pc, #256]	; (8010004 <xTaskIncrementTick+0x150>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	60fb      	str	r3, [r7, #12]
 800ff06:	4b40      	ldr	r3, [pc, #256]	; (8010008 <xTaskIncrementTick+0x154>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4a3e      	ldr	r2, [pc, #248]	; (8010004 <xTaskIncrementTick+0x150>)
 800ff0c:	6013      	str	r3, [r2, #0]
 800ff0e:	4a3e      	ldr	r2, [pc, #248]	; (8010008 <xTaskIncrementTick+0x154>)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6013      	str	r3, [r2, #0]
 800ff14:	4b3d      	ldr	r3, [pc, #244]	; (801000c <xTaskIncrementTick+0x158>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	4a3c      	ldr	r2, [pc, #240]	; (801000c <xTaskIncrementTick+0x158>)
 800ff1c:	6013      	str	r3, [r2, #0]
 800ff1e:	f000 fad1 	bl	80104c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ff22:	4b3b      	ldr	r3, [pc, #236]	; (8010010 <xTaskIncrementTick+0x15c>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	693a      	ldr	r2, [r7, #16]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d348      	bcc.n	800ffbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff2c:	4b35      	ldr	r3, [pc, #212]	; (8010004 <xTaskIncrementTick+0x150>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d104      	bne.n	800ff40 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff36:	4b36      	ldr	r3, [pc, #216]	; (8010010 <xTaskIncrementTick+0x15c>)
 800ff38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff3c:	601a      	str	r2, [r3, #0]
					break;
 800ff3e:	e03e      	b.n	800ffbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff40:	4b30      	ldr	r3, [pc, #192]	; (8010004 <xTaskIncrementTick+0x150>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ff50:	693a      	ldr	r2, [r7, #16]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d203      	bcs.n	800ff60 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ff58:	4a2d      	ldr	r2, [pc, #180]	; (8010010 <xTaskIncrementTick+0x15c>)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ff5e:	e02e      	b.n	800ffbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	3304      	adds	r3, #4
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7fe fefd 	bl	800ed64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d004      	beq.n	800ff7c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	3318      	adds	r3, #24
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fe fef4 	bl	800ed64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	2201      	movs	r2, #1
 800ff82:	409a      	lsls	r2, r3
 800ff84:	4b23      	ldr	r3, [pc, #140]	; (8010014 <xTaskIncrementTick+0x160>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	4a22      	ldr	r2, [pc, #136]	; (8010014 <xTaskIncrementTick+0x160>)
 800ff8c:	6013      	str	r3, [r2, #0]
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff92:	4613      	mov	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	4413      	add	r3, r2
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	4a1f      	ldr	r2, [pc, #124]	; (8010018 <xTaskIncrementTick+0x164>)
 800ff9c:	441a      	add	r2, r3
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	f7fe fe80 	bl	800ecaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffae:	4b1b      	ldr	r3, [pc, #108]	; (801001c <xTaskIncrementTick+0x168>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d3b9      	bcc.n	800ff2c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffbc:	e7b6      	b.n	800ff2c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ffbe:	4b17      	ldr	r3, [pc, #92]	; (801001c <xTaskIncrementTick+0x168>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc4:	4914      	ldr	r1, [pc, #80]	; (8010018 <xTaskIncrementTick+0x164>)
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4413      	add	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	440b      	add	r3, r1
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d907      	bls.n	800ffe6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	617b      	str	r3, [r7, #20]
 800ffda:	e004      	b.n	800ffe6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ffdc:	4b10      	ldr	r3, [pc, #64]	; (8010020 <xTaskIncrementTick+0x16c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	4a0f      	ldr	r2, [pc, #60]	; (8010020 <xTaskIncrementTick+0x16c>)
 800ffe4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ffe6:	4b0f      	ldr	r3, [pc, #60]	; (8010024 <xTaskIncrementTick+0x170>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d001      	beq.n	800fff2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800ffee:	2301      	movs	r3, #1
 800fff0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fff2:	697b      	ldr	r3, [r7, #20]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	2000112c 	.word	0x2000112c
 8010000:	20001108 	.word	0x20001108
 8010004:	200010bc 	.word	0x200010bc
 8010008:	200010c0 	.word	0x200010c0
 801000c:	2000111c 	.word	0x2000111c
 8010010:	20001124 	.word	0x20001124
 8010014:	2000110c 	.word	0x2000110c
 8010018:	20001008 	.word	0x20001008
 801001c:	20001004 	.word	0x20001004
 8010020:	20001114 	.word	0x20001114
 8010024:	20001118 	.word	0x20001118

08010028 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b088      	sub	sp, #32
 801002c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801002e:	4b3a      	ldr	r3, [pc, #232]	; (8010118 <vTaskSwitchContext+0xf0>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d003      	beq.n	801003e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010036:	4b39      	ldr	r3, [pc, #228]	; (801011c <vTaskSwitchContext+0xf4>)
 8010038:	2201      	movs	r2, #1
 801003a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801003c:	e068      	b.n	8010110 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801003e:	4b37      	ldr	r3, [pc, #220]	; (801011c <vTaskSwitchContext+0xf4>)
 8010040:	2200      	movs	r2, #0
 8010042:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010044:	4b36      	ldr	r3, [pc, #216]	; (8010120 <vTaskSwitchContext+0xf8>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801004a:	61fb      	str	r3, [r7, #28]
 801004c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010050:	61bb      	str	r3, [r7, #24]
 8010052:	69fb      	ldr	r3, [r7, #28]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	69ba      	ldr	r2, [r7, #24]
 8010058:	429a      	cmp	r2, r3
 801005a:	d111      	bne.n	8010080 <vTaskSwitchContext+0x58>
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	3304      	adds	r3, #4
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	69ba      	ldr	r2, [r7, #24]
 8010064:	429a      	cmp	r2, r3
 8010066:	d10b      	bne.n	8010080 <vTaskSwitchContext+0x58>
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	3308      	adds	r3, #8
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	69ba      	ldr	r2, [r7, #24]
 8010070:	429a      	cmp	r2, r3
 8010072:	d105      	bne.n	8010080 <vTaskSwitchContext+0x58>
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	330c      	adds	r3, #12
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	69ba      	ldr	r2, [r7, #24]
 801007c:	429a      	cmp	r2, r3
 801007e:	d008      	beq.n	8010092 <vTaskSwitchContext+0x6a>
 8010080:	4b27      	ldr	r3, [pc, #156]	; (8010120 <vTaskSwitchContext+0xf8>)
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	4b26      	ldr	r3, [pc, #152]	; (8010120 <vTaskSwitchContext+0xf8>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	3334      	adds	r3, #52	; 0x34
 801008a:	4619      	mov	r1, r3
 801008c:	4610      	mov	r0, r2
 801008e:	f7f0 ff28 	bl	8000ee2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010092:	4b24      	ldr	r3, [pc, #144]	; (8010124 <vTaskSwitchContext+0xfc>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	fab3 f383 	clz	r3, r3
 801009e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80100a0:	7afb      	ldrb	r3, [r7, #11]
 80100a2:	f1c3 031f 	rsb	r3, r3, #31
 80100a6:	617b      	str	r3, [r7, #20]
 80100a8:	491f      	ldr	r1, [pc, #124]	; (8010128 <vTaskSwitchContext+0x100>)
 80100aa:	697a      	ldr	r2, [r7, #20]
 80100ac:	4613      	mov	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	4413      	add	r3, r2
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	440b      	add	r3, r1
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10c      	bne.n	80100d6 <vTaskSwitchContext+0xae>
	__asm volatile
 80100bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c0:	b672      	cpsid	i
 80100c2:	f383 8811 	msr	BASEPRI, r3
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	b662      	cpsie	i
 80100d0:	607b      	str	r3, [r7, #4]
}
 80100d2:	bf00      	nop
 80100d4:	e7fe      	b.n	80100d4 <vTaskSwitchContext+0xac>
 80100d6:	697a      	ldr	r2, [r7, #20]
 80100d8:	4613      	mov	r3, r2
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	4413      	add	r3, r2
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	4a11      	ldr	r2, [pc, #68]	; (8010128 <vTaskSwitchContext+0x100>)
 80100e2:	4413      	add	r3, r2
 80100e4:	613b      	str	r3, [r7, #16]
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	685a      	ldr	r2, [r3, #4]
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	605a      	str	r2, [r3, #4]
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	685a      	ldr	r2, [r3, #4]
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	3308      	adds	r3, #8
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d104      	bne.n	8010106 <vTaskSwitchContext+0xde>
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	605a      	str	r2, [r3, #4]
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	4a04      	ldr	r2, [pc, #16]	; (8010120 <vTaskSwitchContext+0xf8>)
 801010e:	6013      	str	r3, [r2, #0]
}
 8010110:	bf00      	nop
 8010112:	3720      	adds	r7, #32
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	2000112c 	.word	0x2000112c
 801011c:	20001118 	.word	0x20001118
 8010120:	20001004 	.word	0x20001004
 8010124:	2000110c 	.word	0x2000110c
 8010128:	20001008 	.word	0x20001008

0801012c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d10c      	bne.n	8010156 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801013c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010140:	b672      	cpsid	i
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	b662      	cpsie	i
 8010150:	60fb      	str	r3, [r7, #12]
}
 8010152:	bf00      	nop
 8010154:	e7fe      	b.n	8010154 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010156:	4b07      	ldr	r3, [pc, #28]	; (8010174 <vTaskPlaceOnEventList+0x48>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3318      	adds	r3, #24
 801015c:	4619      	mov	r1, r3
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f7fe fdc7 	bl	800ecf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010164:	2101      	movs	r1, #1
 8010166:	6838      	ldr	r0, [r7, #0]
 8010168:	f000 fa74 	bl	8010654 <prvAddCurrentTaskToDelayedList>
}
 801016c:	bf00      	nop
 801016e:	3710      	adds	r7, #16
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	20001004 	.word	0x20001004

08010178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d10c      	bne.n	80101a8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	b672      	cpsid	i
 8010194:	f383 8811 	msr	BASEPRI, r3
 8010198:	f3bf 8f6f 	isb	sy
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	b662      	cpsie	i
 80101a2:	60fb      	str	r3, [r7, #12]
}
 80101a4:	bf00      	nop
 80101a6:	e7fe      	b.n	80101a6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	3318      	adds	r3, #24
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7fe fdd9 	bl	800ed64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101b2:	4b1d      	ldr	r3, [pc, #116]	; (8010228 <xTaskRemoveFromEventList+0xb0>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d11c      	bne.n	80101f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	3304      	adds	r3, #4
 80101be:	4618      	mov	r0, r3
 80101c0:	f7fe fdd0 	bl	800ed64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c8:	2201      	movs	r2, #1
 80101ca:	409a      	lsls	r2, r3
 80101cc:	4b17      	ldr	r3, [pc, #92]	; (801022c <xTaskRemoveFromEventList+0xb4>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4313      	orrs	r3, r2
 80101d2:	4a16      	ldr	r2, [pc, #88]	; (801022c <xTaskRemoveFromEventList+0xb4>)
 80101d4:	6013      	str	r3, [r2, #0]
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101da:	4613      	mov	r3, r2
 80101dc:	009b      	lsls	r3, r3, #2
 80101de:	4413      	add	r3, r2
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4a13      	ldr	r2, [pc, #76]	; (8010230 <xTaskRemoveFromEventList+0xb8>)
 80101e4:	441a      	add	r2, r3
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	3304      	adds	r3, #4
 80101ea:	4619      	mov	r1, r3
 80101ec:	4610      	mov	r0, r2
 80101ee:	f7fe fd5c 	bl	800ecaa <vListInsertEnd>
 80101f2:	e005      	b.n	8010200 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	3318      	adds	r3, #24
 80101f8:	4619      	mov	r1, r3
 80101fa:	480e      	ldr	r0, [pc, #56]	; (8010234 <xTaskRemoveFromEventList+0xbc>)
 80101fc:	f7fe fd55 	bl	800ecaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010204:	4b0c      	ldr	r3, [pc, #48]	; (8010238 <xTaskRemoveFromEventList+0xc0>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801020a:	429a      	cmp	r2, r3
 801020c:	d905      	bls.n	801021a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801020e:	2301      	movs	r3, #1
 8010210:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010212:	4b0a      	ldr	r3, [pc, #40]	; (801023c <xTaskRemoveFromEventList+0xc4>)
 8010214:	2201      	movs	r2, #1
 8010216:	601a      	str	r2, [r3, #0]
 8010218:	e001      	b.n	801021e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801021a:	2300      	movs	r3, #0
 801021c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801021e:	697b      	ldr	r3, [r7, #20]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3718      	adds	r7, #24
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	2000112c 	.word	0x2000112c
 801022c:	2000110c 	.word	0x2000110c
 8010230:	20001008 	.word	0x20001008
 8010234:	200010c4 	.word	0x200010c4
 8010238:	20001004 	.word	0x20001004
 801023c:	20001118 	.word	0x20001118

08010240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010240:	b480      	push	{r7}
 8010242:	b083      	sub	sp, #12
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010248:	4b06      	ldr	r3, [pc, #24]	; (8010264 <vTaskInternalSetTimeOutState+0x24>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010250:	4b05      	ldr	r3, [pc, #20]	; (8010268 <vTaskInternalSetTimeOutState+0x28>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	605a      	str	r2, [r3, #4]
}
 8010258:	bf00      	nop
 801025a:	370c      	adds	r7, #12
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr
 8010264:	2000111c 	.word	0x2000111c
 8010268:	20001108 	.word	0x20001108

0801026c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b088      	sub	sp, #32
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d10c      	bne.n	8010296 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801027c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010280:	b672      	cpsid	i
 8010282:	f383 8811 	msr	BASEPRI, r3
 8010286:	f3bf 8f6f 	isb	sy
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	b662      	cpsie	i
 8010290:	613b      	str	r3, [r7, #16]
}
 8010292:	bf00      	nop
 8010294:	e7fe      	b.n	8010294 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d10c      	bne.n	80102b6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801029c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a0:	b672      	cpsid	i
 80102a2:	f383 8811 	msr	BASEPRI, r3
 80102a6:	f3bf 8f6f 	isb	sy
 80102aa:	f3bf 8f4f 	dsb	sy
 80102ae:	b662      	cpsie	i
 80102b0:	60fb      	str	r3, [r7, #12]
}
 80102b2:	bf00      	nop
 80102b4:	e7fe      	b.n	80102b4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80102b6:	f000 fb41 	bl	801093c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80102ba:	4b1d      	ldr	r3, [pc, #116]	; (8010330 <xTaskCheckForTimeOut+0xc4>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	69ba      	ldr	r2, [r7, #24]
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102d2:	d102      	bne.n	80102da <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80102d4:	2300      	movs	r3, #0
 80102d6:	61fb      	str	r3, [r7, #28]
 80102d8:	e023      	b.n	8010322 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	4b15      	ldr	r3, [pc, #84]	; (8010334 <xTaskCheckForTimeOut+0xc8>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d007      	beq.n	80102f6 <xTaskCheckForTimeOut+0x8a>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	69ba      	ldr	r2, [r7, #24]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d302      	bcc.n	80102f6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80102f0:	2301      	movs	r3, #1
 80102f2:	61fb      	str	r3, [r7, #28]
 80102f4:	e015      	b.n	8010322 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	697a      	ldr	r2, [r7, #20]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d20b      	bcs.n	8010318 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	1ad2      	subs	r2, r2, r3
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7ff ff97 	bl	8010240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010312:	2300      	movs	r3, #0
 8010314:	61fb      	str	r3, [r7, #28]
 8010316:	e004      	b.n	8010322 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	2200      	movs	r2, #0
 801031c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801031e:	2301      	movs	r3, #1
 8010320:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010322:	f000 fb3f 	bl	80109a4 <vPortExitCritical>

	return xReturn;
 8010326:	69fb      	ldr	r3, [r7, #28]
}
 8010328:	4618      	mov	r0, r3
 801032a:	3720      	adds	r7, #32
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	20001108 	.word	0x20001108
 8010334:	2000111c 	.word	0x2000111c

08010338 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010338:	b480      	push	{r7}
 801033a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801033c:	4b03      	ldr	r3, [pc, #12]	; (801034c <vTaskMissedYield+0x14>)
 801033e:	2201      	movs	r2, #1
 8010340:	601a      	str	r2, [r3, #0]
}
 8010342:	bf00      	nop
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr
 801034c:	20001118 	.word	0x20001118

08010350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010358:	f000 f854 	bl	8010404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801035c:	4b07      	ldr	r3, [pc, #28]	; (801037c <prvIdleTask+0x2c>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d907      	bls.n	8010374 <prvIdleTask+0x24>
			{
				taskYIELD();
 8010364:	4b06      	ldr	r3, [pc, #24]	; (8010380 <prvIdleTask+0x30>)
 8010366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801036a:	601a      	str	r2, [r3, #0]
 801036c:	f3bf 8f4f 	dsb	sy
 8010370:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010374:	f7f0 fdae 	bl	8000ed4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010378:	e7ee      	b.n	8010358 <prvIdleTask+0x8>
 801037a:	bf00      	nop
 801037c:	20001008 	.word	0x20001008
 8010380:	e000ed04 	.word	0xe000ed04

08010384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801038a:	2300      	movs	r3, #0
 801038c:	607b      	str	r3, [r7, #4]
 801038e:	e00c      	b.n	80103aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	4613      	mov	r3, r2
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	4413      	add	r3, r2
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	4a12      	ldr	r2, [pc, #72]	; (80103e4 <prvInitialiseTaskLists+0x60>)
 801039c:	4413      	add	r3, r2
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe fc56 	bl	800ec50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	3301      	adds	r3, #1
 80103a8:	607b      	str	r3, [r7, #4]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2b06      	cmp	r3, #6
 80103ae:	d9ef      	bls.n	8010390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80103b0:	480d      	ldr	r0, [pc, #52]	; (80103e8 <prvInitialiseTaskLists+0x64>)
 80103b2:	f7fe fc4d 	bl	800ec50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80103b6:	480d      	ldr	r0, [pc, #52]	; (80103ec <prvInitialiseTaskLists+0x68>)
 80103b8:	f7fe fc4a 	bl	800ec50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80103bc:	480c      	ldr	r0, [pc, #48]	; (80103f0 <prvInitialiseTaskLists+0x6c>)
 80103be:	f7fe fc47 	bl	800ec50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80103c2:	480c      	ldr	r0, [pc, #48]	; (80103f4 <prvInitialiseTaskLists+0x70>)
 80103c4:	f7fe fc44 	bl	800ec50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80103c8:	480b      	ldr	r0, [pc, #44]	; (80103f8 <prvInitialiseTaskLists+0x74>)
 80103ca:	f7fe fc41 	bl	800ec50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80103ce:	4b0b      	ldr	r3, [pc, #44]	; (80103fc <prvInitialiseTaskLists+0x78>)
 80103d0:	4a05      	ldr	r2, [pc, #20]	; (80103e8 <prvInitialiseTaskLists+0x64>)
 80103d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80103d4:	4b0a      	ldr	r3, [pc, #40]	; (8010400 <prvInitialiseTaskLists+0x7c>)
 80103d6:	4a05      	ldr	r2, [pc, #20]	; (80103ec <prvInitialiseTaskLists+0x68>)
 80103d8:	601a      	str	r2, [r3, #0]
}
 80103da:	bf00      	nop
 80103dc:	3708      	adds	r7, #8
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	20001008 	.word	0x20001008
 80103e8:	20001094 	.word	0x20001094
 80103ec:	200010a8 	.word	0x200010a8
 80103f0:	200010c4 	.word	0x200010c4
 80103f4:	200010d8 	.word	0x200010d8
 80103f8:	200010f0 	.word	0x200010f0
 80103fc:	200010bc 	.word	0x200010bc
 8010400:	200010c0 	.word	0x200010c0

08010404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801040a:	e019      	b.n	8010440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801040c:	f000 fa96 	bl	801093c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010410:	4b10      	ldr	r3, [pc, #64]	; (8010454 <prvCheckTasksWaitingTermination+0x50>)
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	3304      	adds	r3, #4
 801041c:	4618      	mov	r0, r3
 801041e:	f7fe fca1 	bl	800ed64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010422:	4b0d      	ldr	r3, [pc, #52]	; (8010458 <prvCheckTasksWaitingTermination+0x54>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	3b01      	subs	r3, #1
 8010428:	4a0b      	ldr	r2, [pc, #44]	; (8010458 <prvCheckTasksWaitingTermination+0x54>)
 801042a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801042c:	4b0b      	ldr	r3, [pc, #44]	; (801045c <prvCheckTasksWaitingTermination+0x58>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	3b01      	subs	r3, #1
 8010432:	4a0a      	ldr	r2, [pc, #40]	; (801045c <prvCheckTasksWaitingTermination+0x58>)
 8010434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010436:	f000 fab5 	bl	80109a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 f810 	bl	8010460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010440:	4b06      	ldr	r3, [pc, #24]	; (801045c <prvCheckTasksWaitingTermination+0x58>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1e1      	bne.n	801040c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010448:	bf00      	nop
 801044a:	bf00      	nop
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	200010d8 	.word	0x200010d8
 8010458:	20001104 	.word	0x20001104
 801045c:	200010ec 	.word	0x200010ec

08010460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801046e:	2b00      	cmp	r3, #0
 8010470:	d108      	bne.n	8010484 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010476:	4618      	mov	r0, r3
 8010478:	f000 fc5c 	bl	8010d34 <vPortFree>
				vPortFree( pxTCB );
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f000 fc59 	bl	8010d34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010482:	e01a      	b.n	80104ba <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801048a:	2b01      	cmp	r3, #1
 801048c:	d103      	bne.n	8010496 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 fc50 	bl	8010d34 <vPortFree>
	}
 8010494:	e011      	b.n	80104ba <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801049c:	2b02      	cmp	r3, #2
 801049e:	d00c      	beq.n	80104ba <prvDeleteTCB+0x5a>
	__asm volatile
 80104a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a4:	b672      	cpsid	i
 80104a6:	f383 8811 	msr	BASEPRI, r3
 80104aa:	f3bf 8f6f 	isb	sy
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	b662      	cpsie	i
 80104b4:	60fb      	str	r3, [r7, #12]
}
 80104b6:	bf00      	nop
 80104b8:	e7fe      	b.n	80104b8 <prvDeleteTCB+0x58>
	}
 80104ba:	bf00      	nop
 80104bc:	3710      	adds	r7, #16
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
	...

080104c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80104c4:	b480      	push	{r7}
 80104c6:	b083      	sub	sp, #12
 80104c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104ca:	4b0c      	ldr	r3, [pc, #48]	; (80104fc <prvResetNextTaskUnblockTime+0x38>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d104      	bne.n	80104de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80104d4:	4b0a      	ldr	r3, [pc, #40]	; (8010500 <prvResetNextTaskUnblockTime+0x3c>)
 80104d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80104dc:	e008      	b.n	80104f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104de:	4b07      	ldr	r3, [pc, #28]	; (80104fc <prvResetNextTaskUnblockTime+0x38>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	4a04      	ldr	r2, [pc, #16]	; (8010500 <prvResetNextTaskUnblockTime+0x3c>)
 80104ee:	6013      	str	r3, [r2, #0]
}
 80104f0:	bf00      	nop
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr
 80104fc:	200010bc 	.word	0x200010bc
 8010500:	20001124 	.word	0x20001124

08010504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010504:	b480      	push	{r7}
 8010506:	b083      	sub	sp, #12
 8010508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801050a:	4b0b      	ldr	r3, [pc, #44]	; (8010538 <xTaskGetSchedulerState+0x34>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d102      	bne.n	8010518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010512:	2301      	movs	r3, #1
 8010514:	607b      	str	r3, [r7, #4]
 8010516:	e008      	b.n	801052a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010518:	4b08      	ldr	r3, [pc, #32]	; (801053c <xTaskGetSchedulerState+0x38>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d102      	bne.n	8010526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010520:	2302      	movs	r3, #2
 8010522:	607b      	str	r3, [r7, #4]
 8010524:	e001      	b.n	801052a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010526:	2300      	movs	r3, #0
 8010528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801052a:	687b      	ldr	r3, [r7, #4]
	}
 801052c:	4618      	mov	r0, r3
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr
 8010538:	20001110 	.word	0x20001110
 801053c:	2000112c 	.word	0x2000112c

08010540 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010540:	b580      	push	{r7, lr}
 8010542:	b086      	sub	sp, #24
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801054c:	2300      	movs	r3, #0
 801054e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d072      	beq.n	801063c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010556:	4b3c      	ldr	r3, [pc, #240]	; (8010648 <xTaskPriorityDisinherit+0x108>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	429a      	cmp	r2, r3
 801055e:	d00c      	beq.n	801057a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010564:	b672      	cpsid	i
 8010566:	f383 8811 	msr	BASEPRI, r3
 801056a:	f3bf 8f6f 	isb	sy
 801056e:	f3bf 8f4f 	dsb	sy
 8010572:	b662      	cpsie	i
 8010574:	60fb      	str	r3, [r7, #12]
}
 8010576:	bf00      	nop
 8010578:	e7fe      	b.n	8010578 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801057e:	2b00      	cmp	r3, #0
 8010580:	d10c      	bne.n	801059c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010586:	b672      	cpsid	i
 8010588:	f383 8811 	msr	BASEPRI, r3
 801058c:	f3bf 8f6f 	isb	sy
 8010590:	f3bf 8f4f 	dsb	sy
 8010594:	b662      	cpsie	i
 8010596:	60bb      	str	r3, [r7, #8]
}
 8010598:	bf00      	nop
 801059a:	e7fe      	b.n	801059a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105a0:	1e5a      	subs	r2, r3, #1
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d044      	beq.n	801063c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d140      	bne.n	801063c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	3304      	adds	r3, #4
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fe fbd0 	bl	800ed64 <uxListRemove>
 80105c4:	4603      	mov	r3, r0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d115      	bne.n	80105f6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ce:	491f      	ldr	r1, [pc, #124]	; (801064c <xTaskPriorityDisinherit+0x10c>)
 80105d0:	4613      	mov	r3, r2
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	4413      	add	r3, r2
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	440b      	add	r3, r1
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10a      	bne.n	80105f6 <xTaskPriorityDisinherit+0xb6>
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e4:	2201      	movs	r2, #1
 80105e6:	fa02 f303 	lsl.w	r3, r2, r3
 80105ea:	43da      	mvns	r2, r3
 80105ec:	4b18      	ldr	r3, [pc, #96]	; (8010650 <xTaskPriorityDisinherit+0x110>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	4013      	ands	r3, r2
 80105f2:	4a17      	ldr	r2, [pc, #92]	; (8010650 <xTaskPriorityDisinherit+0x110>)
 80105f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010602:	f1c3 0207 	rsb	r2, r3, #7
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060e:	2201      	movs	r2, #1
 8010610:	409a      	lsls	r2, r3
 8010612:	4b0f      	ldr	r3, [pc, #60]	; (8010650 <xTaskPriorityDisinherit+0x110>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	4313      	orrs	r3, r2
 8010618:	4a0d      	ldr	r2, [pc, #52]	; (8010650 <xTaskPriorityDisinherit+0x110>)
 801061a:	6013      	str	r3, [r2, #0]
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010620:	4613      	mov	r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	4a08      	ldr	r2, [pc, #32]	; (801064c <xTaskPriorityDisinherit+0x10c>)
 801062a:	441a      	add	r2, r3
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	3304      	adds	r3, #4
 8010630:	4619      	mov	r1, r3
 8010632:	4610      	mov	r0, r2
 8010634:	f7fe fb39 	bl	800ecaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010638:	2301      	movs	r3, #1
 801063a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801063c:	697b      	ldr	r3, [r7, #20]
	}
 801063e:	4618      	mov	r0, r3
 8010640:	3718      	adds	r7, #24
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	20001004 	.word	0x20001004
 801064c:	20001008 	.word	0x20001008
 8010650:	2000110c 	.word	0x2000110c

08010654 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b084      	sub	sp, #16
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801065e:	4b29      	ldr	r3, [pc, #164]	; (8010704 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010664:	4b28      	ldr	r3, [pc, #160]	; (8010708 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	3304      	adds	r3, #4
 801066a:	4618      	mov	r0, r3
 801066c:	f7fe fb7a 	bl	800ed64 <uxListRemove>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d10b      	bne.n	801068e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010676:	4b24      	ldr	r3, [pc, #144]	; (8010708 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801067c:	2201      	movs	r2, #1
 801067e:	fa02 f303 	lsl.w	r3, r2, r3
 8010682:	43da      	mvns	r2, r3
 8010684:	4b21      	ldr	r3, [pc, #132]	; (801070c <prvAddCurrentTaskToDelayedList+0xb8>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4013      	ands	r3, r2
 801068a:	4a20      	ldr	r2, [pc, #128]	; (801070c <prvAddCurrentTaskToDelayedList+0xb8>)
 801068c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010694:	d10a      	bne.n	80106ac <prvAddCurrentTaskToDelayedList+0x58>
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d007      	beq.n	80106ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801069c:	4b1a      	ldr	r3, [pc, #104]	; (8010708 <prvAddCurrentTaskToDelayedList+0xb4>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	3304      	adds	r3, #4
 80106a2:	4619      	mov	r1, r3
 80106a4:	481a      	ldr	r0, [pc, #104]	; (8010710 <prvAddCurrentTaskToDelayedList+0xbc>)
 80106a6:	f7fe fb00 	bl	800ecaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80106aa:	e026      	b.n	80106fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4413      	add	r3, r2
 80106b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80106b4:	4b14      	ldr	r3, [pc, #80]	; (8010708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	68ba      	ldr	r2, [r7, #8]
 80106ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80106bc:	68ba      	ldr	r2, [r7, #8]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d209      	bcs.n	80106d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106c4:	4b13      	ldr	r3, [pc, #76]	; (8010714 <prvAddCurrentTaskToDelayedList+0xc0>)
 80106c6:	681a      	ldr	r2, [r3, #0]
 80106c8:	4b0f      	ldr	r3, [pc, #60]	; (8010708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	3304      	adds	r3, #4
 80106ce:	4619      	mov	r1, r3
 80106d0:	4610      	mov	r0, r2
 80106d2:	f7fe fb0e 	bl	800ecf2 <vListInsert>
}
 80106d6:	e010      	b.n	80106fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106d8:	4b0f      	ldr	r3, [pc, #60]	; (8010718 <prvAddCurrentTaskToDelayedList+0xc4>)
 80106da:	681a      	ldr	r2, [r3, #0]
 80106dc:	4b0a      	ldr	r3, [pc, #40]	; (8010708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	3304      	adds	r3, #4
 80106e2:	4619      	mov	r1, r3
 80106e4:	4610      	mov	r0, r2
 80106e6:	f7fe fb04 	bl	800ecf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80106ea:	4b0c      	ldr	r3, [pc, #48]	; (801071c <prvAddCurrentTaskToDelayedList+0xc8>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	68ba      	ldr	r2, [r7, #8]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d202      	bcs.n	80106fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80106f4:	4a09      	ldr	r2, [pc, #36]	; (801071c <prvAddCurrentTaskToDelayedList+0xc8>)
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	6013      	str	r3, [r2, #0]
}
 80106fa:	bf00      	nop
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	20001108 	.word	0x20001108
 8010708:	20001004 	.word	0x20001004
 801070c:	2000110c 	.word	0x2000110c
 8010710:	200010f0 	.word	0x200010f0
 8010714:	200010c0 	.word	0x200010c0
 8010718:	200010bc 	.word	0x200010bc
 801071c:	20001124 	.word	0x20001124

08010720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010720:	b480      	push	{r7}
 8010722:	b085      	sub	sp, #20
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	3b04      	subs	r3, #4
 8010730:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	3b04      	subs	r3, #4
 801073e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	f023 0201 	bic.w	r2, r3, #1
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	3b04      	subs	r3, #4
 801074e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010750:	4a0c      	ldr	r2, [pc, #48]	; (8010784 <pxPortInitialiseStack+0x64>)
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	3b14      	subs	r3, #20
 801075a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	3b04      	subs	r3, #4
 8010766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f06f 0202 	mvn.w	r2, #2
 801076e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	3b20      	subs	r3, #32
 8010774:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010776:	68fb      	ldr	r3, [r7, #12]
}
 8010778:	4618      	mov	r0, r3
 801077a:	3714      	adds	r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr
 8010784:	08010789 	.word	0x08010789

08010788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010788:	b480      	push	{r7}
 801078a:	b085      	sub	sp, #20
 801078c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010792:	4b14      	ldr	r3, [pc, #80]	; (80107e4 <prvTaskExitError+0x5c>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801079a:	d00c      	beq.n	80107b6 <prvTaskExitError+0x2e>
	__asm volatile
 801079c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a0:	b672      	cpsid	i
 80107a2:	f383 8811 	msr	BASEPRI, r3
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	f3bf 8f4f 	dsb	sy
 80107ae:	b662      	cpsie	i
 80107b0:	60fb      	str	r3, [r7, #12]
}
 80107b2:	bf00      	nop
 80107b4:	e7fe      	b.n	80107b4 <prvTaskExitError+0x2c>
	__asm volatile
 80107b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ba:	b672      	cpsid	i
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	b662      	cpsie	i
 80107ca:	60bb      	str	r3, [r7, #8]
}
 80107cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80107ce:	bf00      	nop
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d0fc      	beq.n	80107d0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80107d6:	bf00      	nop
 80107d8:	bf00      	nop
 80107da:	3714      	adds	r7, #20
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr
 80107e4:	20000034 	.word	0x20000034
	...

080107f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80107f0:	4b07      	ldr	r3, [pc, #28]	; (8010810 <pxCurrentTCBConst2>)
 80107f2:	6819      	ldr	r1, [r3, #0]
 80107f4:	6808      	ldr	r0, [r1, #0]
 80107f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fa:	f380 8809 	msr	PSP, r0
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f04f 0000 	mov.w	r0, #0
 8010806:	f380 8811 	msr	BASEPRI, r0
 801080a:	4770      	bx	lr
 801080c:	f3af 8000 	nop.w

08010810 <pxCurrentTCBConst2>:
 8010810:	20001004 	.word	0x20001004
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010814:	bf00      	nop
 8010816:	bf00      	nop

08010818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010818:	4808      	ldr	r0, [pc, #32]	; (801083c <prvPortStartFirstTask+0x24>)
 801081a:	6800      	ldr	r0, [r0, #0]
 801081c:	6800      	ldr	r0, [r0, #0]
 801081e:	f380 8808 	msr	MSP, r0
 8010822:	f04f 0000 	mov.w	r0, #0
 8010826:	f380 8814 	msr	CONTROL, r0
 801082a:	b662      	cpsie	i
 801082c:	b661      	cpsie	f
 801082e:	f3bf 8f4f 	dsb	sy
 8010832:	f3bf 8f6f 	isb	sy
 8010836:	df00      	svc	0
 8010838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801083a:	bf00      	nop
 801083c:	e000ed08 	.word	0xe000ed08

08010840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010846:	4b37      	ldr	r3, [pc, #220]	; (8010924 <xPortStartScheduler+0xe4>)
 8010848:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	b2db      	uxtb	r3, r3
 8010850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	22ff      	movs	r2, #255	; 0xff
 8010856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	b2db      	uxtb	r3, r3
 801085e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	b2db      	uxtb	r3, r3
 8010864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010868:	b2da      	uxtb	r2, r3
 801086a:	4b2f      	ldr	r3, [pc, #188]	; (8010928 <xPortStartScheduler+0xe8>)
 801086c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801086e:	4b2f      	ldr	r3, [pc, #188]	; (801092c <xPortStartScheduler+0xec>)
 8010870:	2207      	movs	r2, #7
 8010872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010874:	e009      	b.n	801088a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010876:	4b2d      	ldr	r3, [pc, #180]	; (801092c <xPortStartScheduler+0xec>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	3b01      	subs	r3, #1
 801087c:	4a2b      	ldr	r2, [pc, #172]	; (801092c <xPortStartScheduler+0xec>)
 801087e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010880:	78fb      	ldrb	r3, [r7, #3]
 8010882:	b2db      	uxtb	r3, r3
 8010884:	005b      	lsls	r3, r3, #1
 8010886:	b2db      	uxtb	r3, r3
 8010888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801088a:	78fb      	ldrb	r3, [r7, #3]
 801088c:	b2db      	uxtb	r3, r3
 801088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010892:	2b80      	cmp	r3, #128	; 0x80
 8010894:	d0ef      	beq.n	8010876 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010896:	4b25      	ldr	r3, [pc, #148]	; (801092c <xPortStartScheduler+0xec>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f1c3 0307 	rsb	r3, r3, #7
 801089e:	2b04      	cmp	r3, #4
 80108a0:	d00c      	beq.n	80108bc <xPortStartScheduler+0x7c>
	__asm volatile
 80108a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a6:	b672      	cpsid	i
 80108a8:	f383 8811 	msr	BASEPRI, r3
 80108ac:	f3bf 8f6f 	isb	sy
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	b662      	cpsie	i
 80108b6:	60bb      	str	r3, [r7, #8]
}
 80108b8:	bf00      	nop
 80108ba:	e7fe      	b.n	80108ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80108bc:	4b1b      	ldr	r3, [pc, #108]	; (801092c <xPortStartScheduler+0xec>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	021b      	lsls	r3, r3, #8
 80108c2:	4a1a      	ldr	r2, [pc, #104]	; (801092c <xPortStartScheduler+0xec>)
 80108c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80108c6:	4b19      	ldr	r3, [pc, #100]	; (801092c <xPortStartScheduler+0xec>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80108ce:	4a17      	ldr	r2, [pc, #92]	; (801092c <xPortStartScheduler+0xec>)
 80108d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	b2da      	uxtb	r2, r3
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80108da:	4b15      	ldr	r3, [pc, #84]	; (8010930 <xPortStartScheduler+0xf0>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	4a14      	ldr	r2, [pc, #80]	; (8010930 <xPortStartScheduler+0xf0>)
 80108e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80108e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80108e6:	4b12      	ldr	r3, [pc, #72]	; (8010930 <xPortStartScheduler+0xf0>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4a11      	ldr	r2, [pc, #68]	; (8010930 <xPortStartScheduler+0xf0>)
 80108ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80108f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80108f2:	f000 f8dd 	bl	8010ab0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80108f6:	4b0f      	ldr	r3, [pc, #60]	; (8010934 <xPortStartScheduler+0xf4>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80108fc:	f000 f8fc 	bl	8010af8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010900:	4b0d      	ldr	r3, [pc, #52]	; (8010938 <xPortStartScheduler+0xf8>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a0c      	ldr	r2, [pc, #48]	; (8010938 <xPortStartScheduler+0xf8>)
 8010906:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801090a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801090c:	f7ff ff84 	bl	8010818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010910:	f7ff fb8a 	bl	8010028 <vTaskSwitchContext>
	prvTaskExitError();
 8010914:	f7ff ff38 	bl	8010788 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010918:	2300      	movs	r3, #0
}
 801091a:	4618      	mov	r0, r3
 801091c:	3710      	adds	r7, #16
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	e000e400 	.word	0xe000e400
 8010928:	20001130 	.word	0x20001130
 801092c:	20001134 	.word	0x20001134
 8010930:	e000ed20 	.word	0xe000ed20
 8010934:	20000034 	.word	0x20000034
 8010938:	e000ef34 	.word	0xe000ef34

0801093c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
	__asm volatile
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	b672      	cpsid	i
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	b662      	cpsie	i
 8010956:	607b      	str	r3, [r7, #4]
}
 8010958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801095a:	4b10      	ldr	r3, [pc, #64]	; (801099c <vPortEnterCritical+0x60>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	3301      	adds	r3, #1
 8010960:	4a0e      	ldr	r2, [pc, #56]	; (801099c <vPortEnterCritical+0x60>)
 8010962:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010964:	4b0d      	ldr	r3, [pc, #52]	; (801099c <vPortEnterCritical+0x60>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2b01      	cmp	r3, #1
 801096a:	d111      	bne.n	8010990 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801096c:	4b0c      	ldr	r3, [pc, #48]	; (80109a0 <vPortEnterCritical+0x64>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	b2db      	uxtb	r3, r3
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00c      	beq.n	8010990 <vPortEnterCritical+0x54>
	__asm volatile
 8010976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097a:	b672      	cpsid	i
 801097c:	f383 8811 	msr	BASEPRI, r3
 8010980:	f3bf 8f6f 	isb	sy
 8010984:	f3bf 8f4f 	dsb	sy
 8010988:	b662      	cpsie	i
 801098a:	603b      	str	r3, [r7, #0]
}
 801098c:	bf00      	nop
 801098e:	e7fe      	b.n	801098e <vPortEnterCritical+0x52>
	}
}
 8010990:	bf00      	nop
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr
 801099c:	20000034 	.word	0x20000034
 80109a0:	e000ed04 	.word	0xe000ed04

080109a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80109aa:	4b13      	ldr	r3, [pc, #76]	; (80109f8 <vPortExitCritical+0x54>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d10c      	bne.n	80109cc <vPortExitCritical+0x28>
	__asm volatile
 80109b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b6:	b672      	cpsid	i
 80109b8:	f383 8811 	msr	BASEPRI, r3
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f3bf 8f4f 	dsb	sy
 80109c4:	b662      	cpsie	i
 80109c6:	607b      	str	r3, [r7, #4]
}
 80109c8:	bf00      	nop
 80109ca:	e7fe      	b.n	80109ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80109cc:	4b0a      	ldr	r3, [pc, #40]	; (80109f8 <vPortExitCritical+0x54>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	3b01      	subs	r3, #1
 80109d2:	4a09      	ldr	r2, [pc, #36]	; (80109f8 <vPortExitCritical+0x54>)
 80109d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80109d6:	4b08      	ldr	r3, [pc, #32]	; (80109f8 <vPortExitCritical+0x54>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d105      	bne.n	80109ea <vPortExitCritical+0x46>
 80109de:	2300      	movs	r3, #0
 80109e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	f383 8811 	msr	BASEPRI, r3
}
 80109e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80109ea:	bf00      	nop
 80109ec:	370c      	adds	r7, #12
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr
 80109f6:	bf00      	nop
 80109f8:	20000034 	.word	0x20000034
 80109fc:	00000000 	.word	0x00000000

08010a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010a00:	f3ef 8009 	mrs	r0, PSP
 8010a04:	f3bf 8f6f 	isb	sy
 8010a08:	4b15      	ldr	r3, [pc, #84]	; (8010a60 <pxCurrentTCBConst>)
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	f01e 0f10 	tst.w	lr, #16
 8010a10:	bf08      	it	eq
 8010a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a1a:	6010      	str	r0, [r2, #0]
 8010a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010a24:	b672      	cpsid	i
 8010a26:	f380 8811 	msr	BASEPRI, r0
 8010a2a:	f3bf 8f4f 	dsb	sy
 8010a2e:	f3bf 8f6f 	isb	sy
 8010a32:	b662      	cpsie	i
 8010a34:	f7ff faf8 	bl	8010028 <vTaskSwitchContext>
 8010a38:	f04f 0000 	mov.w	r0, #0
 8010a3c:	f380 8811 	msr	BASEPRI, r0
 8010a40:	bc09      	pop	{r0, r3}
 8010a42:	6819      	ldr	r1, [r3, #0]
 8010a44:	6808      	ldr	r0, [r1, #0]
 8010a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4a:	f01e 0f10 	tst.w	lr, #16
 8010a4e:	bf08      	it	eq
 8010a50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a54:	f380 8809 	msr	PSP, r0
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop

08010a60 <pxCurrentTCBConst>:
 8010a60:	20001004 	.word	0x20001004
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010a64:	bf00      	nop
 8010a66:	bf00      	nop

08010a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	b672      	cpsid	i
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	b662      	cpsie	i
 8010a82:	607b      	str	r3, [r7, #4]
}
 8010a84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a86:	f7ff fa15 	bl	800feb4 <xTaskIncrementTick>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d003      	beq.n	8010a98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a90:	4b06      	ldr	r3, [pc, #24]	; (8010aac <SysTick_Handler+0x44>)
 8010a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a96:	601a      	str	r2, [r3, #0]
 8010a98:	2300      	movs	r3, #0
 8010a9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	f383 8811 	msr	BASEPRI, r3
}
 8010aa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010aa4:	bf00      	nop
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	e000ed04 	.word	0xe000ed04

08010ab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010ab4:	4b0b      	ldr	r3, [pc, #44]	; (8010ae4 <vPortSetupTimerInterrupt+0x34>)
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010aba:	4b0b      	ldr	r3, [pc, #44]	; (8010ae8 <vPortSetupTimerInterrupt+0x38>)
 8010abc:	2200      	movs	r2, #0
 8010abe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010ac0:	4b0a      	ldr	r3, [pc, #40]	; (8010aec <vPortSetupTimerInterrupt+0x3c>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4a0a      	ldr	r2, [pc, #40]	; (8010af0 <vPortSetupTimerInterrupt+0x40>)
 8010ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8010aca:	099b      	lsrs	r3, r3, #6
 8010acc:	4a09      	ldr	r2, [pc, #36]	; (8010af4 <vPortSetupTimerInterrupt+0x44>)
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010ad2:	4b04      	ldr	r3, [pc, #16]	; (8010ae4 <vPortSetupTimerInterrupt+0x34>)
 8010ad4:	2207      	movs	r2, #7
 8010ad6:	601a      	str	r2, [r3, #0]
}
 8010ad8:	bf00      	nop
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop
 8010ae4:	e000e010 	.word	0xe000e010
 8010ae8:	e000e018 	.word	0xe000e018
 8010aec:	2000001c 	.word	0x2000001c
 8010af0:	10624dd3 	.word	0x10624dd3
 8010af4:	e000e014 	.word	0xe000e014

08010af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010af8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010b08 <vPortEnableVFP+0x10>
 8010afc:	6801      	ldr	r1, [r0, #0]
 8010afe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010b02:	6001      	str	r1, [r0, #0]
 8010b04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010b06:	bf00      	nop
 8010b08:	e000ed88 	.word	0xe000ed88

08010b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010b12:	f3ef 8305 	mrs	r3, IPSR
 8010b16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2b0f      	cmp	r3, #15
 8010b1c:	d916      	bls.n	8010b4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010b1e:	4a19      	ldr	r2, [pc, #100]	; (8010b84 <vPortValidateInterruptPriority+0x78>)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	4413      	add	r3, r2
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010b28:	4b17      	ldr	r3, [pc, #92]	; (8010b88 <vPortValidateInterruptPriority+0x7c>)
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	7afa      	ldrb	r2, [r7, #11]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d20c      	bcs.n	8010b4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b36:	b672      	cpsid	i
 8010b38:	f383 8811 	msr	BASEPRI, r3
 8010b3c:	f3bf 8f6f 	isb	sy
 8010b40:	f3bf 8f4f 	dsb	sy
 8010b44:	b662      	cpsie	i
 8010b46:	607b      	str	r3, [r7, #4]
}
 8010b48:	bf00      	nop
 8010b4a:	e7fe      	b.n	8010b4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010b4c:	4b0f      	ldr	r3, [pc, #60]	; (8010b8c <vPortValidateInterruptPriority+0x80>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010b54:	4b0e      	ldr	r3, [pc, #56]	; (8010b90 <vPortValidateInterruptPriority+0x84>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d90c      	bls.n	8010b76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b60:	b672      	cpsid	i
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	b662      	cpsie	i
 8010b70:	603b      	str	r3, [r7, #0]
}
 8010b72:	bf00      	nop
 8010b74:	e7fe      	b.n	8010b74 <vPortValidateInterruptPriority+0x68>
	}
 8010b76:	bf00      	nop
 8010b78:	3714      	adds	r7, #20
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	e000e3f0 	.word	0xe000e3f0
 8010b88:	20001130 	.word	0x20001130
 8010b8c:	e000ed0c 	.word	0xe000ed0c
 8010b90:	20001134 	.word	0x20001134

08010b94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b08a      	sub	sp, #40	; 0x28
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010ba0:	f7ff f8ba 	bl	800fd18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010ba4:	4b5e      	ldr	r3, [pc, #376]	; (8010d20 <pvPortMalloc+0x18c>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d101      	bne.n	8010bb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010bac:	f000 f920 	bl	8010df0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010bb0:	4b5c      	ldr	r3, [pc, #368]	; (8010d24 <pvPortMalloc+0x190>)
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	4013      	ands	r3, r2
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f040 8092 	bne.w	8010ce2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d01f      	beq.n	8010c04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010bc4:	2208      	movs	r2, #8
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4413      	add	r3, r2
 8010bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f003 0307 	and.w	r3, r3, #7
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d016      	beq.n	8010c04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f023 0307 	bic.w	r3, r3, #7
 8010bdc:	3308      	adds	r3, #8
 8010bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f003 0307 	and.w	r3, r3, #7
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00c      	beq.n	8010c04 <pvPortMalloc+0x70>
	__asm volatile
 8010bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bee:	b672      	cpsid	i
 8010bf0:	f383 8811 	msr	BASEPRI, r3
 8010bf4:	f3bf 8f6f 	isb	sy
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	b662      	cpsie	i
 8010bfe:	617b      	str	r3, [r7, #20]
}
 8010c00:	bf00      	nop
 8010c02:	e7fe      	b.n	8010c02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d06b      	beq.n	8010ce2 <pvPortMalloc+0x14e>
 8010c0a:	4b47      	ldr	r3, [pc, #284]	; (8010d28 <pvPortMalloc+0x194>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d866      	bhi.n	8010ce2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010c14:	4b45      	ldr	r3, [pc, #276]	; (8010d2c <pvPortMalloc+0x198>)
 8010c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010c18:	4b44      	ldr	r3, [pc, #272]	; (8010d2c <pvPortMalloc+0x198>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c1e:	e004      	b.n	8010c2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d903      	bls.n	8010c3c <pvPortMalloc+0xa8>
 8010c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1f1      	bne.n	8010c20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010c3c:	4b38      	ldr	r3, [pc, #224]	; (8010d20 <pvPortMalloc+0x18c>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d04d      	beq.n	8010ce2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010c46:	6a3b      	ldr	r3, [r7, #32]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2208      	movs	r2, #8
 8010c4c:	4413      	add	r3, r2
 8010c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	6a3b      	ldr	r3, [r7, #32]
 8010c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	685a      	ldr	r2, [r3, #4]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	1ad2      	subs	r2, r2, r3
 8010c60:	2308      	movs	r3, #8
 8010c62:	005b      	lsls	r3, r3, #1
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d921      	bls.n	8010cac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c70:	69bb      	ldr	r3, [r7, #24]
 8010c72:	f003 0307 	and.w	r3, r3, #7
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00c      	beq.n	8010c94 <pvPortMalloc+0x100>
	__asm volatile
 8010c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7e:	b672      	cpsid	i
 8010c80:	f383 8811 	msr	BASEPRI, r3
 8010c84:	f3bf 8f6f 	isb	sy
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	b662      	cpsie	i
 8010c8e:	613b      	str	r3, [r7, #16]
}
 8010c90:	bf00      	nop
 8010c92:	e7fe      	b.n	8010c92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c96:	685a      	ldr	r2, [r3, #4]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	1ad2      	subs	r2, r2, r3
 8010c9c:	69bb      	ldr	r3, [r7, #24]
 8010c9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010ca6:	69b8      	ldr	r0, [r7, #24]
 8010ca8:	f000 f904 	bl	8010eb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010cac:	4b1e      	ldr	r3, [pc, #120]	; (8010d28 <pvPortMalloc+0x194>)
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	4a1c      	ldr	r2, [pc, #112]	; (8010d28 <pvPortMalloc+0x194>)
 8010cb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010cba:	4b1b      	ldr	r3, [pc, #108]	; (8010d28 <pvPortMalloc+0x194>)
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	4b1c      	ldr	r3, [pc, #112]	; (8010d30 <pvPortMalloc+0x19c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d203      	bcs.n	8010cce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010cc6:	4b18      	ldr	r3, [pc, #96]	; (8010d28 <pvPortMalloc+0x194>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4a19      	ldr	r2, [pc, #100]	; (8010d30 <pvPortMalloc+0x19c>)
 8010ccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd0:	685a      	ldr	r2, [r3, #4]
 8010cd2:	4b14      	ldr	r3, [pc, #80]	; (8010d24 <pvPortMalloc+0x190>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	431a      	orrs	r2, r3
 8010cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cde:	2200      	movs	r2, #0
 8010ce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010ce2:	f7ff f827 	bl	800fd34 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d101      	bne.n	8010cf0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010cec:	f7f0 f904 	bl	8000ef8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	f003 0307 	and.w	r3, r3, #7
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d00c      	beq.n	8010d14 <pvPortMalloc+0x180>
	__asm volatile
 8010cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfe:	b672      	cpsid	i
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	b662      	cpsie	i
 8010d0e:	60fb      	str	r3, [r7, #12]
}
 8010d10:	bf00      	nop
 8010d12:	e7fe      	b.n	8010d12 <pvPortMalloc+0x17e>
	return pvReturn;
 8010d14:	69fb      	ldr	r3, [r7, #28]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3728      	adds	r7, #40	; 0x28
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	20009140 	.word	0x20009140
 8010d24:	2000914c 	.word	0x2000914c
 8010d28:	20009144 	.word	0x20009144
 8010d2c:	20009138 	.word	0x20009138
 8010d30:	20009148 	.word	0x20009148

08010d34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d04c      	beq.n	8010de0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d46:	2308      	movs	r3, #8
 8010d48:	425b      	negs	r3, r3
 8010d4a:	697a      	ldr	r2, [r7, #20]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	685a      	ldr	r2, [r3, #4]
 8010d58:	4b23      	ldr	r3, [pc, #140]	; (8010de8 <vPortFree+0xb4>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d10c      	bne.n	8010d7c <vPortFree+0x48>
	__asm volatile
 8010d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d66:	b672      	cpsid	i
 8010d68:	f383 8811 	msr	BASEPRI, r3
 8010d6c:	f3bf 8f6f 	isb	sy
 8010d70:	f3bf 8f4f 	dsb	sy
 8010d74:	b662      	cpsie	i
 8010d76:	60fb      	str	r3, [r7, #12]
}
 8010d78:	bf00      	nop
 8010d7a:	e7fe      	b.n	8010d7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d00c      	beq.n	8010d9e <vPortFree+0x6a>
	__asm volatile
 8010d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d88:	b672      	cpsid	i
 8010d8a:	f383 8811 	msr	BASEPRI, r3
 8010d8e:	f3bf 8f6f 	isb	sy
 8010d92:	f3bf 8f4f 	dsb	sy
 8010d96:	b662      	cpsie	i
 8010d98:	60bb      	str	r3, [r7, #8]
}
 8010d9a:	bf00      	nop
 8010d9c:	e7fe      	b.n	8010d9c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	685a      	ldr	r2, [r3, #4]
 8010da2:	4b11      	ldr	r3, [pc, #68]	; (8010de8 <vPortFree+0xb4>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4013      	ands	r3, r2
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d019      	beq.n	8010de0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d115      	bne.n	8010de0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	685a      	ldr	r2, [r3, #4]
 8010db8:	4b0b      	ldr	r3, [pc, #44]	; (8010de8 <vPortFree+0xb4>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	43db      	mvns	r3, r3
 8010dbe:	401a      	ands	r2, r3
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010dc4:	f7fe ffa8 	bl	800fd18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	685a      	ldr	r2, [r3, #4]
 8010dcc:	4b07      	ldr	r3, [pc, #28]	; (8010dec <vPortFree+0xb8>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4413      	add	r3, r2
 8010dd2:	4a06      	ldr	r2, [pc, #24]	; (8010dec <vPortFree+0xb8>)
 8010dd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010dd6:	6938      	ldr	r0, [r7, #16]
 8010dd8:	f000 f86c 	bl	8010eb4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010ddc:	f7fe ffaa 	bl	800fd34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010de0:	bf00      	nop
 8010de2:	3718      	adds	r7, #24
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	2000914c 	.word	0x2000914c
 8010dec:	20009144 	.word	0x20009144

08010df0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010df0:	b480      	push	{r7}
 8010df2:	b085      	sub	sp, #20
 8010df4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010dfc:	4b27      	ldr	r3, [pc, #156]	; (8010e9c <prvHeapInit+0xac>)
 8010dfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f003 0307 	and.w	r3, r3, #7
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00c      	beq.n	8010e24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	3307      	adds	r3, #7
 8010e0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f023 0307 	bic.w	r3, r3, #7
 8010e16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010e18:	68ba      	ldr	r2, [r7, #8]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	1ad3      	subs	r3, r2, r3
 8010e1e:	4a1f      	ldr	r2, [pc, #124]	; (8010e9c <prvHeapInit+0xac>)
 8010e20:	4413      	add	r3, r2
 8010e22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010e28:	4a1d      	ldr	r2, [pc, #116]	; (8010ea0 <prvHeapInit+0xb0>)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010e2e:	4b1c      	ldr	r3, [pc, #112]	; (8010ea0 <prvHeapInit+0xb0>)
 8010e30:	2200      	movs	r2, #0
 8010e32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	68ba      	ldr	r2, [r7, #8]
 8010e38:	4413      	add	r3, r2
 8010e3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010e3c:	2208      	movs	r2, #8
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	f023 0307 	bic.w	r3, r3, #7
 8010e4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	4a15      	ldr	r2, [pc, #84]	; (8010ea4 <prvHeapInit+0xb4>)
 8010e50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e52:	4b14      	ldr	r3, [pc, #80]	; (8010ea4 <prvHeapInit+0xb4>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2200      	movs	r2, #0
 8010e58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e5a:	4b12      	ldr	r3, [pc, #72]	; (8010ea4 <prvHeapInit+0xb4>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	68fa      	ldr	r2, [r7, #12]
 8010e6a:	1ad2      	subs	r2, r2, r3
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010e70:	4b0c      	ldr	r3, [pc, #48]	; (8010ea4 <prvHeapInit+0xb4>)
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	4a0a      	ldr	r2, [pc, #40]	; (8010ea8 <prvHeapInit+0xb8>)
 8010e7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	4a09      	ldr	r2, [pc, #36]	; (8010eac <prvHeapInit+0xbc>)
 8010e86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e88:	4b09      	ldr	r3, [pc, #36]	; (8010eb0 <prvHeapInit+0xc0>)
 8010e8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e8e:	601a      	str	r2, [r3, #0]
}
 8010e90:	bf00      	nop
 8010e92:	3714      	adds	r7, #20
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	20001138 	.word	0x20001138
 8010ea0:	20009138 	.word	0x20009138
 8010ea4:	20009140 	.word	0x20009140
 8010ea8:	20009148 	.word	0x20009148
 8010eac:	20009144 	.word	0x20009144
 8010eb0:	2000914c 	.word	0x2000914c

08010eb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ebc:	4b28      	ldr	r3, [pc, #160]	; (8010f60 <prvInsertBlockIntoFreeList+0xac>)
 8010ebe:	60fb      	str	r3, [r7, #12]
 8010ec0:	e002      	b.n	8010ec8 <prvInsertBlockIntoFreeList+0x14>
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	60fb      	str	r3, [r7, #12]
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d8f7      	bhi.n	8010ec2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	68ba      	ldr	r2, [r7, #8]
 8010edc:	4413      	add	r3, r2
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d108      	bne.n	8010ef6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	685a      	ldr	r2, [r3, #4]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	441a      	add	r2, r3
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	68ba      	ldr	r2, [r7, #8]
 8010f00:	441a      	add	r2, r3
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d118      	bne.n	8010f3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	4b15      	ldr	r3, [pc, #84]	; (8010f64 <prvInsertBlockIntoFreeList+0xb0>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d00d      	beq.n	8010f32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	685a      	ldr	r2, [r3, #4]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	441a      	add	r2, r3
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	601a      	str	r2, [r3, #0]
 8010f30:	e008      	b.n	8010f44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f32:	4b0c      	ldr	r3, [pc, #48]	; (8010f64 <prvInsertBlockIntoFreeList+0xb0>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	e003      	b.n	8010f44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d002      	beq.n	8010f52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f52:	bf00      	nop
 8010f54:	3714      	adds	r7, #20
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr
 8010f5e:	bf00      	nop
 8010f60:	20009138 	.word	0x20009138
 8010f64:	20009140 	.word	0x20009140

08010f68 <malloc>:
 8010f68:	4b02      	ldr	r3, [pc, #8]	; (8010f74 <malloc+0xc>)
 8010f6a:	4601      	mov	r1, r0
 8010f6c:	6818      	ldr	r0, [r3, #0]
 8010f6e:	f000 b82b 	b.w	8010fc8 <_malloc_r>
 8010f72:	bf00      	nop
 8010f74:	20000084 	.word	0x20000084

08010f78 <free>:
 8010f78:	4b02      	ldr	r3, [pc, #8]	; (8010f84 <free+0xc>)
 8010f7a:	4601      	mov	r1, r0
 8010f7c:	6818      	ldr	r0, [r3, #0]
 8010f7e:	f000 ba89 	b.w	8011494 <_free_r>
 8010f82:	bf00      	nop
 8010f84:	20000084 	.word	0x20000084

08010f88 <sbrk_aligned>:
 8010f88:	b570      	push	{r4, r5, r6, lr}
 8010f8a:	4e0e      	ldr	r6, [pc, #56]	; (8010fc4 <sbrk_aligned+0x3c>)
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	6831      	ldr	r1, [r6, #0]
 8010f90:	4605      	mov	r5, r0
 8010f92:	b911      	cbnz	r1, 8010f9a <sbrk_aligned+0x12>
 8010f94:	f000 fa34 	bl	8011400 <_sbrk_r>
 8010f98:	6030      	str	r0, [r6, #0]
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f000 fa2f 	bl	8011400 <_sbrk_r>
 8010fa2:	1c43      	adds	r3, r0, #1
 8010fa4:	d00a      	beq.n	8010fbc <sbrk_aligned+0x34>
 8010fa6:	1cc4      	adds	r4, r0, #3
 8010fa8:	f024 0403 	bic.w	r4, r4, #3
 8010fac:	42a0      	cmp	r0, r4
 8010fae:	d007      	beq.n	8010fc0 <sbrk_aligned+0x38>
 8010fb0:	1a21      	subs	r1, r4, r0
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	f000 fa24 	bl	8011400 <_sbrk_r>
 8010fb8:	3001      	adds	r0, #1
 8010fba:	d101      	bne.n	8010fc0 <sbrk_aligned+0x38>
 8010fbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	bd70      	pop	{r4, r5, r6, pc}
 8010fc4:	20009154 	.word	0x20009154

08010fc8 <_malloc_r>:
 8010fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fcc:	1ccd      	adds	r5, r1, #3
 8010fce:	f025 0503 	bic.w	r5, r5, #3
 8010fd2:	3508      	adds	r5, #8
 8010fd4:	2d0c      	cmp	r5, #12
 8010fd6:	bf38      	it	cc
 8010fd8:	250c      	movcc	r5, #12
 8010fda:	2d00      	cmp	r5, #0
 8010fdc:	4607      	mov	r7, r0
 8010fde:	db01      	blt.n	8010fe4 <_malloc_r+0x1c>
 8010fe0:	42a9      	cmp	r1, r5
 8010fe2:	d905      	bls.n	8010ff0 <_malloc_r+0x28>
 8010fe4:	230c      	movs	r3, #12
 8010fe6:	603b      	str	r3, [r7, #0]
 8010fe8:	2600      	movs	r6, #0
 8010fea:	4630      	mov	r0, r6
 8010fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ff0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80110c4 <_malloc_r+0xfc>
 8010ff4:	f000 f868 	bl	80110c8 <__malloc_lock>
 8010ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8010ffc:	461c      	mov	r4, r3
 8010ffe:	bb5c      	cbnz	r4, 8011058 <_malloc_r+0x90>
 8011000:	4629      	mov	r1, r5
 8011002:	4638      	mov	r0, r7
 8011004:	f7ff ffc0 	bl	8010f88 <sbrk_aligned>
 8011008:	1c43      	adds	r3, r0, #1
 801100a:	4604      	mov	r4, r0
 801100c:	d155      	bne.n	80110ba <_malloc_r+0xf2>
 801100e:	f8d8 4000 	ldr.w	r4, [r8]
 8011012:	4626      	mov	r6, r4
 8011014:	2e00      	cmp	r6, #0
 8011016:	d145      	bne.n	80110a4 <_malloc_r+0xdc>
 8011018:	2c00      	cmp	r4, #0
 801101a:	d048      	beq.n	80110ae <_malloc_r+0xe6>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	4631      	mov	r1, r6
 8011020:	4638      	mov	r0, r7
 8011022:	eb04 0903 	add.w	r9, r4, r3
 8011026:	f000 f9eb 	bl	8011400 <_sbrk_r>
 801102a:	4581      	cmp	r9, r0
 801102c:	d13f      	bne.n	80110ae <_malloc_r+0xe6>
 801102e:	6821      	ldr	r1, [r4, #0]
 8011030:	1a6d      	subs	r5, r5, r1
 8011032:	4629      	mov	r1, r5
 8011034:	4638      	mov	r0, r7
 8011036:	f7ff ffa7 	bl	8010f88 <sbrk_aligned>
 801103a:	3001      	adds	r0, #1
 801103c:	d037      	beq.n	80110ae <_malloc_r+0xe6>
 801103e:	6823      	ldr	r3, [r4, #0]
 8011040:	442b      	add	r3, r5
 8011042:	6023      	str	r3, [r4, #0]
 8011044:	f8d8 3000 	ldr.w	r3, [r8]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d038      	beq.n	80110be <_malloc_r+0xf6>
 801104c:	685a      	ldr	r2, [r3, #4]
 801104e:	42a2      	cmp	r2, r4
 8011050:	d12b      	bne.n	80110aa <_malloc_r+0xe2>
 8011052:	2200      	movs	r2, #0
 8011054:	605a      	str	r2, [r3, #4]
 8011056:	e00f      	b.n	8011078 <_malloc_r+0xb0>
 8011058:	6822      	ldr	r2, [r4, #0]
 801105a:	1b52      	subs	r2, r2, r5
 801105c:	d41f      	bmi.n	801109e <_malloc_r+0xd6>
 801105e:	2a0b      	cmp	r2, #11
 8011060:	d917      	bls.n	8011092 <_malloc_r+0xca>
 8011062:	1961      	adds	r1, r4, r5
 8011064:	42a3      	cmp	r3, r4
 8011066:	6025      	str	r5, [r4, #0]
 8011068:	bf18      	it	ne
 801106a:	6059      	strne	r1, [r3, #4]
 801106c:	6863      	ldr	r3, [r4, #4]
 801106e:	bf08      	it	eq
 8011070:	f8c8 1000 	streq.w	r1, [r8]
 8011074:	5162      	str	r2, [r4, r5]
 8011076:	604b      	str	r3, [r1, #4]
 8011078:	4638      	mov	r0, r7
 801107a:	f104 060b 	add.w	r6, r4, #11
 801107e:	f000 f829 	bl	80110d4 <__malloc_unlock>
 8011082:	f026 0607 	bic.w	r6, r6, #7
 8011086:	1d23      	adds	r3, r4, #4
 8011088:	1af2      	subs	r2, r6, r3
 801108a:	d0ae      	beq.n	8010fea <_malloc_r+0x22>
 801108c:	1b9b      	subs	r3, r3, r6
 801108e:	50a3      	str	r3, [r4, r2]
 8011090:	e7ab      	b.n	8010fea <_malloc_r+0x22>
 8011092:	42a3      	cmp	r3, r4
 8011094:	6862      	ldr	r2, [r4, #4]
 8011096:	d1dd      	bne.n	8011054 <_malloc_r+0x8c>
 8011098:	f8c8 2000 	str.w	r2, [r8]
 801109c:	e7ec      	b.n	8011078 <_malloc_r+0xb0>
 801109e:	4623      	mov	r3, r4
 80110a0:	6864      	ldr	r4, [r4, #4]
 80110a2:	e7ac      	b.n	8010ffe <_malloc_r+0x36>
 80110a4:	4634      	mov	r4, r6
 80110a6:	6876      	ldr	r6, [r6, #4]
 80110a8:	e7b4      	b.n	8011014 <_malloc_r+0x4c>
 80110aa:	4613      	mov	r3, r2
 80110ac:	e7cc      	b.n	8011048 <_malloc_r+0x80>
 80110ae:	230c      	movs	r3, #12
 80110b0:	603b      	str	r3, [r7, #0]
 80110b2:	4638      	mov	r0, r7
 80110b4:	f000 f80e 	bl	80110d4 <__malloc_unlock>
 80110b8:	e797      	b.n	8010fea <_malloc_r+0x22>
 80110ba:	6025      	str	r5, [r4, #0]
 80110bc:	e7dc      	b.n	8011078 <_malloc_r+0xb0>
 80110be:	605b      	str	r3, [r3, #4]
 80110c0:	deff      	udf	#255	; 0xff
 80110c2:	bf00      	nop
 80110c4:	20009150 	.word	0x20009150

080110c8 <__malloc_lock>:
 80110c8:	4801      	ldr	r0, [pc, #4]	; (80110d0 <__malloc_lock+0x8>)
 80110ca:	f000 b9d3 	b.w	8011474 <__retarget_lock_acquire_recursive>
 80110ce:	bf00      	nop
 80110d0:	20009294 	.word	0x20009294

080110d4 <__malloc_unlock>:
 80110d4:	4801      	ldr	r0, [pc, #4]	; (80110dc <__malloc_unlock+0x8>)
 80110d6:	f000 b9ce 	b.w	8011476 <__retarget_lock_release_recursive>
 80110da:	bf00      	nop
 80110dc:	20009294 	.word	0x20009294

080110e0 <swapfunc>:
 80110e0:	2b02      	cmp	r3, #2
 80110e2:	b510      	push	{r4, lr}
 80110e4:	d00a      	beq.n	80110fc <swapfunc+0x1c>
 80110e6:	0892      	lsrs	r2, r2, #2
 80110e8:	3a01      	subs	r2, #1
 80110ea:	6803      	ldr	r3, [r0, #0]
 80110ec:	680c      	ldr	r4, [r1, #0]
 80110ee:	f840 4b04 	str.w	r4, [r0], #4
 80110f2:	2a00      	cmp	r2, #0
 80110f4:	f841 3b04 	str.w	r3, [r1], #4
 80110f8:	dcf6      	bgt.n	80110e8 <swapfunc+0x8>
 80110fa:	bd10      	pop	{r4, pc}
 80110fc:	4402      	add	r2, r0
 80110fe:	780c      	ldrb	r4, [r1, #0]
 8011100:	7803      	ldrb	r3, [r0, #0]
 8011102:	f800 4b01 	strb.w	r4, [r0], #1
 8011106:	f801 3b01 	strb.w	r3, [r1], #1
 801110a:	1a13      	subs	r3, r2, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	dcf6      	bgt.n	80110fe <swapfunc+0x1e>
 8011110:	e7f3      	b.n	80110fa <swapfunc+0x1a>

08011112 <med3.constprop.0>:
 8011112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011114:	460c      	mov	r4, r1
 8011116:	4615      	mov	r5, r2
 8011118:	4607      	mov	r7, r0
 801111a:	461e      	mov	r6, r3
 801111c:	4798      	blx	r3
 801111e:	2800      	cmp	r0, #0
 8011120:	4629      	mov	r1, r5
 8011122:	4620      	mov	r0, r4
 8011124:	da0a      	bge.n	801113c <med3.constprop.0+0x2a>
 8011126:	47b0      	blx	r6
 8011128:	2800      	cmp	r0, #0
 801112a:	db05      	blt.n	8011138 <med3.constprop.0+0x26>
 801112c:	4629      	mov	r1, r5
 801112e:	4638      	mov	r0, r7
 8011130:	47b0      	blx	r6
 8011132:	2800      	cmp	r0, #0
 8011134:	db0a      	blt.n	801114c <med3.constprop.0+0x3a>
 8011136:	463c      	mov	r4, r7
 8011138:	4620      	mov	r0, r4
 801113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801113c:	47b0      	blx	r6
 801113e:	2800      	cmp	r0, #0
 8011140:	dcfa      	bgt.n	8011138 <med3.constprop.0+0x26>
 8011142:	4629      	mov	r1, r5
 8011144:	4638      	mov	r0, r7
 8011146:	47b0      	blx	r6
 8011148:	2800      	cmp	r0, #0
 801114a:	dbf4      	blt.n	8011136 <med3.constprop.0+0x24>
 801114c:	462c      	mov	r4, r5
 801114e:	e7f3      	b.n	8011138 <med3.constprop.0+0x26>

08011150 <qsort>:
 8011150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	469a      	mov	sl, r3
 8011156:	ea40 0302 	orr.w	r3, r0, r2
 801115a:	079b      	lsls	r3, r3, #30
 801115c:	b097      	sub	sp, #92	; 0x5c
 801115e:	4606      	mov	r6, r0
 8011160:	4614      	mov	r4, r2
 8011162:	d11a      	bne.n	801119a <qsort+0x4a>
 8011164:	f1b2 0804 	subs.w	r8, r2, #4
 8011168:	bf18      	it	ne
 801116a:	f04f 0801 	movne.w	r8, #1
 801116e:	2300      	movs	r3, #0
 8011170:	9302      	str	r3, [sp, #8]
 8011172:	1933      	adds	r3, r6, r4
 8011174:	fb04 f701 	mul.w	r7, r4, r1
 8011178:	9301      	str	r3, [sp, #4]
 801117a:	2906      	cmp	r1, #6
 801117c:	eb06 0307 	add.w	r3, r6, r7
 8011180:	9303      	str	r3, [sp, #12]
 8011182:	d82a      	bhi.n	80111da <qsort+0x8a>
 8011184:	9b01      	ldr	r3, [sp, #4]
 8011186:	9a03      	ldr	r2, [sp, #12]
 8011188:	4293      	cmp	r3, r2
 801118a:	d310      	bcc.n	80111ae <qsort+0x5e>
 801118c:	9b02      	ldr	r3, [sp, #8]
 801118e:	2b00      	cmp	r3, #0
 8011190:	f040 811e 	bne.w	80113d0 <qsort+0x280>
 8011194:	b017      	add	sp, #92	; 0x5c
 8011196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801119a:	f04f 0802 	mov.w	r8, #2
 801119e:	e7e6      	b.n	801116e <qsort+0x1e>
 80111a0:	4643      	mov	r3, r8
 80111a2:	4622      	mov	r2, r4
 80111a4:	4639      	mov	r1, r7
 80111a6:	4628      	mov	r0, r5
 80111a8:	f7ff ff9a 	bl	80110e0 <swapfunc>
 80111ac:	e00e      	b.n	80111cc <qsort+0x7c>
 80111ae:	9d01      	ldr	r5, [sp, #4]
 80111b0:	e00d      	b.n	80111ce <qsort+0x7e>
 80111b2:	1b2f      	subs	r7, r5, r4
 80111b4:	4629      	mov	r1, r5
 80111b6:	4638      	mov	r0, r7
 80111b8:	47d0      	blx	sl
 80111ba:	2800      	cmp	r0, #0
 80111bc:	dd09      	ble.n	80111d2 <qsort+0x82>
 80111be:	f1b8 0f00 	cmp.w	r8, #0
 80111c2:	d1ed      	bne.n	80111a0 <qsort+0x50>
 80111c4:	682b      	ldr	r3, [r5, #0]
 80111c6:	683a      	ldr	r2, [r7, #0]
 80111c8:	602a      	str	r2, [r5, #0]
 80111ca:	603b      	str	r3, [r7, #0]
 80111cc:	463d      	mov	r5, r7
 80111ce:	42ae      	cmp	r6, r5
 80111d0:	d3ef      	bcc.n	80111b2 <qsort+0x62>
 80111d2:	9b01      	ldr	r3, [sp, #4]
 80111d4:	4423      	add	r3, r4
 80111d6:	9301      	str	r3, [sp, #4]
 80111d8:	e7d4      	b.n	8011184 <qsort+0x34>
 80111da:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80111de:	1b3f      	subs	r7, r7, r4
 80111e0:	2907      	cmp	r1, #7
 80111e2:	fb04 6909 	mla	r9, r4, r9, r6
 80111e6:	4437      	add	r7, r6
 80111e8:	d021      	beq.n	801122e <qsort+0xde>
 80111ea:	2928      	cmp	r1, #40	; 0x28
 80111ec:	d944      	bls.n	8011278 <qsort+0x128>
 80111ee:	08cd      	lsrs	r5, r1, #3
 80111f0:	4365      	muls	r5, r4
 80111f2:	4653      	mov	r3, sl
 80111f4:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80111f8:	1971      	adds	r1, r6, r5
 80111fa:	4630      	mov	r0, r6
 80111fc:	f7ff ff89 	bl	8011112 <med3.constprop.0>
 8011200:	4649      	mov	r1, r9
 8011202:	eb09 0205 	add.w	r2, r9, r5
 8011206:	4653      	mov	r3, sl
 8011208:	4683      	mov	fp, r0
 801120a:	1b48      	subs	r0, r1, r5
 801120c:	f7ff ff81 	bl	8011112 <med3.constprop.0>
 8011210:	463a      	mov	r2, r7
 8011212:	4681      	mov	r9, r0
 8011214:	4653      	mov	r3, sl
 8011216:	1b79      	subs	r1, r7, r5
 8011218:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 801121c:	f7ff ff79 	bl	8011112 <med3.constprop.0>
 8011220:	4602      	mov	r2, r0
 8011222:	4649      	mov	r1, r9
 8011224:	4653      	mov	r3, sl
 8011226:	4658      	mov	r0, fp
 8011228:	f7ff ff73 	bl	8011112 <med3.constprop.0>
 801122c:	4681      	mov	r9, r0
 801122e:	f1b8 0f00 	cmp.w	r8, #0
 8011232:	d124      	bne.n	801127e <qsort+0x12e>
 8011234:	6833      	ldr	r3, [r6, #0]
 8011236:	f8d9 2000 	ldr.w	r2, [r9]
 801123a:	6032      	str	r2, [r6, #0]
 801123c:	f8c9 3000 	str.w	r3, [r9]
 8011240:	eb06 0b04 	add.w	fp, r6, r4
 8011244:	46b9      	mov	r9, r7
 8011246:	465d      	mov	r5, fp
 8011248:	2300      	movs	r3, #0
 801124a:	45bb      	cmp	fp, r7
 801124c:	d835      	bhi.n	80112ba <qsort+0x16a>
 801124e:	4631      	mov	r1, r6
 8011250:	4658      	mov	r0, fp
 8011252:	9304      	str	r3, [sp, #16]
 8011254:	47d0      	blx	sl
 8011256:	2800      	cmp	r0, #0
 8011258:	9b04      	ldr	r3, [sp, #16]
 801125a:	dc3e      	bgt.n	80112da <qsort+0x18a>
 801125c:	d10a      	bne.n	8011274 <qsort+0x124>
 801125e:	f1b8 0f00 	cmp.w	r8, #0
 8011262:	d113      	bne.n	801128c <qsort+0x13c>
 8011264:	682b      	ldr	r3, [r5, #0]
 8011266:	f8db 2000 	ldr.w	r2, [fp]
 801126a:	602a      	str	r2, [r5, #0]
 801126c:	f8cb 3000 	str.w	r3, [fp]
 8011270:	4425      	add	r5, r4
 8011272:	2301      	movs	r3, #1
 8011274:	44a3      	add	fp, r4
 8011276:	e7e8      	b.n	801124a <qsort+0xfa>
 8011278:	463a      	mov	r2, r7
 801127a:	46b3      	mov	fp, r6
 801127c:	e7d1      	b.n	8011222 <qsort+0xd2>
 801127e:	4643      	mov	r3, r8
 8011280:	4622      	mov	r2, r4
 8011282:	4649      	mov	r1, r9
 8011284:	4630      	mov	r0, r6
 8011286:	f7ff ff2b 	bl	80110e0 <swapfunc>
 801128a:	e7d9      	b.n	8011240 <qsort+0xf0>
 801128c:	4643      	mov	r3, r8
 801128e:	4622      	mov	r2, r4
 8011290:	4659      	mov	r1, fp
 8011292:	4628      	mov	r0, r5
 8011294:	f7ff ff24 	bl	80110e0 <swapfunc>
 8011298:	e7ea      	b.n	8011270 <qsort+0x120>
 801129a:	d10b      	bne.n	80112b4 <qsort+0x164>
 801129c:	f1b8 0f00 	cmp.w	r8, #0
 80112a0:	d114      	bne.n	80112cc <qsort+0x17c>
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	f8d9 2000 	ldr.w	r2, [r9]
 80112a8:	603a      	str	r2, [r7, #0]
 80112aa:	f8c9 3000 	str.w	r3, [r9]
 80112ae:	eba9 0904 	sub.w	r9, r9, r4
 80112b2:	2301      	movs	r3, #1
 80112b4:	9f04      	ldr	r7, [sp, #16]
 80112b6:	45bb      	cmp	fp, r7
 80112b8:	d90f      	bls.n	80112da <qsort+0x18a>
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d143      	bne.n	8011346 <qsort+0x1f6>
 80112be:	9b01      	ldr	r3, [sp, #4]
 80112c0:	9a03      	ldr	r2, [sp, #12]
 80112c2:	4293      	cmp	r3, r2
 80112c4:	f4bf af62 	bcs.w	801118c <qsort+0x3c>
 80112c8:	9d01      	ldr	r5, [sp, #4]
 80112ca:	e036      	b.n	801133a <qsort+0x1ea>
 80112cc:	4643      	mov	r3, r8
 80112ce:	4622      	mov	r2, r4
 80112d0:	4649      	mov	r1, r9
 80112d2:	4638      	mov	r0, r7
 80112d4:	f7ff ff04 	bl	80110e0 <swapfunc>
 80112d8:	e7e9      	b.n	80112ae <qsort+0x15e>
 80112da:	4631      	mov	r1, r6
 80112dc:	4638      	mov	r0, r7
 80112de:	9305      	str	r3, [sp, #20]
 80112e0:	47d0      	blx	sl
 80112e2:	1b3b      	subs	r3, r7, r4
 80112e4:	2800      	cmp	r0, #0
 80112e6:	9304      	str	r3, [sp, #16]
 80112e8:	9b05      	ldr	r3, [sp, #20]
 80112ea:	dad6      	bge.n	801129a <qsort+0x14a>
 80112ec:	f1b8 0f00 	cmp.w	r8, #0
 80112f0:	d006      	beq.n	8011300 <qsort+0x1b0>
 80112f2:	4643      	mov	r3, r8
 80112f4:	4622      	mov	r2, r4
 80112f6:	4639      	mov	r1, r7
 80112f8:	4658      	mov	r0, fp
 80112fa:	f7ff fef1 	bl	80110e0 <swapfunc>
 80112fe:	e005      	b.n	801130c <qsort+0x1bc>
 8011300:	f8db 3000 	ldr.w	r3, [fp]
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	f8cb 2000 	str.w	r2, [fp]
 801130a:	603b      	str	r3, [r7, #0]
 801130c:	9f04      	ldr	r7, [sp, #16]
 801130e:	e7b0      	b.n	8011272 <qsort+0x122>
 8011310:	4643      	mov	r3, r8
 8011312:	4622      	mov	r2, r4
 8011314:	4639      	mov	r1, r7
 8011316:	4628      	mov	r0, r5
 8011318:	f7ff fee2 	bl	80110e0 <swapfunc>
 801131c:	e00c      	b.n	8011338 <qsort+0x1e8>
 801131e:	1b2f      	subs	r7, r5, r4
 8011320:	4629      	mov	r1, r5
 8011322:	4638      	mov	r0, r7
 8011324:	47d0      	blx	sl
 8011326:	2800      	cmp	r0, #0
 8011328:	dd09      	ble.n	801133e <qsort+0x1ee>
 801132a:	f1b8 0f00 	cmp.w	r8, #0
 801132e:	d1ef      	bne.n	8011310 <qsort+0x1c0>
 8011330:	682b      	ldr	r3, [r5, #0]
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	602a      	str	r2, [r5, #0]
 8011336:	603b      	str	r3, [r7, #0]
 8011338:	463d      	mov	r5, r7
 801133a:	42ae      	cmp	r6, r5
 801133c:	d3ef      	bcc.n	801131e <qsort+0x1ce>
 801133e:	9b01      	ldr	r3, [sp, #4]
 8011340:	4423      	add	r3, r4
 8011342:	9301      	str	r3, [sp, #4]
 8011344:	e7bb      	b.n	80112be <qsort+0x16e>
 8011346:	ebab 0305 	sub.w	r3, fp, r5
 801134a:	1baa      	subs	r2, r5, r6
 801134c:	429a      	cmp	r2, r3
 801134e:	bfa8      	it	ge
 8011350:	461a      	movge	r2, r3
 8011352:	9301      	str	r3, [sp, #4]
 8011354:	b12a      	cbz	r2, 8011362 <qsort+0x212>
 8011356:	4643      	mov	r3, r8
 8011358:	ebab 0102 	sub.w	r1, fp, r2
 801135c:	4630      	mov	r0, r6
 801135e:	f7ff febf 	bl	80110e0 <swapfunc>
 8011362:	9b03      	ldr	r3, [sp, #12]
 8011364:	eba3 0209 	sub.w	r2, r3, r9
 8011368:	eba9 0707 	sub.w	r7, r9, r7
 801136c:	1b12      	subs	r2, r2, r4
 801136e:	42ba      	cmp	r2, r7
 8011370:	bf28      	it	cs
 8011372:	463a      	movcs	r2, r7
 8011374:	b12a      	cbz	r2, 8011382 <qsort+0x232>
 8011376:	9903      	ldr	r1, [sp, #12]
 8011378:	4643      	mov	r3, r8
 801137a:	1a89      	subs	r1, r1, r2
 801137c:	4658      	mov	r0, fp
 801137e:	f7ff feaf 	bl	80110e0 <swapfunc>
 8011382:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011386:	9b03      	ldr	r3, [sp, #12]
 8011388:	454f      	cmp	r7, r9
 801138a:	eba3 0007 	sub.w	r0, r3, r7
 801138e:	d904      	bls.n	801139a <qsort+0x24a>
 8011390:	4633      	mov	r3, r6
 8011392:	46b9      	mov	r9, r7
 8011394:	9f01      	ldr	r7, [sp, #4]
 8011396:	4606      	mov	r6, r0
 8011398:	4618      	mov	r0, r3
 801139a:	42a7      	cmp	r7, r4
 801139c:	d921      	bls.n	80113e2 <qsort+0x292>
 801139e:	fbb7 f1f4 	udiv	r1, r7, r4
 80113a2:	9b02      	ldr	r3, [sp, #8]
 80113a4:	2b07      	cmp	r3, #7
 80113a6:	d80d      	bhi.n	80113c4 <qsort+0x274>
 80113a8:	aa16      	add	r2, sp, #88	; 0x58
 80113aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80113ae:	fbb9 f2f4 	udiv	r2, r9, r4
 80113b2:	f843 6c40 	str.w	r6, [r3, #-64]
 80113b6:	f843 2c3c 	str.w	r2, [r3, #-60]
 80113ba:	9b02      	ldr	r3, [sp, #8]
 80113bc:	3301      	adds	r3, #1
 80113be:	9302      	str	r3, [sp, #8]
 80113c0:	4606      	mov	r6, r0
 80113c2:	e6d6      	b.n	8011172 <qsort+0x22>
 80113c4:	4653      	mov	r3, sl
 80113c6:	4622      	mov	r2, r4
 80113c8:	f7ff fec2 	bl	8011150 <qsort>
 80113cc:	45a1      	cmp	r9, r4
 80113ce:	d80b      	bhi.n	80113e8 <qsort+0x298>
 80113d0:	9b02      	ldr	r3, [sp, #8]
 80113d2:	aa16      	add	r2, sp, #88	; 0x58
 80113d4:	3b01      	subs	r3, #1
 80113d6:	9302      	str	r3, [sp, #8]
 80113d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80113dc:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 80113e0:	e7ee      	b.n	80113c0 <qsort+0x270>
 80113e2:	45a1      	cmp	r9, r4
 80113e4:	f67f aed2 	bls.w	801118c <qsort+0x3c>
 80113e8:	fbb9 f1f4 	udiv	r1, r9, r4
 80113ec:	4630      	mov	r0, r6
 80113ee:	e7e7      	b.n	80113c0 <qsort+0x270>

080113f0 <memset>:
 80113f0:	4402      	add	r2, r0
 80113f2:	4603      	mov	r3, r0
 80113f4:	4293      	cmp	r3, r2
 80113f6:	d100      	bne.n	80113fa <memset+0xa>
 80113f8:	4770      	bx	lr
 80113fa:	f803 1b01 	strb.w	r1, [r3], #1
 80113fe:	e7f9      	b.n	80113f4 <memset+0x4>

08011400 <_sbrk_r>:
 8011400:	b538      	push	{r3, r4, r5, lr}
 8011402:	4d06      	ldr	r5, [pc, #24]	; (801141c <_sbrk_r+0x1c>)
 8011404:	2300      	movs	r3, #0
 8011406:	4604      	mov	r4, r0
 8011408:	4608      	mov	r0, r1
 801140a:	602b      	str	r3, [r5, #0]
 801140c:	f7f2 fbde 	bl	8003bcc <_sbrk>
 8011410:	1c43      	adds	r3, r0, #1
 8011412:	d102      	bne.n	801141a <_sbrk_r+0x1a>
 8011414:	682b      	ldr	r3, [r5, #0]
 8011416:	b103      	cbz	r3, 801141a <_sbrk_r+0x1a>
 8011418:	6023      	str	r3, [r4, #0]
 801141a:	bd38      	pop	{r3, r4, r5, pc}
 801141c:	20009290 	.word	0x20009290

08011420 <__errno>:
 8011420:	4b01      	ldr	r3, [pc, #4]	; (8011428 <__errno+0x8>)
 8011422:	6818      	ldr	r0, [r3, #0]
 8011424:	4770      	bx	lr
 8011426:	bf00      	nop
 8011428:	20000084 	.word	0x20000084

0801142c <__libc_init_array>:
 801142c:	b570      	push	{r4, r5, r6, lr}
 801142e:	4d0d      	ldr	r5, [pc, #52]	; (8011464 <__libc_init_array+0x38>)
 8011430:	4c0d      	ldr	r4, [pc, #52]	; (8011468 <__libc_init_array+0x3c>)
 8011432:	1b64      	subs	r4, r4, r5
 8011434:	10a4      	asrs	r4, r4, #2
 8011436:	2600      	movs	r6, #0
 8011438:	42a6      	cmp	r6, r4
 801143a:	d109      	bne.n	8011450 <__libc_init_array+0x24>
 801143c:	4d0b      	ldr	r5, [pc, #44]	; (801146c <__libc_init_array+0x40>)
 801143e:	4c0c      	ldr	r4, [pc, #48]	; (8011470 <__libc_init_array+0x44>)
 8011440:	f001 fa16 	bl	8012870 <_init>
 8011444:	1b64      	subs	r4, r4, r5
 8011446:	10a4      	asrs	r4, r4, #2
 8011448:	2600      	movs	r6, #0
 801144a:	42a6      	cmp	r6, r4
 801144c:	d105      	bne.n	801145a <__libc_init_array+0x2e>
 801144e:	bd70      	pop	{r4, r5, r6, pc}
 8011450:	f855 3b04 	ldr.w	r3, [r5], #4
 8011454:	4798      	blx	r3
 8011456:	3601      	adds	r6, #1
 8011458:	e7ee      	b.n	8011438 <__libc_init_array+0xc>
 801145a:	f855 3b04 	ldr.w	r3, [r5], #4
 801145e:	4798      	blx	r3
 8011460:	3601      	adds	r6, #1
 8011462:	e7f2      	b.n	801144a <__libc_init_array+0x1e>
 8011464:	08014690 	.word	0x08014690
 8011468:	08014690 	.word	0x08014690
 801146c:	08014690 	.word	0x08014690
 8011470:	08014694 	.word	0x08014694

08011474 <__retarget_lock_acquire_recursive>:
 8011474:	4770      	bx	lr

08011476 <__retarget_lock_release_recursive>:
 8011476:	4770      	bx	lr

08011478 <memcpy>:
 8011478:	440a      	add	r2, r1
 801147a:	4291      	cmp	r1, r2
 801147c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011480:	d100      	bne.n	8011484 <memcpy+0xc>
 8011482:	4770      	bx	lr
 8011484:	b510      	push	{r4, lr}
 8011486:	f811 4b01 	ldrb.w	r4, [r1], #1
 801148a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801148e:	4291      	cmp	r1, r2
 8011490:	d1f9      	bne.n	8011486 <memcpy+0xe>
 8011492:	bd10      	pop	{r4, pc}

08011494 <_free_r>:
 8011494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011496:	2900      	cmp	r1, #0
 8011498:	d044      	beq.n	8011524 <_free_r+0x90>
 801149a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801149e:	9001      	str	r0, [sp, #4]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	f1a1 0404 	sub.w	r4, r1, #4
 80114a6:	bfb8      	it	lt
 80114a8:	18e4      	addlt	r4, r4, r3
 80114aa:	f7ff fe0d 	bl	80110c8 <__malloc_lock>
 80114ae:	4a1e      	ldr	r2, [pc, #120]	; (8011528 <_free_r+0x94>)
 80114b0:	9801      	ldr	r0, [sp, #4]
 80114b2:	6813      	ldr	r3, [r2, #0]
 80114b4:	b933      	cbnz	r3, 80114c4 <_free_r+0x30>
 80114b6:	6063      	str	r3, [r4, #4]
 80114b8:	6014      	str	r4, [r2, #0]
 80114ba:	b003      	add	sp, #12
 80114bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114c0:	f7ff be08 	b.w	80110d4 <__malloc_unlock>
 80114c4:	42a3      	cmp	r3, r4
 80114c6:	d908      	bls.n	80114da <_free_r+0x46>
 80114c8:	6825      	ldr	r5, [r4, #0]
 80114ca:	1961      	adds	r1, r4, r5
 80114cc:	428b      	cmp	r3, r1
 80114ce:	bf01      	itttt	eq
 80114d0:	6819      	ldreq	r1, [r3, #0]
 80114d2:	685b      	ldreq	r3, [r3, #4]
 80114d4:	1949      	addeq	r1, r1, r5
 80114d6:	6021      	streq	r1, [r4, #0]
 80114d8:	e7ed      	b.n	80114b6 <_free_r+0x22>
 80114da:	461a      	mov	r2, r3
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	b10b      	cbz	r3, 80114e4 <_free_r+0x50>
 80114e0:	42a3      	cmp	r3, r4
 80114e2:	d9fa      	bls.n	80114da <_free_r+0x46>
 80114e4:	6811      	ldr	r1, [r2, #0]
 80114e6:	1855      	adds	r5, r2, r1
 80114e8:	42a5      	cmp	r5, r4
 80114ea:	d10b      	bne.n	8011504 <_free_r+0x70>
 80114ec:	6824      	ldr	r4, [r4, #0]
 80114ee:	4421      	add	r1, r4
 80114f0:	1854      	adds	r4, r2, r1
 80114f2:	42a3      	cmp	r3, r4
 80114f4:	6011      	str	r1, [r2, #0]
 80114f6:	d1e0      	bne.n	80114ba <_free_r+0x26>
 80114f8:	681c      	ldr	r4, [r3, #0]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	6053      	str	r3, [r2, #4]
 80114fe:	440c      	add	r4, r1
 8011500:	6014      	str	r4, [r2, #0]
 8011502:	e7da      	b.n	80114ba <_free_r+0x26>
 8011504:	d902      	bls.n	801150c <_free_r+0x78>
 8011506:	230c      	movs	r3, #12
 8011508:	6003      	str	r3, [r0, #0]
 801150a:	e7d6      	b.n	80114ba <_free_r+0x26>
 801150c:	6825      	ldr	r5, [r4, #0]
 801150e:	1961      	adds	r1, r4, r5
 8011510:	428b      	cmp	r3, r1
 8011512:	bf04      	itt	eq
 8011514:	6819      	ldreq	r1, [r3, #0]
 8011516:	685b      	ldreq	r3, [r3, #4]
 8011518:	6063      	str	r3, [r4, #4]
 801151a:	bf04      	itt	eq
 801151c:	1949      	addeq	r1, r1, r5
 801151e:	6021      	streq	r1, [r4, #0]
 8011520:	6054      	str	r4, [r2, #4]
 8011522:	e7ca      	b.n	80114ba <_free_r+0x26>
 8011524:	b003      	add	sp, #12
 8011526:	bd30      	pop	{r4, r5, pc}
 8011528:	20009150 	.word	0x20009150

0801152c <sqrt>:
 801152c:	b538      	push	{r3, r4, r5, lr}
 801152e:	ed2d 8b02 	vpush	{d8}
 8011532:	ec55 4b10 	vmov	r4, r5, d0
 8011536:	f000 f8df 	bl	80116f8 <__ieee754_sqrt>
 801153a:	4622      	mov	r2, r4
 801153c:	462b      	mov	r3, r5
 801153e:	4620      	mov	r0, r4
 8011540:	4629      	mov	r1, r5
 8011542:	eeb0 8a40 	vmov.f32	s16, s0
 8011546:	eef0 8a60 	vmov.f32	s17, s1
 801154a:	f7ef fab7 	bl	8000abc <__aeabi_dcmpun>
 801154e:	b990      	cbnz	r0, 8011576 <sqrt+0x4a>
 8011550:	2200      	movs	r2, #0
 8011552:	2300      	movs	r3, #0
 8011554:	4620      	mov	r0, r4
 8011556:	4629      	mov	r1, r5
 8011558:	f7ef fa88 	bl	8000a6c <__aeabi_dcmplt>
 801155c:	b158      	cbz	r0, 8011576 <sqrt+0x4a>
 801155e:	f7ff ff5f 	bl	8011420 <__errno>
 8011562:	2321      	movs	r3, #33	; 0x21
 8011564:	6003      	str	r3, [r0, #0]
 8011566:	2200      	movs	r2, #0
 8011568:	2300      	movs	r3, #0
 801156a:	4610      	mov	r0, r2
 801156c:	4619      	mov	r1, r3
 801156e:	f7ef f935 	bl	80007dc <__aeabi_ddiv>
 8011572:	ec41 0b18 	vmov	d8, r0, r1
 8011576:	eeb0 0a48 	vmov.f32	s0, s16
 801157a:	eef0 0a68 	vmov.f32	s1, s17
 801157e:	ecbd 8b02 	vpop	{d8}
 8011582:	bd38      	pop	{r3, r4, r5, pc}
 8011584:	0000      	movs	r0, r0
	...

08011588 <cos>:
 8011588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801158a:	ec53 2b10 	vmov	r2, r3, d0
 801158e:	4826      	ldr	r0, [pc, #152]	; (8011628 <cos+0xa0>)
 8011590:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011594:	4281      	cmp	r1, r0
 8011596:	dc06      	bgt.n	80115a6 <cos+0x1e>
 8011598:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011620 <cos+0x98>
 801159c:	b005      	add	sp, #20
 801159e:	f85d eb04 	ldr.w	lr, [sp], #4
 80115a2:	f000 b985 	b.w	80118b0 <__kernel_cos>
 80115a6:	4821      	ldr	r0, [pc, #132]	; (801162c <cos+0xa4>)
 80115a8:	4281      	cmp	r1, r0
 80115aa:	dd09      	ble.n	80115c0 <cos+0x38>
 80115ac:	ee10 0a10 	vmov	r0, s0
 80115b0:	4619      	mov	r1, r3
 80115b2:	f7ee fe31 	bl	8000218 <__aeabi_dsub>
 80115b6:	ec41 0b10 	vmov	d0, r0, r1
 80115ba:	b005      	add	sp, #20
 80115bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80115c0:	4668      	mov	r0, sp
 80115c2:	f000 fafd 	bl	8011bc0 <__ieee754_rem_pio2>
 80115c6:	f000 0003 	and.w	r0, r0, #3
 80115ca:	2801      	cmp	r0, #1
 80115cc:	d00b      	beq.n	80115e6 <cos+0x5e>
 80115ce:	2802      	cmp	r0, #2
 80115d0:	d016      	beq.n	8011600 <cos+0x78>
 80115d2:	b9e0      	cbnz	r0, 801160e <cos+0x86>
 80115d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80115d8:	ed9d 0b00 	vldr	d0, [sp]
 80115dc:	f000 f968 	bl	80118b0 <__kernel_cos>
 80115e0:	ec51 0b10 	vmov	r0, r1, d0
 80115e4:	e7e7      	b.n	80115b6 <cos+0x2e>
 80115e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80115ea:	ed9d 0b00 	vldr	d0, [sp]
 80115ee:	f000 fa27 	bl	8011a40 <__kernel_sin>
 80115f2:	ec53 2b10 	vmov	r2, r3, d0
 80115f6:	ee10 0a10 	vmov	r0, s0
 80115fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115fe:	e7da      	b.n	80115b6 <cos+0x2e>
 8011600:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011604:	ed9d 0b00 	vldr	d0, [sp]
 8011608:	f000 f952 	bl	80118b0 <__kernel_cos>
 801160c:	e7f1      	b.n	80115f2 <cos+0x6a>
 801160e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011612:	ed9d 0b00 	vldr	d0, [sp]
 8011616:	2001      	movs	r0, #1
 8011618:	f000 fa12 	bl	8011a40 <__kernel_sin>
 801161c:	e7e0      	b.n	80115e0 <cos+0x58>
 801161e:	bf00      	nop
	...
 8011628:	3fe921fb 	.word	0x3fe921fb
 801162c:	7fefffff 	.word	0x7fefffff

08011630 <fabs>:
 8011630:	ec51 0b10 	vmov	r0, r1, d0
 8011634:	ee10 2a10 	vmov	r2, s0
 8011638:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801163c:	ec43 2b10 	vmov	d0, r2, r3
 8011640:	4770      	bx	lr
 8011642:	0000      	movs	r0, r0
 8011644:	0000      	movs	r0, r0
	...

08011648 <sin>:
 8011648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801164a:	ec53 2b10 	vmov	r2, r3, d0
 801164e:	4828      	ldr	r0, [pc, #160]	; (80116f0 <sin+0xa8>)
 8011650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011654:	4281      	cmp	r1, r0
 8011656:	dc07      	bgt.n	8011668 <sin+0x20>
 8011658:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80116e8 <sin+0xa0>
 801165c:	2000      	movs	r0, #0
 801165e:	b005      	add	sp, #20
 8011660:	f85d eb04 	ldr.w	lr, [sp], #4
 8011664:	f000 b9ec 	b.w	8011a40 <__kernel_sin>
 8011668:	4822      	ldr	r0, [pc, #136]	; (80116f4 <sin+0xac>)
 801166a:	4281      	cmp	r1, r0
 801166c:	dd09      	ble.n	8011682 <sin+0x3a>
 801166e:	ee10 0a10 	vmov	r0, s0
 8011672:	4619      	mov	r1, r3
 8011674:	f7ee fdd0 	bl	8000218 <__aeabi_dsub>
 8011678:	ec41 0b10 	vmov	d0, r0, r1
 801167c:	b005      	add	sp, #20
 801167e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011682:	4668      	mov	r0, sp
 8011684:	f000 fa9c 	bl	8011bc0 <__ieee754_rem_pio2>
 8011688:	f000 0003 	and.w	r0, r0, #3
 801168c:	2801      	cmp	r0, #1
 801168e:	d00c      	beq.n	80116aa <sin+0x62>
 8011690:	2802      	cmp	r0, #2
 8011692:	d011      	beq.n	80116b8 <sin+0x70>
 8011694:	b9f0      	cbnz	r0, 80116d4 <sin+0x8c>
 8011696:	ed9d 1b02 	vldr	d1, [sp, #8]
 801169a:	ed9d 0b00 	vldr	d0, [sp]
 801169e:	2001      	movs	r0, #1
 80116a0:	f000 f9ce 	bl	8011a40 <__kernel_sin>
 80116a4:	ec51 0b10 	vmov	r0, r1, d0
 80116a8:	e7e6      	b.n	8011678 <sin+0x30>
 80116aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116ae:	ed9d 0b00 	vldr	d0, [sp]
 80116b2:	f000 f8fd 	bl	80118b0 <__kernel_cos>
 80116b6:	e7f5      	b.n	80116a4 <sin+0x5c>
 80116b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116bc:	ed9d 0b00 	vldr	d0, [sp]
 80116c0:	2001      	movs	r0, #1
 80116c2:	f000 f9bd 	bl	8011a40 <__kernel_sin>
 80116c6:	ec53 2b10 	vmov	r2, r3, d0
 80116ca:	ee10 0a10 	vmov	r0, s0
 80116ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80116d2:	e7d1      	b.n	8011678 <sin+0x30>
 80116d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116d8:	ed9d 0b00 	vldr	d0, [sp]
 80116dc:	f000 f8e8 	bl	80118b0 <__kernel_cos>
 80116e0:	e7f1      	b.n	80116c6 <sin+0x7e>
 80116e2:	bf00      	nop
 80116e4:	f3af 8000 	nop.w
	...
 80116f0:	3fe921fb 	.word	0x3fe921fb
 80116f4:	7fefffff 	.word	0x7fefffff

080116f8 <__ieee754_sqrt>:
 80116f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116fc:	ec55 4b10 	vmov	r4, r5, d0
 8011700:	4e67      	ldr	r6, [pc, #412]	; (80118a0 <__ieee754_sqrt+0x1a8>)
 8011702:	43ae      	bics	r6, r5
 8011704:	ee10 0a10 	vmov	r0, s0
 8011708:	ee10 2a10 	vmov	r2, s0
 801170c:	4629      	mov	r1, r5
 801170e:	462b      	mov	r3, r5
 8011710:	d10d      	bne.n	801172e <__ieee754_sqrt+0x36>
 8011712:	f7ee ff39 	bl	8000588 <__aeabi_dmul>
 8011716:	4602      	mov	r2, r0
 8011718:	460b      	mov	r3, r1
 801171a:	4620      	mov	r0, r4
 801171c:	4629      	mov	r1, r5
 801171e:	f7ee fd7d 	bl	800021c <__adddf3>
 8011722:	4604      	mov	r4, r0
 8011724:	460d      	mov	r5, r1
 8011726:	ec45 4b10 	vmov	d0, r4, r5
 801172a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172e:	2d00      	cmp	r5, #0
 8011730:	dc0b      	bgt.n	801174a <__ieee754_sqrt+0x52>
 8011732:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011736:	4326      	orrs	r6, r4
 8011738:	d0f5      	beq.n	8011726 <__ieee754_sqrt+0x2e>
 801173a:	b135      	cbz	r5, 801174a <__ieee754_sqrt+0x52>
 801173c:	f7ee fd6c 	bl	8000218 <__aeabi_dsub>
 8011740:	4602      	mov	r2, r0
 8011742:	460b      	mov	r3, r1
 8011744:	f7ef f84a 	bl	80007dc <__aeabi_ddiv>
 8011748:	e7eb      	b.n	8011722 <__ieee754_sqrt+0x2a>
 801174a:	1509      	asrs	r1, r1, #20
 801174c:	f000 808d 	beq.w	801186a <__ieee754_sqrt+0x172>
 8011750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011754:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801175c:	07c9      	lsls	r1, r1, #31
 801175e:	bf5c      	itt	pl
 8011760:	005b      	lslpl	r3, r3, #1
 8011762:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011766:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801176a:	bf58      	it	pl
 801176c:	0052      	lslpl	r2, r2, #1
 801176e:	2500      	movs	r5, #0
 8011770:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011774:	1076      	asrs	r6, r6, #1
 8011776:	0052      	lsls	r2, r2, #1
 8011778:	f04f 0e16 	mov.w	lr, #22
 801177c:	46ac      	mov	ip, r5
 801177e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011782:	eb0c 0001 	add.w	r0, ip, r1
 8011786:	4298      	cmp	r0, r3
 8011788:	bfde      	ittt	le
 801178a:	1a1b      	suble	r3, r3, r0
 801178c:	eb00 0c01 	addle.w	ip, r0, r1
 8011790:	186d      	addle	r5, r5, r1
 8011792:	005b      	lsls	r3, r3, #1
 8011794:	f1be 0e01 	subs.w	lr, lr, #1
 8011798:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801179c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80117a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80117a4:	d1ed      	bne.n	8011782 <__ieee754_sqrt+0x8a>
 80117a6:	4674      	mov	r4, lr
 80117a8:	2720      	movs	r7, #32
 80117aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80117ae:	4563      	cmp	r3, ip
 80117b0:	eb01 000e 	add.w	r0, r1, lr
 80117b4:	dc02      	bgt.n	80117bc <__ieee754_sqrt+0xc4>
 80117b6:	d113      	bne.n	80117e0 <__ieee754_sqrt+0xe8>
 80117b8:	4290      	cmp	r0, r2
 80117ba:	d811      	bhi.n	80117e0 <__ieee754_sqrt+0xe8>
 80117bc:	2800      	cmp	r0, #0
 80117be:	eb00 0e01 	add.w	lr, r0, r1
 80117c2:	da57      	bge.n	8011874 <__ieee754_sqrt+0x17c>
 80117c4:	f1be 0f00 	cmp.w	lr, #0
 80117c8:	db54      	blt.n	8011874 <__ieee754_sqrt+0x17c>
 80117ca:	f10c 0801 	add.w	r8, ip, #1
 80117ce:	eba3 030c 	sub.w	r3, r3, ip
 80117d2:	4290      	cmp	r0, r2
 80117d4:	bf88      	it	hi
 80117d6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80117da:	1a12      	subs	r2, r2, r0
 80117dc:	440c      	add	r4, r1
 80117de:	46c4      	mov	ip, r8
 80117e0:	005b      	lsls	r3, r3, #1
 80117e2:	3f01      	subs	r7, #1
 80117e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80117e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80117ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80117f0:	d1dd      	bne.n	80117ae <__ieee754_sqrt+0xb6>
 80117f2:	4313      	orrs	r3, r2
 80117f4:	d01b      	beq.n	801182e <__ieee754_sqrt+0x136>
 80117f6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80118a4 <__ieee754_sqrt+0x1ac>
 80117fa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80118a8 <__ieee754_sqrt+0x1b0>
 80117fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8011802:	e9db 2300 	ldrd	r2, r3, [fp]
 8011806:	f7ee fd07 	bl	8000218 <__aeabi_dsub>
 801180a:	e9da 8900 	ldrd	r8, r9, [sl]
 801180e:	4602      	mov	r2, r0
 8011810:	460b      	mov	r3, r1
 8011812:	4640      	mov	r0, r8
 8011814:	4649      	mov	r1, r9
 8011816:	f7ef f933 	bl	8000a80 <__aeabi_dcmple>
 801181a:	b140      	cbz	r0, 801182e <__ieee754_sqrt+0x136>
 801181c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8011820:	e9da 0100 	ldrd	r0, r1, [sl]
 8011824:	e9db 2300 	ldrd	r2, r3, [fp]
 8011828:	d126      	bne.n	8011878 <__ieee754_sqrt+0x180>
 801182a:	3501      	adds	r5, #1
 801182c:	463c      	mov	r4, r7
 801182e:	106a      	asrs	r2, r5, #1
 8011830:	0863      	lsrs	r3, r4, #1
 8011832:	07e9      	lsls	r1, r5, #31
 8011834:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011838:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801183c:	bf48      	it	mi
 801183e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011842:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011846:	461c      	mov	r4, r3
 8011848:	e76d      	b.n	8011726 <__ieee754_sqrt+0x2e>
 801184a:	0ad3      	lsrs	r3, r2, #11
 801184c:	3815      	subs	r0, #21
 801184e:	0552      	lsls	r2, r2, #21
 8011850:	2b00      	cmp	r3, #0
 8011852:	d0fa      	beq.n	801184a <__ieee754_sqrt+0x152>
 8011854:	02dc      	lsls	r4, r3, #11
 8011856:	d50a      	bpl.n	801186e <__ieee754_sqrt+0x176>
 8011858:	f1c1 0420 	rsb	r4, r1, #32
 801185c:	fa22 f404 	lsr.w	r4, r2, r4
 8011860:	1e4d      	subs	r5, r1, #1
 8011862:	408a      	lsls	r2, r1
 8011864:	4323      	orrs	r3, r4
 8011866:	1b41      	subs	r1, r0, r5
 8011868:	e772      	b.n	8011750 <__ieee754_sqrt+0x58>
 801186a:	4608      	mov	r0, r1
 801186c:	e7f0      	b.n	8011850 <__ieee754_sqrt+0x158>
 801186e:	005b      	lsls	r3, r3, #1
 8011870:	3101      	adds	r1, #1
 8011872:	e7ef      	b.n	8011854 <__ieee754_sqrt+0x15c>
 8011874:	46e0      	mov	r8, ip
 8011876:	e7aa      	b.n	80117ce <__ieee754_sqrt+0xd6>
 8011878:	f7ee fcd0 	bl	800021c <__adddf3>
 801187c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011880:	4602      	mov	r2, r0
 8011882:	460b      	mov	r3, r1
 8011884:	4640      	mov	r0, r8
 8011886:	4649      	mov	r1, r9
 8011888:	f7ef f8f0 	bl	8000a6c <__aeabi_dcmplt>
 801188c:	b120      	cbz	r0, 8011898 <__ieee754_sqrt+0x1a0>
 801188e:	1ca0      	adds	r0, r4, #2
 8011890:	bf08      	it	eq
 8011892:	3501      	addeq	r5, #1
 8011894:	3402      	adds	r4, #2
 8011896:	e7ca      	b.n	801182e <__ieee754_sqrt+0x136>
 8011898:	3401      	adds	r4, #1
 801189a:	f024 0401 	bic.w	r4, r4, #1
 801189e:	e7c6      	b.n	801182e <__ieee754_sqrt+0x136>
 80118a0:	7ff00000 	.word	0x7ff00000
 80118a4:	20000088 	.word	0x20000088
 80118a8:	20000090 	.word	0x20000090
 80118ac:	00000000 	.word	0x00000000

080118b0 <__kernel_cos>:
 80118b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	ec57 6b10 	vmov	r6, r7, d0
 80118b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80118bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80118c0:	ed8d 1b00 	vstr	d1, [sp]
 80118c4:	da07      	bge.n	80118d6 <__kernel_cos+0x26>
 80118c6:	ee10 0a10 	vmov	r0, s0
 80118ca:	4639      	mov	r1, r7
 80118cc:	f7ef f90c 	bl	8000ae8 <__aeabi_d2iz>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	f000 8088 	beq.w	80119e6 <__kernel_cos+0x136>
 80118d6:	4632      	mov	r2, r6
 80118d8:	463b      	mov	r3, r7
 80118da:	4630      	mov	r0, r6
 80118dc:	4639      	mov	r1, r7
 80118de:	f7ee fe53 	bl	8000588 <__aeabi_dmul>
 80118e2:	4b51      	ldr	r3, [pc, #324]	; (8011a28 <__kernel_cos+0x178>)
 80118e4:	2200      	movs	r2, #0
 80118e6:	4604      	mov	r4, r0
 80118e8:	460d      	mov	r5, r1
 80118ea:	f7ee fe4d 	bl	8000588 <__aeabi_dmul>
 80118ee:	a340      	add	r3, pc, #256	; (adr r3, 80119f0 <__kernel_cos+0x140>)
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	4682      	mov	sl, r0
 80118f6:	468b      	mov	fp, r1
 80118f8:	4620      	mov	r0, r4
 80118fa:	4629      	mov	r1, r5
 80118fc:	f7ee fe44 	bl	8000588 <__aeabi_dmul>
 8011900:	a33d      	add	r3, pc, #244	; (adr r3, 80119f8 <__kernel_cos+0x148>)
 8011902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011906:	f7ee fc89 	bl	800021c <__adddf3>
 801190a:	4622      	mov	r2, r4
 801190c:	462b      	mov	r3, r5
 801190e:	f7ee fe3b 	bl	8000588 <__aeabi_dmul>
 8011912:	a33b      	add	r3, pc, #236	; (adr r3, 8011a00 <__kernel_cos+0x150>)
 8011914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011918:	f7ee fc7e 	bl	8000218 <__aeabi_dsub>
 801191c:	4622      	mov	r2, r4
 801191e:	462b      	mov	r3, r5
 8011920:	f7ee fe32 	bl	8000588 <__aeabi_dmul>
 8011924:	a338      	add	r3, pc, #224	; (adr r3, 8011a08 <__kernel_cos+0x158>)
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	f7ee fc77 	bl	800021c <__adddf3>
 801192e:	4622      	mov	r2, r4
 8011930:	462b      	mov	r3, r5
 8011932:	f7ee fe29 	bl	8000588 <__aeabi_dmul>
 8011936:	a336      	add	r3, pc, #216	; (adr r3, 8011a10 <__kernel_cos+0x160>)
 8011938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193c:	f7ee fc6c 	bl	8000218 <__aeabi_dsub>
 8011940:	4622      	mov	r2, r4
 8011942:	462b      	mov	r3, r5
 8011944:	f7ee fe20 	bl	8000588 <__aeabi_dmul>
 8011948:	a333      	add	r3, pc, #204	; (adr r3, 8011a18 <__kernel_cos+0x168>)
 801194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194e:	f7ee fc65 	bl	800021c <__adddf3>
 8011952:	4622      	mov	r2, r4
 8011954:	462b      	mov	r3, r5
 8011956:	f7ee fe17 	bl	8000588 <__aeabi_dmul>
 801195a:	4622      	mov	r2, r4
 801195c:	462b      	mov	r3, r5
 801195e:	f7ee fe13 	bl	8000588 <__aeabi_dmul>
 8011962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011966:	4604      	mov	r4, r0
 8011968:	460d      	mov	r5, r1
 801196a:	4630      	mov	r0, r6
 801196c:	4639      	mov	r1, r7
 801196e:	f7ee fe0b 	bl	8000588 <__aeabi_dmul>
 8011972:	460b      	mov	r3, r1
 8011974:	4602      	mov	r2, r0
 8011976:	4629      	mov	r1, r5
 8011978:	4620      	mov	r0, r4
 801197a:	f7ee fc4d 	bl	8000218 <__aeabi_dsub>
 801197e:	4b2b      	ldr	r3, [pc, #172]	; (8011a2c <__kernel_cos+0x17c>)
 8011980:	4598      	cmp	r8, r3
 8011982:	4606      	mov	r6, r0
 8011984:	460f      	mov	r7, r1
 8011986:	dc10      	bgt.n	80119aa <__kernel_cos+0xfa>
 8011988:	4602      	mov	r2, r0
 801198a:	460b      	mov	r3, r1
 801198c:	4650      	mov	r0, sl
 801198e:	4659      	mov	r1, fp
 8011990:	f7ee fc42 	bl	8000218 <__aeabi_dsub>
 8011994:	460b      	mov	r3, r1
 8011996:	4926      	ldr	r1, [pc, #152]	; (8011a30 <__kernel_cos+0x180>)
 8011998:	4602      	mov	r2, r0
 801199a:	2000      	movs	r0, #0
 801199c:	f7ee fc3c 	bl	8000218 <__aeabi_dsub>
 80119a0:	ec41 0b10 	vmov	d0, r0, r1
 80119a4:	b003      	add	sp, #12
 80119a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119aa:	4b22      	ldr	r3, [pc, #136]	; (8011a34 <__kernel_cos+0x184>)
 80119ac:	4920      	ldr	r1, [pc, #128]	; (8011a30 <__kernel_cos+0x180>)
 80119ae:	4598      	cmp	r8, r3
 80119b0:	bfcc      	ite	gt
 80119b2:	4d21      	ldrgt	r5, [pc, #132]	; (8011a38 <__kernel_cos+0x188>)
 80119b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80119b8:	2400      	movs	r4, #0
 80119ba:	4622      	mov	r2, r4
 80119bc:	462b      	mov	r3, r5
 80119be:	2000      	movs	r0, #0
 80119c0:	f7ee fc2a 	bl	8000218 <__aeabi_dsub>
 80119c4:	4622      	mov	r2, r4
 80119c6:	4680      	mov	r8, r0
 80119c8:	4689      	mov	r9, r1
 80119ca:	462b      	mov	r3, r5
 80119cc:	4650      	mov	r0, sl
 80119ce:	4659      	mov	r1, fp
 80119d0:	f7ee fc22 	bl	8000218 <__aeabi_dsub>
 80119d4:	4632      	mov	r2, r6
 80119d6:	463b      	mov	r3, r7
 80119d8:	f7ee fc1e 	bl	8000218 <__aeabi_dsub>
 80119dc:	4602      	mov	r2, r0
 80119de:	460b      	mov	r3, r1
 80119e0:	4640      	mov	r0, r8
 80119e2:	4649      	mov	r1, r9
 80119e4:	e7da      	b.n	801199c <__kernel_cos+0xec>
 80119e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011a20 <__kernel_cos+0x170>
 80119ea:	e7db      	b.n	80119a4 <__kernel_cos+0xf4>
 80119ec:	f3af 8000 	nop.w
 80119f0:	be8838d4 	.word	0xbe8838d4
 80119f4:	bda8fae9 	.word	0xbda8fae9
 80119f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80119fc:	3e21ee9e 	.word	0x3e21ee9e
 8011a00:	809c52ad 	.word	0x809c52ad
 8011a04:	3e927e4f 	.word	0x3e927e4f
 8011a08:	19cb1590 	.word	0x19cb1590
 8011a0c:	3efa01a0 	.word	0x3efa01a0
 8011a10:	16c15177 	.word	0x16c15177
 8011a14:	3f56c16c 	.word	0x3f56c16c
 8011a18:	5555554c 	.word	0x5555554c
 8011a1c:	3fa55555 	.word	0x3fa55555
 8011a20:	00000000 	.word	0x00000000
 8011a24:	3ff00000 	.word	0x3ff00000
 8011a28:	3fe00000 	.word	0x3fe00000
 8011a2c:	3fd33332 	.word	0x3fd33332
 8011a30:	3ff00000 	.word	0x3ff00000
 8011a34:	3fe90000 	.word	0x3fe90000
 8011a38:	3fd20000 	.word	0x3fd20000
 8011a3c:	00000000 	.word	0x00000000

08011a40 <__kernel_sin>:
 8011a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a44:	ed2d 8b04 	vpush	{d8-d9}
 8011a48:	eeb0 8a41 	vmov.f32	s16, s2
 8011a4c:	eef0 8a61 	vmov.f32	s17, s3
 8011a50:	ec55 4b10 	vmov	r4, r5, d0
 8011a54:	b083      	sub	sp, #12
 8011a56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011a5e:	9001      	str	r0, [sp, #4]
 8011a60:	da06      	bge.n	8011a70 <__kernel_sin+0x30>
 8011a62:	ee10 0a10 	vmov	r0, s0
 8011a66:	4629      	mov	r1, r5
 8011a68:	f7ef f83e 	bl	8000ae8 <__aeabi_d2iz>
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	d051      	beq.n	8011b14 <__kernel_sin+0xd4>
 8011a70:	4622      	mov	r2, r4
 8011a72:	462b      	mov	r3, r5
 8011a74:	4620      	mov	r0, r4
 8011a76:	4629      	mov	r1, r5
 8011a78:	f7ee fd86 	bl	8000588 <__aeabi_dmul>
 8011a7c:	4682      	mov	sl, r0
 8011a7e:	468b      	mov	fp, r1
 8011a80:	4602      	mov	r2, r0
 8011a82:	460b      	mov	r3, r1
 8011a84:	4620      	mov	r0, r4
 8011a86:	4629      	mov	r1, r5
 8011a88:	f7ee fd7e 	bl	8000588 <__aeabi_dmul>
 8011a8c:	a341      	add	r3, pc, #260	; (adr r3, 8011b94 <__kernel_sin+0x154>)
 8011a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a92:	4680      	mov	r8, r0
 8011a94:	4689      	mov	r9, r1
 8011a96:	4650      	mov	r0, sl
 8011a98:	4659      	mov	r1, fp
 8011a9a:	f7ee fd75 	bl	8000588 <__aeabi_dmul>
 8011a9e:	a33f      	add	r3, pc, #252	; (adr r3, 8011b9c <__kernel_sin+0x15c>)
 8011aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa4:	f7ee fbb8 	bl	8000218 <__aeabi_dsub>
 8011aa8:	4652      	mov	r2, sl
 8011aaa:	465b      	mov	r3, fp
 8011aac:	f7ee fd6c 	bl	8000588 <__aeabi_dmul>
 8011ab0:	a33c      	add	r3, pc, #240	; (adr r3, 8011ba4 <__kernel_sin+0x164>)
 8011ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab6:	f7ee fbb1 	bl	800021c <__adddf3>
 8011aba:	4652      	mov	r2, sl
 8011abc:	465b      	mov	r3, fp
 8011abe:	f7ee fd63 	bl	8000588 <__aeabi_dmul>
 8011ac2:	a33a      	add	r3, pc, #232	; (adr r3, 8011bac <__kernel_sin+0x16c>)
 8011ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac8:	f7ee fba6 	bl	8000218 <__aeabi_dsub>
 8011acc:	4652      	mov	r2, sl
 8011ace:	465b      	mov	r3, fp
 8011ad0:	f7ee fd5a 	bl	8000588 <__aeabi_dmul>
 8011ad4:	a337      	add	r3, pc, #220	; (adr r3, 8011bb4 <__kernel_sin+0x174>)
 8011ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ada:	f7ee fb9f 	bl	800021c <__adddf3>
 8011ade:	9b01      	ldr	r3, [sp, #4]
 8011ae0:	4606      	mov	r6, r0
 8011ae2:	460f      	mov	r7, r1
 8011ae4:	b9eb      	cbnz	r3, 8011b22 <__kernel_sin+0xe2>
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	460b      	mov	r3, r1
 8011aea:	4650      	mov	r0, sl
 8011aec:	4659      	mov	r1, fp
 8011aee:	f7ee fd4b 	bl	8000588 <__aeabi_dmul>
 8011af2:	a325      	add	r3, pc, #148	; (adr r3, 8011b88 <__kernel_sin+0x148>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	f7ee fb8e 	bl	8000218 <__aeabi_dsub>
 8011afc:	4642      	mov	r2, r8
 8011afe:	464b      	mov	r3, r9
 8011b00:	f7ee fd42 	bl	8000588 <__aeabi_dmul>
 8011b04:	4602      	mov	r2, r0
 8011b06:	460b      	mov	r3, r1
 8011b08:	4620      	mov	r0, r4
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	f7ee fb86 	bl	800021c <__adddf3>
 8011b10:	4604      	mov	r4, r0
 8011b12:	460d      	mov	r5, r1
 8011b14:	ec45 4b10 	vmov	d0, r4, r5
 8011b18:	b003      	add	sp, #12
 8011b1a:	ecbd 8b04 	vpop	{d8-d9}
 8011b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b22:	4b1b      	ldr	r3, [pc, #108]	; (8011b90 <__kernel_sin+0x150>)
 8011b24:	ec51 0b18 	vmov	r0, r1, d8
 8011b28:	2200      	movs	r2, #0
 8011b2a:	f7ee fd2d 	bl	8000588 <__aeabi_dmul>
 8011b2e:	4632      	mov	r2, r6
 8011b30:	ec41 0b19 	vmov	d9, r0, r1
 8011b34:	463b      	mov	r3, r7
 8011b36:	4640      	mov	r0, r8
 8011b38:	4649      	mov	r1, r9
 8011b3a:	f7ee fd25 	bl	8000588 <__aeabi_dmul>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	460b      	mov	r3, r1
 8011b42:	ec51 0b19 	vmov	r0, r1, d9
 8011b46:	f7ee fb67 	bl	8000218 <__aeabi_dsub>
 8011b4a:	4652      	mov	r2, sl
 8011b4c:	465b      	mov	r3, fp
 8011b4e:	f7ee fd1b 	bl	8000588 <__aeabi_dmul>
 8011b52:	ec53 2b18 	vmov	r2, r3, d8
 8011b56:	f7ee fb5f 	bl	8000218 <__aeabi_dsub>
 8011b5a:	a30b      	add	r3, pc, #44	; (adr r3, 8011b88 <__kernel_sin+0x148>)
 8011b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b60:	4606      	mov	r6, r0
 8011b62:	460f      	mov	r7, r1
 8011b64:	4640      	mov	r0, r8
 8011b66:	4649      	mov	r1, r9
 8011b68:	f7ee fd0e 	bl	8000588 <__aeabi_dmul>
 8011b6c:	4602      	mov	r2, r0
 8011b6e:	460b      	mov	r3, r1
 8011b70:	4630      	mov	r0, r6
 8011b72:	4639      	mov	r1, r7
 8011b74:	f7ee fb52 	bl	800021c <__adddf3>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	4629      	mov	r1, r5
 8011b80:	f7ee fb4a 	bl	8000218 <__aeabi_dsub>
 8011b84:	e7c4      	b.n	8011b10 <__kernel_sin+0xd0>
 8011b86:	bf00      	nop
 8011b88:	55555549 	.word	0x55555549
 8011b8c:	3fc55555 	.word	0x3fc55555
 8011b90:	3fe00000 	.word	0x3fe00000
 8011b94:	5acfd57c 	.word	0x5acfd57c
 8011b98:	3de5d93a 	.word	0x3de5d93a
 8011b9c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011ba0:	3e5ae5e6 	.word	0x3e5ae5e6
 8011ba4:	57b1fe7d 	.word	0x57b1fe7d
 8011ba8:	3ec71de3 	.word	0x3ec71de3
 8011bac:	19c161d5 	.word	0x19c161d5
 8011bb0:	3f2a01a0 	.word	0x3f2a01a0
 8011bb4:	1110f8a6 	.word	0x1110f8a6
 8011bb8:	3f811111 	.word	0x3f811111
 8011bbc:	00000000 	.word	0x00000000

08011bc0 <__ieee754_rem_pio2>:
 8011bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bc4:	ed2d 8b02 	vpush	{d8}
 8011bc8:	ec55 4b10 	vmov	r4, r5, d0
 8011bcc:	4bca      	ldr	r3, [pc, #808]	; (8011ef8 <__ieee754_rem_pio2+0x338>)
 8011bce:	b08b      	sub	sp, #44	; 0x2c
 8011bd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011bd4:	4598      	cmp	r8, r3
 8011bd6:	4682      	mov	sl, r0
 8011bd8:	9502      	str	r5, [sp, #8]
 8011bda:	dc08      	bgt.n	8011bee <__ieee754_rem_pio2+0x2e>
 8011bdc:	2200      	movs	r2, #0
 8011bde:	2300      	movs	r3, #0
 8011be0:	ed80 0b00 	vstr	d0, [r0]
 8011be4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011be8:	f04f 0b00 	mov.w	fp, #0
 8011bec:	e028      	b.n	8011c40 <__ieee754_rem_pio2+0x80>
 8011bee:	4bc3      	ldr	r3, [pc, #780]	; (8011efc <__ieee754_rem_pio2+0x33c>)
 8011bf0:	4598      	cmp	r8, r3
 8011bf2:	dc78      	bgt.n	8011ce6 <__ieee754_rem_pio2+0x126>
 8011bf4:	9b02      	ldr	r3, [sp, #8]
 8011bf6:	4ec2      	ldr	r6, [pc, #776]	; (8011f00 <__ieee754_rem_pio2+0x340>)
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	ee10 0a10 	vmov	r0, s0
 8011bfe:	a3b0      	add	r3, pc, #704	; (adr r3, 8011ec0 <__ieee754_rem_pio2+0x300>)
 8011c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c04:	4629      	mov	r1, r5
 8011c06:	dd39      	ble.n	8011c7c <__ieee754_rem_pio2+0xbc>
 8011c08:	f7ee fb06 	bl	8000218 <__aeabi_dsub>
 8011c0c:	45b0      	cmp	r8, r6
 8011c0e:	4604      	mov	r4, r0
 8011c10:	460d      	mov	r5, r1
 8011c12:	d01b      	beq.n	8011c4c <__ieee754_rem_pio2+0x8c>
 8011c14:	a3ac      	add	r3, pc, #688	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x308>)
 8011c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1a:	f7ee fafd 	bl	8000218 <__aeabi_dsub>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	460b      	mov	r3, r1
 8011c22:	e9ca 2300 	strd	r2, r3, [sl]
 8011c26:	4620      	mov	r0, r4
 8011c28:	4629      	mov	r1, r5
 8011c2a:	f7ee faf5 	bl	8000218 <__aeabi_dsub>
 8011c2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x308>)
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	f7ee faf0 	bl	8000218 <__aeabi_dsub>
 8011c38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011c3c:	f04f 0b01 	mov.w	fp, #1
 8011c40:	4658      	mov	r0, fp
 8011c42:	b00b      	add	sp, #44	; 0x2c
 8011c44:	ecbd 8b02 	vpop	{d8}
 8011c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4c:	a3a0      	add	r3, pc, #640	; (adr r3, 8011ed0 <__ieee754_rem_pio2+0x310>)
 8011c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c52:	f7ee fae1 	bl	8000218 <__aeabi_dsub>
 8011c56:	a3a0      	add	r3, pc, #640	; (adr r3, 8011ed8 <__ieee754_rem_pio2+0x318>)
 8011c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5c:	4604      	mov	r4, r0
 8011c5e:	460d      	mov	r5, r1
 8011c60:	f7ee fada 	bl	8000218 <__aeabi_dsub>
 8011c64:	4602      	mov	r2, r0
 8011c66:	460b      	mov	r3, r1
 8011c68:	e9ca 2300 	strd	r2, r3, [sl]
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	4629      	mov	r1, r5
 8011c70:	f7ee fad2 	bl	8000218 <__aeabi_dsub>
 8011c74:	a398      	add	r3, pc, #608	; (adr r3, 8011ed8 <__ieee754_rem_pio2+0x318>)
 8011c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7a:	e7db      	b.n	8011c34 <__ieee754_rem_pio2+0x74>
 8011c7c:	f7ee face 	bl	800021c <__adddf3>
 8011c80:	45b0      	cmp	r8, r6
 8011c82:	4604      	mov	r4, r0
 8011c84:	460d      	mov	r5, r1
 8011c86:	d016      	beq.n	8011cb6 <__ieee754_rem_pio2+0xf6>
 8011c88:	a38f      	add	r3, pc, #572	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x308>)
 8011c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8e:	f7ee fac5 	bl	800021c <__adddf3>
 8011c92:	4602      	mov	r2, r0
 8011c94:	460b      	mov	r3, r1
 8011c96:	e9ca 2300 	strd	r2, r3, [sl]
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	f7ee fabb 	bl	8000218 <__aeabi_dsub>
 8011ca2:	a389      	add	r3, pc, #548	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x308>)
 8011ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca8:	f7ee fab8 	bl	800021c <__adddf3>
 8011cac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011cb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011cb4:	e7c4      	b.n	8011c40 <__ieee754_rem_pio2+0x80>
 8011cb6:	a386      	add	r3, pc, #536	; (adr r3, 8011ed0 <__ieee754_rem_pio2+0x310>)
 8011cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbc:	f7ee faae 	bl	800021c <__adddf3>
 8011cc0:	a385      	add	r3, pc, #532	; (adr r3, 8011ed8 <__ieee754_rem_pio2+0x318>)
 8011cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	460d      	mov	r5, r1
 8011cca:	f7ee faa7 	bl	800021c <__adddf3>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	e9ca 2300 	strd	r2, r3, [sl]
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	4629      	mov	r1, r5
 8011cda:	f7ee fa9d 	bl	8000218 <__aeabi_dsub>
 8011cde:	a37e      	add	r3, pc, #504	; (adr r3, 8011ed8 <__ieee754_rem_pio2+0x318>)
 8011ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce4:	e7e0      	b.n	8011ca8 <__ieee754_rem_pio2+0xe8>
 8011ce6:	4b87      	ldr	r3, [pc, #540]	; (8011f04 <__ieee754_rem_pio2+0x344>)
 8011ce8:	4598      	cmp	r8, r3
 8011cea:	f300 80d8 	bgt.w	8011e9e <__ieee754_rem_pio2+0x2de>
 8011cee:	f7ff fc9f 	bl	8011630 <fabs>
 8011cf2:	ec55 4b10 	vmov	r4, r5, d0
 8011cf6:	ee10 0a10 	vmov	r0, s0
 8011cfa:	a379      	add	r3, pc, #484	; (adr r3, 8011ee0 <__ieee754_rem_pio2+0x320>)
 8011cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d00:	4629      	mov	r1, r5
 8011d02:	f7ee fc41 	bl	8000588 <__aeabi_dmul>
 8011d06:	4b80      	ldr	r3, [pc, #512]	; (8011f08 <__ieee754_rem_pio2+0x348>)
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f7ee fa87 	bl	800021c <__adddf3>
 8011d0e:	f7ee feeb 	bl	8000ae8 <__aeabi_d2iz>
 8011d12:	4683      	mov	fp, r0
 8011d14:	f7ee fbce 	bl	80004b4 <__aeabi_i2d>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	460b      	mov	r3, r1
 8011d1c:	ec43 2b18 	vmov	d8, r2, r3
 8011d20:	a367      	add	r3, pc, #412	; (adr r3, 8011ec0 <__ieee754_rem_pio2+0x300>)
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	f7ee fc2f 	bl	8000588 <__aeabi_dmul>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	4620      	mov	r0, r4
 8011d30:	4629      	mov	r1, r5
 8011d32:	f7ee fa71 	bl	8000218 <__aeabi_dsub>
 8011d36:	a364      	add	r3, pc, #400	; (adr r3, 8011ec8 <__ieee754_rem_pio2+0x308>)
 8011d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	460f      	mov	r7, r1
 8011d40:	ec51 0b18 	vmov	r0, r1, d8
 8011d44:	f7ee fc20 	bl	8000588 <__aeabi_dmul>
 8011d48:	f1bb 0f1f 	cmp.w	fp, #31
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	460d      	mov	r5, r1
 8011d50:	dc0d      	bgt.n	8011d6e <__ieee754_rem_pio2+0x1ae>
 8011d52:	4b6e      	ldr	r3, [pc, #440]	; (8011f0c <__ieee754_rem_pio2+0x34c>)
 8011d54:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8011d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d5c:	4543      	cmp	r3, r8
 8011d5e:	d006      	beq.n	8011d6e <__ieee754_rem_pio2+0x1ae>
 8011d60:	4622      	mov	r2, r4
 8011d62:	462b      	mov	r3, r5
 8011d64:	4630      	mov	r0, r6
 8011d66:	4639      	mov	r1, r7
 8011d68:	f7ee fa56 	bl	8000218 <__aeabi_dsub>
 8011d6c:	e00e      	b.n	8011d8c <__ieee754_rem_pio2+0x1cc>
 8011d6e:	462b      	mov	r3, r5
 8011d70:	4622      	mov	r2, r4
 8011d72:	4630      	mov	r0, r6
 8011d74:	4639      	mov	r1, r7
 8011d76:	f7ee fa4f 	bl	8000218 <__aeabi_dsub>
 8011d7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011d7e:	9303      	str	r3, [sp, #12]
 8011d80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d84:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011d88:	2b10      	cmp	r3, #16
 8011d8a:	dc02      	bgt.n	8011d92 <__ieee754_rem_pio2+0x1d2>
 8011d8c:	e9ca 0100 	strd	r0, r1, [sl]
 8011d90:	e039      	b.n	8011e06 <__ieee754_rem_pio2+0x246>
 8011d92:	a34f      	add	r3, pc, #316	; (adr r3, 8011ed0 <__ieee754_rem_pio2+0x310>)
 8011d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d98:	ec51 0b18 	vmov	r0, r1, d8
 8011d9c:	f7ee fbf4 	bl	8000588 <__aeabi_dmul>
 8011da0:	4604      	mov	r4, r0
 8011da2:	460d      	mov	r5, r1
 8011da4:	4602      	mov	r2, r0
 8011da6:	460b      	mov	r3, r1
 8011da8:	4630      	mov	r0, r6
 8011daa:	4639      	mov	r1, r7
 8011dac:	f7ee fa34 	bl	8000218 <__aeabi_dsub>
 8011db0:	4602      	mov	r2, r0
 8011db2:	460b      	mov	r3, r1
 8011db4:	4680      	mov	r8, r0
 8011db6:	4689      	mov	r9, r1
 8011db8:	4630      	mov	r0, r6
 8011dba:	4639      	mov	r1, r7
 8011dbc:	f7ee fa2c 	bl	8000218 <__aeabi_dsub>
 8011dc0:	4622      	mov	r2, r4
 8011dc2:	462b      	mov	r3, r5
 8011dc4:	f7ee fa28 	bl	8000218 <__aeabi_dsub>
 8011dc8:	a343      	add	r3, pc, #268	; (adr r3, 8011ed8 <__ieee754_rem_pio2+0x318>)
 8011dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dce:	4604      	mov	r4, r0
 8011dd0:	460d      	mov	r5, r1
 8011dd2:	ec51 0b18 	vmov	r0, r1, d8
 8011dd6:	f7ee fbd7 	bl	8000588 <__aeabi_dmul>
 8011dda:	4622      	mov	r2, r4
 8011ddc:	462b      	mov	r3, r5
 8011dde:	f7ee fa1b 	bl	8000218 <__aeabi_dsub>
 8011de2:	4602      	mov	r2, r0
 8011de4:	460b      	mov	r3, r1
 8011de6:	4604      	mov	r4, r0
 8011de8:	460d      	mov	r5, r1
 8011dea:	4640      	mov	r0, r8
 8011dec:	4649      	mov	r1, r9
 8011dee:	f7ee fa13 	bl	8000218 <__aeabi_dsub>
 8011df2:	9a03      	ldr	r2, [sp, #12]
 8011df4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011df8:	1ad3      	subs	r3, r2, r3
 8011dfa:	2b31      	cmp	r3, #49	; 0x31
 8011dfc:	dc24      	bgt.n	8011e48 <__ieee754_rem_pio2+0x288>
 8011dfe:	e9ca 0100 	strd	r0, r1, [sl]
 8011e02:	4646      	mov	r6, r8
 8011e04:	464f      	mov	r7, r9
 8011e06:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	4642      	mov	r2, r8
 8011e0e:	464b      	mov	r3, r9
 8011e10:	4639      	mov	r1, r7
 8011e12:	f7ee fa01 	bl	8000218 <__aeabi_dsub>
 8011e16:	462b      	mov	r3, r5
 8011e18:	4622      	mov	r2, r4
 8011e1a:	f7ee f9fd 	bl	8000218 <__aeabi_dsub>
 8011e1e:	9b02      	ldr	r3, [sp, #8]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e26:	f6bf af0b 	bge.w	8011c40 <__ieee754_rem_pio2+0x80>
 8011e2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011e2e:	f8ca 3004 	str.w	r3, [sl, #4]
 8011e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e36:	f8ca 8000 	str.w	r8, [sl]
 8011e3a:	f8ca 0008 	str.w	r0, [sl, #8]
 8011e3e:	f8ca 300c 	str.w	r3, [sl, #12]
 8011e42:	f1cb 0b00 	rsb	fp, fp, #0
 8011e46:	e6fb      	b.n	8011c40 <__ieee754_rem_pio2+0x80>
 8011e48:	a327      	add	r3, pc, #156	; (adr r3, 8011ee8 <__ieee754_rem_pio2+0x328>)
 8011e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4e:	ec51 0b18 	vmov	r0, r1, d8
 8011e52:	f7ee fb99 	bl	8000588 <__aeabi_dmul>
 8011e56:	4604      	mov	r4, r0
 8011e58:	460d      	mov	r5, r1
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	4640      	mov	r0, r8
 8011e60:	4649      	mov	r1, r9
 8011e62:	f7ee f9d9 	bl	8000218 <__aeabi_dsub>
 8011e66:	4602      	mov	r2, r0
 8011e68:	460b      	mov	r3, r1
 8011e6a:	4606      	mov	r6, r0
 8011e6c:	460f      	mov	r7, r1
 8011e6e:	4640      	mov	r0, r8
 8011e70:	4649      	mov	r1, r9
 8011e72:	f7ee f9d1 	bl	8000218 <__aeabi_dsub>
 8011e76:	4622      	mov	r2, r4
 8011e78:	462b      	mov	r3, r5
 8011e7a:	f7ee f9cd 	bl	8000218 <__aeabi_dsub>
 8011e7e:	a31c      	add	r3, pc, #112	; (adr r3, 8011ef0 <__ieee754_rem_pio2+0x330>)
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	4604      	mov	r4, r0
 8011e86:	460d      	mov	r5, r1
 8011e88:	ec51 0b18 	vmov	r0, r1, d8
 8011e8c:	f7ee fb7c 	bl	8000588 <__aeabi_dmul>
 8011e90:	4622      	mov	r2, r4
 8011e92:	462b      	mov	r3, r5
 8011e94:	f7ee f9c0 	bl	8000218 <__aeabi_dsub>
 8011e98:	4604      	mov	r4, r0
 8011e9a:	460d      	mov	r5, r1
 8011e9c:	e760      	b.n	8011d60 <__ieee754_rem_pio2+0x1a0>
 8011e9e:	4b1c      	ldr	r3, [pc, #112]	; (8011f10 <__ieee754_rem_pio2+0x350>)
 8011ea0:	4598      	cmp	r8, r3
 8011ea2:	dd37      	ble.n	8011f14 <__ieee754_rem_pio2+0x354>
 8011ea4:	ee10 2a10 	vmov	r2, s0
 8011ea8:	462b      	mov	r3, r5
 8011eaa:	4620      	mov	r0, r4
 8011eac:	4629      	mov	r1, r5
 8011eae:	f7ee f9b3 	bl	8000218 <__aeabi_dsub>
 8011eb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011eb6:	e9ca 0100 	strd	r0, r1, [sl]
 8011eba:	e695      	b.n	8011be8 <__ieee754_rem_pio2+0x28>
 8011ebc:	f3af 8000 	nop.w
 8011ec0:	54400000 	.word	0x54400000
 8011ec4:	3ff921fb 	.word	0x3ff921fb
 8011ec8:	1a626331 	.word	0x1a626331
 8011ecc:	3dd0b461 	.word	0x3dd0b461
 8011ed0:	1a600000 	.word	0x1a600000
 8011ed4:	3dd0b461 	.word	0x3dd0b461
 8011ed8:	2e037073 	.word	0x2e037073
 8011edc:	3ba3198a 	.word	0x3ba3198a
 8011ee0:	6dc9c883 	.word	0x6dc9c883
 8011ee4:	3fe45f30 	.word	0x3fe45f30
 8011ee8:	2e000000 	.word	0x2e000000
 8011eec:	3ba3198a 	.word	0x3ba3198a
 8011ef0:	252049c1 	.word	0x252049c1
 8011ef4:	397b839a 	.word	0x397b839a
 8011ef8:	3fe921fb 	.word	0x3fe921fb
 8011efc:	4002d97b 	.word	0x4002d97b
 8011f00:	3ff921fb 	.word	0x3ff921fb
 8011f04:	413921fb 	.word	0x413921fb
 8011f08:	3fe00000 	.word	0x3fe00000
 8011f0c:	080144b0 	.word	0x080144b0
 8011f10:	7fefffff 	.word	0x7fefffff
 8011f14:	ea4f 5628 	mov.w	r6, r8, asr #20
 8011f18:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8011f1c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8011f20:	4620      	mov	r0, r4
 8011f22:	460d      	mov	r5, r1
 8011f24:	f7ee fde0 	bl	8000ae8 <__aeabi_d2iz>
 8011f28:	f7ee fac4 	bl	80004b4 <__aeabi_i2d>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	460b      	mov	r3, r1
 8011f30:	4620      	mov	r0, r4
 8011f32:	4629      	mov	r1, r5
 8011f34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f38:	f7ee f96e 	bl	8000218 <__aeabi_dsub>
 8011f3c:	4b21      	ldr	r3, [pc, #132]	; (8011fc4 <__ieee754_rem_pio2+0x404>)
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f7ee fb22 	bl	8000588 <__aeabi_dmul>
 8011f44:	460d      	mov	r5, r1
 8011f46:	4604      	mov	r4, r0
 8011f48:	f7ee fdce 	bl	8000ae8 <__aeabi_d2iz>
 8011f4c:	f7ee fab2 	bl	80004b4 <__aeabi_i2d>
 8011f50:	4602      	mov	r2, r0
 8011f52:	460b      	mov	r3, r1
 8011f54:	4620      	mov	r0, r4
 8011f56:	4629      	mov	r1, r5
 8011f58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f5c:	f7ee f95c 	bl	8000218 <__aeabi_dsub>
 8011f60:	4b18      	ldr	r3, [pc, #96]	; (8011fc4 <__ieee754_rem_pio2+0x404>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	f7ee fb10 	bl	8000588 <__aeabi_dmul>
 8011f68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011f6c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8011f70:	2703      	movs	r7, #3
 8011f72:	2400      	movs	r4, #0
 8011f74:	2500      	movs	r5, #0
 8011f76:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8011f7a:	4622      	mov	r2, r4
 8011f7c:	462b      	mov	r3, r5
 8011f7e:	46b9      	mov	r9, r7
 8011f80:	3f01      	subs	r7, #1
 8011f82:	f7ee fd69 	bl	8000a58 <__aeabi_dcmpeq>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d1f5      	bne.n	8011f76 <__ieee754_rem_pio2+0x3b6>
 8011f8a:	4b0f      	ldr	r3, [pc, #60]	; (8011fc8 <__ieee754_rem_pio2+0x408>)
 8011f8c:	9301      	str	r3, [sp, #4]
 8011f8e:	2302      	movs	r3, #2
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	4632      	mov	r2, r6
 8011f94:	464b      	mov	r3, r9
 8011f96:	4651      	mov	r1, sl
 8011f98:	a804      	add	r0, sp, #16
 8011f9a:	f000 f819 	bl	8011fd0 <__kernel_rem_pio2>
 8011f9e:	9b02      	ldr	r3, [sp, #8]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	4683      	mov	fp, r0
 8011fa4:	f6bf ae4c 	bge.w	8011c40 <__ieee754_rem_pio2+0x80>
 8011fa8:	e9da 2100 	ldrd	r2, r1, [sl]
 8011fac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011fb0:	e9ca 2300 	strd	r2, r3, [sl]
 8011fb4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011fb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011fbc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011fc0:	e73f      	b.n	8011e42 <__ieee754_rem_pio2+0x282>
 8011fc2:	bf00      	nop
 8011fc4:	41700000 	.word	0x41700000
 8011fc8:	08014530 	.word	0x08014530
 8011fcc:	00000000 	.word	0x00000000

08011fd0 <__kernel_rem_pio2>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	ed2d 8b02 	vpush	{d8}
 8011fd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011fdc:	f112 0f14 	cmn.w	r2, #20
 8011fe0:	9306      	str	r3, [sp, #24]
 8011fe2:	9104      	str	r1, [sp, #16]
 8011fe4:	4bc2      	ldr	r3, [pc, #776]	; (80122f0 <__kernel_rem_pio2+0x320>)
 8011fe6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011fe8:	9009      	str	r0, [sp, #36]	; 0x24
 8011fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011fee:	9300      	str	r3, [sp, #0]
 8011ff0:	9b06      	ldr	r3, [sp, #24]
 8011ff2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011ff6:	bfa8      	it	ge
 8011ff8:	1ed4      	subge	r4, r2, #3
 8011ffa:	9305      	str	r3, [sp, #20]
 8011ffc:	bfb2      	itee	lt
 8011ffe:	2400      	movlt	r4, #0
 8012000:	2318      	movge	r3, #24
 8012002:	fb94 f4f3 	sdivge	r4, r4, r3
 8012006:	f06f 0317 	mvn.w	r3, #23
 801200a:	fb04 3303 	mla	r3, r4, r3, r3
 801200e:	eb03 0a02 	add.w	sl, r3, r2
 8012012:	9b00      	ldr	r3, [sp, #0]
 8012014:	9a05      	ldr	r2, [sp, #20]
 8012016:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80122e0 <__kernel_rem_pio2+0x310>
 801201a:	eb03 0802 	add.w	r8, r3, r2
 801201e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012020:	1aa7      	subs	r7, r4, r2
 8012022:	ae20      	add	r6, sp, #128	; 0x80
 8012024:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012028:	2500      	movs	r5, #0
 801202a:	4545      	cmp	r5, r8
 801202c:	dd13      	ble.n	8012056 <__kernel_rem_pio2+0x86>
 801202e:	9b06      	ldr	r3, [sp, #24]
 8012030:	aa20      	add	r2, sp, #128	; 0x80
 8012032:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012036:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801203a:	f04f 0800 	mov.w	r8, #0
 801203e:	9b00      	ldr	r3, [sp, #0]
 8012040:	4598      	cmp	r8, r3
 8012042:	dc31      	bgt.n	80120a8 <__kernel_rem_pio2+0xd8>
 8012044:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80122e0 <__kernel_rem_pio2+0x310>
 8012048:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801204c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012050:	462f      	mov	r7, r5
 8012052:	2600      	movs	r6, #0
 8012054:	e01b      	b.n	801208e <__kernel_rem_pio2+0xbe>
 8012056:	42ef      	cmn	r7, r5
 8012058:	d407      	bmi.n	801206a <__kernel_rem_pio2+0x9a>
 801205a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801205e:	f7ee fa29 	bl	80004b4 <__aeabi_i2d>
 8012062:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012066:	3501      	adds	r5, #1
 8012068:	e7df      	b.n	801202a <__kernel_rem_pio2+0x5a>
 801206a:	ec51 0b18 	vmov	r0, r1, d8
 801206e:	e7f8      	b.n	8012062 <__kernel_rem_pio2+0x92>
 8012070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012074:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012078:	f7ee fa86 	bl	8000588 <__aeabi_dmul>
 801207c:	4602      	mov	r2, r0
 801207e:	460b      	mov	r3, r1
 8012080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012084:	f7ee f8ca 	bl	800021c <__adddf3>
 8012088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801208c:	3601      	adds	r6, #1
 801208e:	9b05      	ldr	r3, [sp, #20]
 8012090:	429e      	cmp	r6, r3
 8012092:	f1a7 0708 	sub.w	r7, r7, #8
 8012096:	ddeb      	ble.n	8012070 <__kernel_rem_pio2+0xa0>
 8012098:	ed9d 7b02 	vldr	d7, [sp, #8]
 801209c:	f108 0801 	add.w	r8, r8, #1
 80120a0:	ecab 7b02 	vstmia	fp!, {d7}
 80120a4:	3508      	adds	r5, #8
 80120a6:	e7ca      	b.n	801203e <__kernel_rem_pio2+0x6e>
 80120a8:	9b00      	ldr	r3, [sp, #0]
 80120aa:	aa0c      	add	r2, sp, #48	; 0x30
 80120ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80120b2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80120b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80120b8:	9c00      	ldr	r4, [sp, #0]
 80120ba:	930a      	str	r3, [sp, #40]	; 0x28
 80120bc:	00e3      	lsls	r3, r4, #3
 80120be:	9308      	str	r3, [sp, #32]
 80120c0:	ab98      	add	r3, sp, #608	; 0x260
 80120c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80120c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80120ca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80120ce:	ab70      	add	r3, sp, #448	; 0x1c0
 80120d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80120d4:	46c3      	mov	fp, r8
 80120d6:	46a1      	mov	r9, r4
 80120d8:	f1b9 0f00 	cmp.w	r9, #0
 80120dc:	f1a5 0508 	sub.w	r5, r5, #8
 80120e0:	dc77      	bgt.n	80121d2 <__kernel_rem_pio2+0x202>
 80120e2:	ec47 6b10 	vmov	d0, r6, r7
 80120e6:	4650      	mov	r0, sl
 80120e8:	f000 fac2 	bl	8012670 <scalbn>
 80120ec:	ec57 6b10 	vmov	r6, r7, d0
 80120f0:	2200      	movs	r2, #0
 80120f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80120f6:	ee10 0a10 	vmov	r0, s0
 80120fa:	4639      	mov	r1, r7
 80120fc:	f7ee fa44 	bl	8000588 <__aeabi_dmul>
 8012100:	ec41 0b10 	vmov	d0, r0, r1
 8012104:	f000 fb34 	bl	8012770 <floor>
 8012108:	4b7a      	ldr	r3, [pc, #488]	; (80122f4 <__kernel_rem_pio2+0x324>)
 801210a:	ec51 0b10 	vmov	r0, r1, d0
 801210e:	2200      	movs	r2, #0
 8012110:	f7ee fa3a 	bl	8000588 <__aeabi_dmul>
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	4630      	mov	r0, r6
 801211a:	4639      	mov	r1, r7
 801211c:	f7ee f87c 	bl	8000218 <__aeabi_dsub>
 8012120:	460f      	mov	r7, r1
 8012122:	4606      	mov	r6, r0
 8012124:	f7ee fce0 	bl	8000ae8 <__aeabi_d2iz>
 8012128:	9002      	str	r0, [sp, #8]
 801212a:	f7ee f9c3 	bl	80004b4 <__aeabi_i2d>
 801212e:	4602      	mov	r2, r0
 8012130:	460b      	mov	r3, r1
 8012132:	4630      	mov	r0, r6
 8012134:	4639      	mov	r1, r7
 8012136:	f7ee f86f 	bl	8000218 <__aeabi_dsub>
 801213a:	f1ba 0f00 	cmp.w	sl, #0
 801213e:	4606      	mov	r6, r0
 8012140:	460f      	mov	r7, r1
 8012142:	dd6d      	ble.n	8012220 <__kernel_rem_pio2+0x250>
 8012144:	1e61      	subs	r1, r4, #1
 8012146:	ab0c      	add	r3, sp, #48	; 0x30
 8012148:	9d02      	ldr	r5, [sp, #8]
 801214a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801214e:	f1ca 0018 	rsb	r0, sl, #24
 8012152:	fa43 f200 	asr.w	r2, r3, r0
 8012156:	4415      	add	r5, r2
 8012158:	4082      	lsls	r2, r0
 801215a:	1a9b      	subs	r3, r3, r2
 801215c:	aa0c      	add	r2, sp, #48	; 0x30
 801215e:	9502      	str	r5, [sp, #8]
 8012160:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012164:	f1ca 0217 	rsb	r2, sl, #23
 8012168:	fa43 fb02 	asr.w	fp, r3, r2
 801216c:	f1bb 0f00 	cmp.w	fp, #0
 8012170:	dd65      	ble.n	801223e <__kernel_rem_pio2+0x26e>
 8012172:	9b02      	ldr	r3, [sp, #8]
 8012174:	2200      	movs	r2, #0
 8012176:	3301      	adds	r3, #1
 8012178:	9302      	str	r3, [sp, #8]
 801217a:	4615      	mov	r5, r2
 801217c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012180:	4294      	cmp	r4, r2
 8012182:	f300 809f 	bgt.w	80122c4 <__kernel_rem_pio2+0x2f4>
 8012186:	f1ba 0f00 	cmp.w	sl, #0
 801218a:	dd07      	ble.n	801219c <__kernel_rem_pio2+0x1cc>
 801218c:	f1ba 0f01 	cmp.w	sl, #1
 8012190:	f000 80c1 	beq.w	8012316 <__kernel_rem_pio2+0x346>
 8012194:	f1ba 0f02 	cmp.w	sl, #2
 8012198:	f000 80c7 	beq.w	801232a <__kernel_rem_pio2+0x35a>
 801219c:	f1bb 0f02 	cmp.w	fp, #2
 80121a0:	d14d      	bne.n	801223e <__kernel_rem_pio2+0x26e>
 80121a2:	4632      	mov	r2, r6
 80121a4:	463b      	mov	r3, r7
 80121a6:	4954      	ldr	r1, [pc, #336]	; (80122f8 <__kernel_rem_pio2+0x328>)
 80121a8:	2000      	movs	r0, #0
 80121aa:	f7ee f835 	bl	8000218 <__aeabi_dsub>
 80121ae:	4606      	mov	r6, r0
 80121b0:	460f      	mov	r7, r1
 80121b2:	2d00      	cmp	r5, #0
 80121b4:	d043      	beq.n	801223e <__kernel_rem_pio2+0x26e>
 80121b6:	4650      	mov	r0, sl
 80121b8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80122e8 <__kernel_rem_pio2+0x318>
 80121bc:	f000 fa58 	bl	8012670 <scalbn>
 80121c0:	4630      	mov	r0, r6
 80121c2:	4639      	mov	r1, r7
 80121c4:	ec53 2b10 	vmov	r2, r3, d0
 80121c8:	f7ee f826 	bl	8000218 <__aeabi_dsub>
 80121cc:	4606      	mov	r6, r0
 80121ce:	460f      	mov	r7, r1
 80121d0:	e035      	b.n	801223e <__kernel_rem_pio2+0x26e>
 80121d2:	4b4a      	ldr	r3, [pc, #296]	; (80122fc <__kernel_rem_pio2+0x32c>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	4630      	mov	r0, r6
 80121d8:	4639      	mov	r1, r7
 80121da:	f7ee f9d5 	bl	8000588 <__aeabi_dmul>
 80121de:	f7ee fc83 	bl	8000ae8 <__aeabi_d2iz>
 80121e2:	f7ee f967 	bl	80004b4 <__aeabi_i2d>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	ec43 2b18 	vmov	d8, r2, r3
 80121ee:	4b44      	ldr	r3, [pc, #272]	; (8012300 <__kernel_rem_pio2+0x330>)
 80121f0:	2200      	movs	r2, #0
 80121f2:	f7ee f9c9 	bl	8000588 <__aeabi_dmul>
 80121f6:	4602      	mov	r2, r0
 80121f8:	460b      	mov	r3, r1
 80121fa:	4630      	mov	r0, r6
 80121fc:	4639      	mov	r1, r7
 80121fe:	f7ee f80b 	bl	8000218 <__aeabi_dsub>
 8012202:	f7ee fc71 	bl	8000ae8 <__aeabi_d2iz>
 8012206:	e9d5 2300 	ldrd	r2, r3, [r5]
 801220a:	f84b 0b04 	str.w	r0, [fp], #4
 801220e:	ec51 0b18 	vmov	r0, r1, d8
 8012212:	f7ee f803 	bl	800021c <__adddf3>
 8012216:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801221a:	4606      	mov	r6, r0
 801221c:	460f      	mov	r7, r1
 801221e:	e75b      	b.n	80120d8 <__kernel_rem_pio2+0x108>
 8012220:	d106      	bne.n	8012230 <__kernel_rem_pio2+0x260>
 8012222:	1e63      	subs	r3, r4, #1
 8012224:	aa0c      	add	r2, sp, #48	; 0x30
 8012226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801222a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801222e:	e79d      	b.n	801216c <__kernel_rem_pio2+0x19c>
 8012230:	4b34      	ldr	r3, [pc, #208]	; (8012304 <__kernel_rem_pio2+0x334>)
 8012232:	2200      	movs	r2, #0
 8012234:	f7ee fc2e 	bl	8000a94 <__aeabi_dcmpge>
 8012238:	2800      	cmp	r0, #0
 801223a:	d140      	bne.n	80122be <__kernel_rem_pio2+0x2ee>
 801223c:	4683      	mov	fp, r0
 801223e:	2200      	movs	r2, #0
 8012240:	2300      	movs	r3, #0
 8012242:	4630      	mov	r0, r6
 8012244:	4639      	mov	r1, r7
 8012246:	f7ee fc07 	bl	8000a58 <__aeabi_dcmpeq>
 801224a:	2800      	cmp	r0, #0
 801224c:	f000 80c1 	beq.w	80123d2 <__kernel_rem_pio2+0x402>
 8012250:	1e65      	subs	r5, r4, #1
 8012252:	462b      	mov	r3, r5
 8012254:	2200      	movs	r2, #0
 8012256:	9900      	ldr	r1, [sp, #0]
 8012258:	428b      	cmp	r3, r1
 801225a:	da6d      	bge.n	8012338 <__kernel_rem_pio2+0x368>
 801225c:	2a00      	cmp	r2, #0
 801225e:	f000 808a 	beq.w	8012376 <__kernel_rem_pio2+0x3a6>
 8012262:	ab0c      	add	r3, sp, #48	; 0x30
 8012264:	f1aa 0a18 	sub.w	sl, sl, #24
 8012268:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801226c:	2b00      	cmp	r3, #0
 801226e:	f000 80ae 	beq.w	80123ce <__kernel_rem_pio2+0x3fe>
 8012272:	4650      	mov	r0, sl
 8012274:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80122e8 <__kernel_rem_pio2+0x318>
 8012278:	f000 f9fa 	bl	8012670 <scalbn>
 801227c:	1c6b      	adds	r3, r5, #1
 801227e:	00da      	lsls	r2, r3, #3
 8012280:	9205      	str	r2, [sp, #20]
 8012282:	ec57 6b10 	vmov	r6, r7, d0
 8012286:	aa70      	add	r2, sp, #448	; 0x1c0
 8012288:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80122fc <__kernel_rem_pio2+0x32c>
 801228c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8012290:	462c      	mov	r4, r5
 8012292:	f04f 0800 	mov.w	r8, #0
 8012296:	2c00      	cmp	r4, #0
 8012298:	f280 80d4 	bge.w	8012444 <__kernel_rem_pio2+0x474>
 801229c:	462c      	mov	r4, r5
 801229e:	2c00      	cmp	r4, #0
 80122a0:	f2c0 8102 	blt.w	80124a8 <__kernel_rem_pio2+0x4d8>
 80122a4:	4b18      	ldr	r3, [pc, #96]	; (8012308 <__kernel_rem_pio2+0x338>)
 80122a6:	461e      	mov	r6, r3
 80122a8:	ab70      	add	r3, sp, #448	; 0x1c0
 80122aa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80122ae:	1b2b      	subs	r3, r5, r4
 80122b0:	f04f 0900 	mov.w	r9, #0
 80122b4:	f04f 0a00 	mov.w	sl, #0
 80122b8:	2700      	movs	r7, #0
 80122ba:	9306      	str	r3, [sp, #24]
 80122bc:	e0e6      	b.n	801248c <__kernel_rem_pio2+0x4bc>
 80122be:	f04f 0b02 	mov.w	fp, #2
 80122c2:	e756      	b.n	8012172 <__kernel_rem_pio2+0x1a2>
 80122c4:	f8d8 3000 	ldr.w	r3, [r8]
 80122c8:	bb05      	cbnz	r5, 801230c <__kernel_rem_pio2+0x33c>
 80122ca:	b123      	cbz	r3, 80122d6 <__kernel_rem_pio2+0x306>
 80122cc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80122d0:	f8c8 3000 	str.w	r3, [r8]
 80122d4:	2301      	movs	r3, #1
 80122d6:	3201      	adds	r2, #1
 80122d8:	f108 0804 	add.w	r8, r8, #4
 80122dc:	461d      	mov	r5, r3
 80122de:	e74f      	b.n	8012180 <__kernel_rem_pio2+0x1b0>
	...
 80122ec:	3ff00000 	.word	0x3ff00000
 80122f0:	08014678 	.word	0x08014678
 80122f4:	40200000 	.word	0x40200000
 80122f8:	3ff00000 	.word	0x3ff00000
 80122fc:	3e700000 	.word	0x3e700000
 8012300:	41700000 	.word	0x41700000
 8012304:	3fe00000 	.word	0x3fe00000
 8012308:	08014638 	.word	0x08014638
 801230c:	1acb      	subs	r3, r1, r3
 801230e:	f8c8 3000 	str.w	r3, [r8]
 8012312:	462b      	mov	r3, r5
 8012314:	e7df      	b.n	80122d6 <__kernel_rem_pio2+0x306>
 8012316:	1e62      	subs	r2, r4, #1
 8012318:	ab0c      	add	r3, sp, #48	; 0x30
 801231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801231e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012322:	a90c      	add	r1, sp, #48	; 0x30
 8012324:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012328:	e738      	b.n	801219c <__kernel_rem_pio2+0x1cc>
 801232a:	1e62      	subs	r2, r4, #1
 801232c:	ab0c      	add	r3, sp, #48	; 0x30
 801232e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012332:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012336:	e7f4      	b.n	8012322 <__kernel_rem_pio2+0x352>
 8012338:	a90c      	add	r1, sp, #48	; 0x30
 801233a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801233e:	3b01      	subs	r3, #1
 8012340:	430a      	orrs	r2, r1
 8012342:	e788      	b.n	8012256 <__kernel_rem_pio2+0x286>
 8012344:	3301      	adds	r3, #1
 8012346:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801234a:	2900      	cmp	r1, #0
 801234c:	d0fa      	beq.n	8012344 <__kernel_rem_pio2+0x374>
 801234e:	9a08      	ldr	r2, [sp, #32]
 8012350:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8012354:	446a      	add	r2, sp
 8012356:	3a98      	subs	r2, #152	; 0x98
 8012358:	9208      	str	r2, [sp, #32]
 801235a:	9a06      	ldr	r2, [sp, #24]
 801235c:	a920      	add	r1, sp, #128	; 0x80
 801235e:	18a2      	adds	r2, r4, r2
 8012360:	18e3      	adds	r3, r4, r3
 8012362:	f104 0801 	add.w	r8, r4, #1
 8012366:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801236a:	9302      	str	r3, [sp, #8]
 801236c:	9b02      	ldr	r3, [sp, #8]
 801236e:	4543      	cmp	r3, r8
 8012370:	da04      	bge.n	801237c <__kernel_rem_pio2+0x3ac>
 8012372:	461c      	mov	r4, r3
 8012374:	e6a2      	b.n	80120bc <__kernel_rem_pio2+0xec>
 8012376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012378:	2301      	movs	r3, #1
 801237a:	e7e4      	b.n	8012346 <__kernel_rem_pio2+0x376>
 801237c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801237e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012382:	f7ee f897 	bl	80004b4 <__aeabi_i2d>
 8012386:	e8e5 0102 	strd	r0, r1, [r5], #8
 801238a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801238c:	46ab      	mov	fp, r5
 801238e:	461c      	mov	r4, r3
 8012390:	f04f 0900 	mov.w	r9, #0
 8012394:	2600      	movs	r6, #0
 8012396:	2700      	movs	r7, #0
 8012398:	9b05      	ldr	r3, [sp, #20]
 801239a:	4599      	cmp	r9, r3
 801239c:	dd06      	ble.n	80123ac <__kernel_rem_pio2+0x3dc>
 801239e:	9b08      	ldr	r3, [sp, #32]
 80123a0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80123a4:	f108 0801 	add.w	r8, r8, #1
 80123a8:	9308      	str	r3, [sp, #32]
 80123aa:	e7df      	b.n	801236c <__kernel_rem_pio2+0x39c>
 80123ac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80123b0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80123b4:	f7ee f8e8 	bl	8000588 <__aeabi_dmul>
 80123b8:	4602      	mov	r2, r0
 80123ba:	460b      	mov	r3, r1
 80123bc:	4630      	mov	r0, r6
 80123be:	4639      	mov	r1, r7
 80123c0:	f7ed ff2c 	bl	800021c <__adddf3>
 80123c4:	f109 0901 	add.w	r9, r9, #1
 80123c8:	4606      	mov	r6, r0
 80123ca:	460f      	mov	r7, r1
 80123cc:	e7e4      	b.n	8012398 <__kernel_rem_pio2+0x3c8>
 80123ce:	3d01      	subs	r5, #1
 80123d0:	e747      	b.n	8012262 <__kernel_rem_pio2+0x292>
 80123d2:	ec47 6b10 	vmov	d0, r6, r7
 80123d6:	f1ca 0000 	rsb	r0, sl, #0
 80123da:	f000 f949 	bl	8012670 <scalbn>
 80123de:	ec57 6b10 	vmov	r6, r7, d0
 80123e2:	4ba0      	ldr	r3, [pc, #640]	; (8012664 <__kernel_rem_pio2+0x694>)
 80123e4:	ee10 0a10 	vmov	r0, s0
 80123e8:	2200      	movs	r2, #0
 80123ea:	4639      	mov	r1, r7
 80123ec:	f7ee fb52 	bl	8000a94 <__aeabi_dcmpge>
 80123f0:	b1f8      	cbz	r0, 8012432 <__kernel_rem_pio2+0x462>
 80123f2:	4b9d      	ldr	r3, [pc, #628]	; (8012668 <__kernel_rem_pio2+0x698>)
 80123f4:	2200      	movs	r2, #0
 80123f6:	4630      	mov	r0, r6
 80123f8:	4639      	mov	r1, r7
 80123fa:	f7ee f8c5 	bl	8000588 <__aeabi_dmul>
 80123fe:	f7ee fb73 	bl	8000ae8 <__aeabi_d2iz>
 8012402:	4680      	mov	r8, r0
 8012404:	f7ee f856 	bl	80004b4 <__aeabi_i2d>
 8012408:	4b96      	ldr	r3, [pc, #600]	; (8012664 <__kernel_rem_pio2+0x694>)
 801240a:	2200      	movs	r2, #0
 801240c:	f7ee f8bc 	bl	8000588 <__aeabi_dmul>
 8012410:	460b      	mov	r3, r1
 8012412:	4602      	mov	r2, r0
 8012414:	4639      	mov	r1, r7
 8012416:	4630      	mov	r0, r6
 8012418:	f7ed fefe 	bl	8000218 <__aeabi_dsub>
 801241c:	f7ee fb64 	bl	8000ae8 <__aeabi_d2iz>
 8012420:	1c65      	adds	r5, r4, #1
 8012422:	ab0c      	add	r3, sp, #48	; 0x30
 8012424:	f10a 0a18 	add.w	sl, sl, #24
 8012428:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801242c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012430:	e71f      	b.n	8012272 <__kernel_rem_pio2+0x2a2>
 8012432:	4630      	mov	r0, r6
 8012434:	4639      	mov	r1, r7
 8012436:	f7ee fb57 	bl	8000ae8 <__aeabi_d2iz>
 801243a:	ab0c      	add	r3, sp, #48	; 0x30
 801243c:	4625      	mov	r5, r4
 801243e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012442:	e716      	b.n	8012272 <__kernel_rem_pio2+0x2a2>
 8012444:	ab0c      	add	r3, sp, #48	; 0x30
 8012446:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801244a:	f7ee f833 	bl	80004b4 <__aeabi_i2d>
 801244e:	4632      	mov	r2, r6
 8012450:	463b      	mov	r3, r7
 8012452:	f7ee f899 	bl	8000588 <__aeabi_dmul>
 8012456:	4642      	mov	r2, r8
 8012458:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801245c:	464b      	mov	r3, r9
 801245e:	4630      	mov	r0, r6
 8012460:	4639      	mov	r1, r7
 8012462:	f7ee f891 	bl	8000588 <__aeabi_dmul>
 8012466:	3c01      	subs	r4, #1
 8012468:	4606      	mov	r6, r0
 801246a:	460f      	mov	r7, r1
 801246c:	e713      	b.n	8012296 <__kernel_rem_pio2+0x2c6>
 801246e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8012472:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8012476:	f7ee f887 	bl	8000588 <__aeabi_dmul>
 801247a:	4602      	mov	r2, r0
 801247c:	460b      	mov	r3, r1
 801247e:	4648      	mov	r0, r9
 8012480:	4651      	mov	r1, sl
 8012482:	f7ed fecb 	bl	800021c <__adddf3>
 8012486:	3701      	adds	r7, #1
 8012488:	4681      	mov	r9, r0
 801248a:	468a      	mov	sl, r1
 801248c:	9b00      	ldr	r3, [sp, #0]
 801248e:	429f      	cmp	r7, r3
 8012490:	dc02      	bgt.n	8012498 <__kernel_rem_pio2+0x4c8>
 8012492:	9b06      	ldr	r3, [sp, #24]
 8012494:	429f      	cmp	r7, r3
 8012496:	ddea      	ble.n	801246e <__kernel_rem_pio2+0x49e>
 8012498:	9a06      	ldr	r2, [sp, #24]
 801249a:	ab48      	add	r3, sp, #288	; 0x120
 801249c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80124a0:	e9c6 9a00 	strd	r9, sl, [r6]
 80124a4:	3c01      	subs	r4, #1
 80124a6:	e6fa      	b.n	801229e <__kernel_rem_pio2+0x2ce>
 80124a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80124aa:	2b02      	cmp	r3, #2
 80124ac:	dc0b      	bgt.n	80124c6 <__kernel_rem_pio2+0x4f6>
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	dc39      	bgt.n	8012526 <__kernel_rem_pio2+0x556>
 80124b2:	d05d      	beq.n	8012570 <__kernel_rem_pio2+0x5a0>
 80124b4:	9b02      	ldr	r3, [sp, #8]
 80124b6:	f003 0007 	and.w	r0, r3, #7
 80124ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80124be:	ecbd 8b02 	vpop	{d8}
 80124c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80124c8:	2b03      	cmp	r3, #3
 80124ca:	d1f3      	bne.n	80124b4 <__kernel_rem_pio2+0x4e4>
 80124cc:	9b05      	ldr	r3, [sp, #20]
 80124ce:	9500      	str	r5, [sp, #0]
 80124d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80124d4:	eb0d 0403 	add.w	r4, sp, r3
 80124d8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80124dc:	46a2      	mov	sl, r4
 80124de:	9b00      	ldr	r3, [sp, #0]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	f1aa 0a08 	sub.w	sl, sl, #8
 80124e6:	dc69      	bgt.n	80125bc <__kernel_rem_pio2+0x5ec>
 80124e8:	46aa      	mov	sl, r5
 80124ea:	f1ba 0f01 	cmp.w	sl, #1
 80124ee:	f1a4 0408 	sub.w	r4, r4, #8
 80124f2:	f300 8083 	bgt.w	80125fc <__kernel_rem_pio2+0x62c>
 80124f6:	9c05      	ldr	r4, [sp, #20]
 80124f8:	ab48      	add	r3, sp, #288	; 0x120
 80124fa:	441c      	add	r4, r3
 80124fc:	2000      	movs	r0, #0
 80124fe:	2100      	movs	r1, #0
 8012500:	2d01      	cmp	r5, #1
 8012502:	f300 809a 	bgt.w	801263a <__kernel_rem_pio2+0x66a>
 8012506:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801250a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801250e:	f1bb 0f00 	cmp.w	fp, #0
 8012512:	f040 8098 	bne.w	8012646 <__kernel_rem_pio2+0x676>
 8012516:	9b04      	ldr	r3, [sp, #16]
 8012518:	e9c3 7800 	strd	r7, r8, [r3]
 801251c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012520:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012524:	e7c6      	b.n	80124b4 <__kernel_rem_pio2+0x4e4>
 8012526:	9e05      	ldr	r6, [sp, #20]
 8012528:	ab48      	add	r3, sp, #288	; 0x120
 801252a:	441e      	add	r6, r3
 801252c:	462c      	mov	r4, r5
 801252e:	2000      	movs	r0, #0
 8012530:	2100      	movs	r1, #0
 8012532:	2c00      	cmp	r4, #0
 8012534:	da33      	bge.n	801259e <__kernel_rem_pio2+0x5ce>
 8012536:	f1bb 0f00 	cmp.w	fp, #0
 801253a:	d036      	beq.n	80125aa <__kernel_rem_pio2+0x5da>
 801253c:	4602      	mov	r2, r0
 801253e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012542:	9c04      	ldr	r4, [sp, #16]
 8012544:	e9c4 2300 	strd	r2, r3, [r4]
 8012548:	4602      	mov	r2, r0
 801254a:	460b      	mov	r3, r1
 801254c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012550:	f7ed fe62 	bl	8000218 <__aeabi_dsub>
 8012554:	ae4a      	add	r6, sp, #296	; 0x128
 8012556:	2401      	movs	r4, #1
 8012558:	42a5      	cmp	r5, r4
 801255a:	da29      	bge.n	80125b0 <__kernel_rem_pio2+0x5e0>
 801255c:	f1bb 0f00 	cmp.w	fp, #0
 8012560:	d002      	beq.n	8012568 <__kernel_rem_pio2+0x598>
 8012562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012566:	4619      	mov	r1, r3
 8012568:	9b04      	ldr	r3, [sp, #16]
 801256a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801256e:	e7a1      	b.n	80124b4 <__kernel_rem_pio2+0x4e4>
 8012570:	9c05      	ldr	r4, [sp, #20]
 8012572:	ab48      	add	r3, sp, #288	; 0x120
 8012574:	441c      	add	r4, r3
 8012576:	2000      	movs	r0, #0
 8012578:	2100      	movs	r1, #0
 801257a:	2d00      	cmp	r5, #0
 801257c:	da09      	bge.n	8012592 <__kernel_rem_pio2+0x5c2>
 801257e:	f1bb 0f00 	cmp.w	fp, #0
 8012582:	d002      	beq.n	801258a <__kernel_rem_pio2+0x5ba>
 8012584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012588:	4619      	mov	r1, r3
 801258a:	9b04      	ldr	r3, [sp, #16]
 801258c:	e9c3 0100 	strd	r0, r1, [r3]
 8012590:	e790      	b.n	80124b4 <__kernel_rem_pio2+0x4e4>
 8012592:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012596:	f7ed fe41 	bl	800021c <__adddf3>
 801259a:	3d01      	subs	r5, #1
 801259c:	e7ed      	b.n	801257a <__kernel_rem_pio2+0x5aa>
 801259e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80125a2:	f7ed fe3b 	bl	800021c <__adddf3>
 80125a6:	3c01      	subs	r4, #1
 80125a8:	e7c3      	b.n	8012532 <__kernel_rem_pio2+0x562>
 80125aa:	4602      	mov	r2, r0
 80125ac:	460b      	mov	r3, r1
 80125ae:	e7c8      	b.n	8012542 <__kernel_rem_pio2+0x572>
 80125b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80125b4:	f7ed fe32 	bl	800021c <__adddf3>
 80125b8:	3401      	adds	r4, #1
 80125ba:	e7cd      	b.n	8012558 <__kernel_rem_pio2+0x588>
 80125bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80125c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80125c4:	9b00      	ldr	r3, [sp, #0]
 80125c6:	3b01      	subs	r3, #1
 80125c8:	9300      	str	r3, [sp, #0]
 80125ca:	4632      	mov	r2, r6
 80125cc:	463b      	mov	r3, r7
 80125ce:	4640      	mov	r0, r8
 80125d0:	4649      	mov	r1, r9
 80125d2:	f7ed fe23 	bl	800021c <__adddf3>
 80125d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80125da:	4602      	mov	r2, r0
 80125dc:	460b      	mov	r3, r1
 80125de:	4640      	mov	r0, r8
 80125e0:	4649      	mov	r1, r9
 80125e2:	f7ed fe19 	bl	8000218 <__aeabi_dsub>
 80125e6:	4632      	mov	r2, r6
 80125e8:	463b      	mov	r3, r7
 80125ea:	f7ed fe17 	bl	800021c <__adddf3>
 80125ee:	ed9d 7b06 	vldr	d7, [sp, #24]
 80125f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80125f6:	ed8a 7b00 	vstr	d7, [sl]
 80125fa:	e770      	b.n	80124de <__kernel_rem_pio2+0x50e>
 80125fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012600:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012604:	4640      	mov	r0, r8
 8012606:	4632      	mov	r2, r6
 8012608:	463b      	mov	r3, r7
 801260a:	4649      	mov	r1, r9
 801260c:	f7ed fe06 	bl	800021c <__adddf3>
 8012610:	e9cd 0100 	strd	r0, r1, [sp]
 8012614:	4602      	mov	r2, r0
 8012616:	460b      	mov	r3, r1
 8012618:	4640      	mov	r0, r8
 801261a:	4649      	mov	r1, r9
 801261c:	f7ed fdfc 	bl	8000218 <__aeabi_dsub>
 8012620:	4632      	mov	r2, r6
 8012622:	463b      	mov	r3, r7
 8012624:	f7ed fdfa 	bl	800021c <__adddf3>
 8012628:	ed9d 7b00 	vldr	d7, [sp]
 801262c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012630:	ed84 7b00 	vstr	d7, [r4]
 8012634:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012638:	e757      	b.n	80124ea <__kernel_rem_pio2+0x51a>
 801263a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801263e:	f7ed fded 	bl	800021c <__adddf3>
 8012642:	3d01      	subs	r5, #1
 8012644:	e75c      	b.n	8012500 <__kernel_rem_pio2+0x530>
 8012646:	9b04      	ldr	r3, [sp, #16]
 8012648:	9a04      	ldr	r2, [sp, #16]
 801264a:	601f      	str	r7, [r3, #0]
 801264c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012650:	605c      	str	r4, [r3, #4]
 8012652:	609d      	str	r5, [r3, #8]
 8012654:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012658:	60d3      	str	r3, [r2, #12]
 801265a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801265e:	6110      	str	r0, [r2, #16]
 8012660:	6153      	str	r3, [r2, #20]
 8012662:	e727      	b.n	80124b4 <__kernel_rem_pio2+0x4e4>
 8012664:	41700000 	.word	0x41700000
 8012668:	3e700000 	.word	0x3e700000
 801266c:	00000000 	.word	0x00000000

08012670 <scalbn>:
 8012670:	b570      	push	{r4, r5, r6, lr}
 8012672:	ec55 4b10 	vmov	r4, r5, d0
 8012676:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801267a:	4606      	mov	r6, r0
 801267c:	462b      	mov	r3, r5
 801267e:	b999      	cbnz	r1, 80126a8 <scalbn+0x38>
 8012680:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012684:	4323      	orrs	r3, r4
 8012686:	d03f      	beq.n	8012708 <scalbn+0x98>
 8012688:	4b35      	ldr	r3, [pc, #212]	; (8012760 <scalbn+0xf0>)
 801268a:	4629      	mov	r1, r5
 801268c:	ee10 0a10 	vmov	r0, s0
 8012690:	2200      	movs	r2, #0
 8012692:	f7ed ff79 	bl	8000588 <__aeabi_dmul>
 8012696:	4b33      	ldr	r3, [pc, #204]	; (8012764 <scalbn+0xf4>)
 8012698:	429e      	cmp	r6, r3
 801269a:	4604      	mov	r4, r0
 801269c:	460d      	mov	r5, r1
 801269e:	da10      	bge.n	80126c2 <scalbn+0x52>
 80126a0:	a327      	add	r3, pc, #156	; (adr r3, 8012740 <scalbn+0xd0>)
 80126a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a6:	e01f      	b.n	80126e8 <scalbn+0x78>
 80126a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80126ac:	4291      	cmp	r1, r2
 80126ae:	d10c      	bne.n	80126ca <scalbn+0x5a>
 80126b0:	ee10 2a10 	vmov	r2, s0
 80126b4:	4620      	mov	r0, r4
 80126b6:	4629      	mov	r1, r5
 80126b8:	f7ed fdb0 	bl	800021c <__adddf3>
 80126bc:	4604      	mov	r4, r0
 80126be:	460d      	mov	r5, r1
 80126c0:	e022      	b.n	8012708 <scalbn+0x98>
 80126c2:	460b      	mov	r3, r1
 80126c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80126c8:	3936      	subs	r1, #54	; 0x36
 80126ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80126ce:	4296      	cmp	r6, r2
 80126d0:	dd0d      	ble.n	80126ee <scalbn+0x7e>
 80126d2:	2d00      	cmp	r5, #0
 80126d4:	a11c      	add	r1, pc, #112	; (adr r1, 8012748 <scalbn+0xd8>)
 80126d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126da:	da02      	bge.n	80126e2 <scalbn+0x72>
 80126dc:	a11c      	add	r1, pc, #112	; (adr r1, 8012750 <scalbn+0xe0>)
 80126de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126e2:	a319      	add	r3, pc, #100	; (adr r3, 8012748 <scalbn+0xd8>)
 80126e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e8:	f7ed ff4e 	bl	8000588 <__aeabi_dmul>
 80126ec:	e7e6      	b.n	80126bc <scalbn+0x4c>
 80126ee:	1872      	adds	r2, r6, r1
 80126f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80126f4:	428a      	cmp	r2, r1
 80126f6:	dcec      	bgt.n	80126d2 <scalbn+0x62>
 80126f8:	2a00      	cmp	r2, #0
 80126fa:	dd08      	ble.n	801270e <scalbn+0x9e>
 80126fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012700:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012704:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012708:	ec45 4b10 	vmov	d0, r4, r5
 801270c:	bd70      	pop	{r4, r5, r6, pc}
 801270e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012712:	da08      	bge.n	8012726 <scalbn+0xb6>
 8012714:	2d00      	cmp	r5, #0
 8012716:	a10a      	add	r1, pc, #40	; (adr r1, 8012740 <scalbn+0xd0>)
 8012718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801271c:	dac0      	bge.n	80126a0 <scalbn+0x30>
 801271e:	a10e      	add	r1, pc, #56	; (adr r1, 8012758 <scalbn+0xe8>)
 8012720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012724:	e7bc      	b.n	80126a0 <scalbn+0x30>
 8012726:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801272a:	3236      	adds	r2, #54	; 0x36
 801272c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012730:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012734:	4620      	mov	r0, r4
 8012736:	4b0c      	ldr	r3, [pc, #48]	; (8012768 <scalbn+0xf8>)
 8012738:	2200      	movs	r2, #0
 801273a:	e7d5      	b.n	80126e8 <scalbn+0x78>
 801273c:	f3af 8000 	nop.w
 8012740:	c2f8f359 	.word	0xc2f8f359
 8012744:	01a56e1f 	.word	0x01a56e1f
 8012748:	8800759c 	.word	0x8800759c
 801274c:	7e37e43c 	.word	0x7e37e43c
 8012750:	8800759c 	.word	0x8800759c
 8012754:	fe37e43c 	.word	0xfe37e43c
 8012758:	c2f8f359 	.word	0xc2f8f359
 801275c:	81a56e1f 	.word	0x81a56e1f
 8012760:	43500000 	.word	0x43500000
 8012764:	ffff3cb0 	.word	0xffff3cb0
 8012768:	3c900000 	.word	0x3c900000
 801276c:	00000000 	.word	0x00000000

08012770 <floor>:
 8012770:	ec51 0b10 	vmov	r0, r1, d0
 8012774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801277c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8012780:	2e13      	cmp	r6, #19
 8012782:	ee10 5a10 	vmov	r5, s0
 8012786:	ee10 8a10 	vmov	r8, s0
 801278a:	460c      	mov	r4, r1
 801278c:	dc31      	bgt.n	80127f2 <floor+0x82>
 801278e:	2e00      	cmp	r6, #0
 8012790:	da14      	bge.n	80127bc <floor+0x4c>
 8012792:	a333      	add	r3, pc, #204	; (adr r3, 8012860 <floor+0xf0>)
 8012794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012798:	f7ed fd40 	bl	800021c <__adddf3>
 801279c:	2200      	movs	r2, #0
 801279e:	2300      	movs	r3, #0
 80127a0:	f7ee f982 	bl	8000aa8 <__aeabi_dcmpgt>
 80127a4:	b138      	cbz	r0, 80127b6 <floor+0x46>
 80127a6:	2c00      	cmp	r4, #0
 80127a8:	da53      	bge.n	8012852 <floor+0xe2>
 80127aa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80127ae:	4325      	orrs	r5, r4
 80127b0:	d052      	beq.n	8012858 <floor+0xe8>
 80127b2:	4c2d      	ldr	r4, [pc, #180]	; (8012868 <floor+0xf8>)
 80127b4:	2500      	movs	r5, #0
 80127b6:	4621      	mov	r1, r4
 80127b8:	4628      	mov	r0, r5
 80127ba:	e024      	b.n	8012806 <floor+0x96>
 80127bc:	4f2b      	ldr	r7, [pc, #172]	; (801286c <floor+0xfc>)
 80127be:	4137      	asrs	r7, r6
 80127c0:	ea01 0307 	and.w	r3, r1, r7
 80127c4:	4303      	orrs	r3, r0
 80127c6:	d01e      	beq.n	8012806 <floor+0x96>
 80127c8:	a325      	add	r3, pc, #148	; (adr r3, 8012860 <floor+0xf0>)
 80127ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ce:	f7ed fd25 	bl	800021c <__adddf3>
 80127d2:	2200      	movs	r2, #0
 80127d4:	2300      	movs	r3, #0
 80127d6:	f7ee f967 	bl	8000aa8 <__aeabi_dcmpgt>
 80127da:	2800      	cmp	r0, #0
 80127dc:	d0eb      	beq.n	80127b6 <floor+0x46>
 80127de:	2c00      	cmp	r4, #0
 80127e0:	bfbe      	ittt	lt
 80127e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80127e6:	4133      	asrlt	r3, r6
 80127e8:	18e4      	addlt	r4, r4, r3
 80127ea:	ea24 0407 	bic.w	r4, r4, r7
 80127ee:	2500      	movs	r5, #0
 80127f0:	e7e1      	b.n	80127b6 <floor+0x46>
 80127f2:	2e33      	cmp	r6, #51	; 0x33
 80127f4:	dd0b      	ble.n	801280e <floor+0x9e>
 80127f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80127fa:	d104      	bne.n	8012806 <floor+0x96>
 80127fc:	ee10 2a10 	vmov	r2, s0
 8012800:	460b      	mov	r3, r1
 8012802:	f7ed fd0b 	bl	800021c <__adddf3>
 8012806:	ec41 0b10 	vmov	d0, r0, r1
 801280a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801280e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8012812:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012816:	40df      	lsrs	r7, r3
 8012818:	4238      	tst	r0, r7
 801281a:	d0f4      	beq.n	8012806 <floor+0x96>
 801281c:	a310      	add	r3, pc, #64	; (adr r3, 8012860 <floor+0xf0>)
 801281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012822:	f7ed fcfb 	bl	800021c <__adddf3>
 8012826:	2200      	movs	r2, #0
 8012828:	2300      	movs	r3, #0
 801282a:	f7ee f93d 	bl	8000aa8 <__aeabi_dcmpgt>
 801282e:	2800      	cmp	r0, #0
 8012830:	d0c1      	beq.n	80127b6 <floor+0x46>
 8012832:	2c00      	cmp	r4, #0
 8012834:	da0a      	bge.n	801284c <floor+0xdc>
 8012836:	2e14      	cmp	r6, #20
 8012838:	d101      	bne.n	801283e <floor+0xce>
 801283a:	3401      	adds	r4, #1
 801283c:	e006      	b.n	801284c <floor+0xdc>
 801283e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012842:	2301      	movs	r3, #1
 8012844:	40b3      	lsls	r3, r6
 8012846:	441d      	add	r5, r3
 8012848:	45a8      	cmp	r8, r5
 801284a:	d8f6      	bhi.n	801283a <floor+0xca>
 801284c:	ea25 0507 	bic.w	r5, r5, r7
 8012850:	e7b1      	b.n	80127b6 <floor+0x46>
 8012852:	2500      	movs	r5, #0
 8012854:	462c      	mov	r4, r5
 8012856:	e7ae      	b.n	80127b6 <floor+0x46>
 8012858:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801285c:	e7ab      	b.n	80127b6 <floor+0x46>
 801285e:	bf00      	nop
 8012860:	8800759c 	.word	0x8800759c
 8012864:	7e37e43c 	.word	0x7e37e43c
 8012868:	bff00000 	.word	0xbff00000
 801286c:	000fffff 	.word	0x000fffff

08012870 <_init>:
 8012870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012872:	bf00      	nop
 8012874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012876:	bc08      	pop	{r3}
 8012878:	469e      	mov	lr, r3
 801287a:	4770      	bx	lr

0801287c <_fini>:
 801287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801287e:	bf00      	nop
 8012880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012882:	bc08      	pop	{r3}
 8012884:	469e      	mov	lr, r3
 8012886:	4770      	bx	lr
